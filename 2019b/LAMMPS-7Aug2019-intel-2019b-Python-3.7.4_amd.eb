easyblock = 'CMakeMake'

name = 'LAMMPS'
version = '7Aug2019'
versionsuffix = '-Python-%(pyver)s_amd'

homepage = 'http://lammps.sandia.gov/'
description = """LAMMPS is a classical molecular dynamics code, and an acronym
for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has
potentials for solid-state materials (metals, semiconductors) and soft matter
(biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be
used to model atoms or, more generically, as a parallel particle simulator at
the atomic, meso, or continuum scale. LAMMPS runs on single processors or in
parallel using message-passing techniques and a spatial-decomposition of the
simulation domain. The code is designed to be easy to modify or extend with new
functionality.
"""

toolchain = {'name': 'intel', 'version': '2019b'}
toolchainopts = {'openmp': True, 'usempi': True}

source_urls = ['https://github.com/lammps/lammps/archive/']
sources = ['stable_%(version)s.tar.gz']
patches = [
    'KOKKOS_EPYC.patch',
]
checksums = [
    '5380c1689a93d7922e3d65d9c186401d429878bb3cbe9a692580d3470d6a253f',  # stable_7Aug2019.tar.gz
    '297bcbb01e1f8af08f1af63df7ba54a18c802912cfb28b02febed07b112230cb',  # KOKKOS_EPYC.patch
]

builddependencies = [
    ('CMake', '3.15.3'),
    ('pkg-config', '0.29.2')
]

dependencies = [
    ('Python', '3.7.4'),
    ('libpng', '1.6.37'),
    ('libjpeg-turbo', '2.0.3'),
    ('netCDF', '4.7.1'),
    ('GSL', '2.6'),
    ('zlib', '1.2.11'),
    ('HDF5', '1.10.5'),
    # ('QuantumESPRESSO', '6.4.1'),
    ('tbb', '2019_U9'),
]

separate_build_dir = True

srcdir = '../lammps-stable_%(version)s/cmake'

_parallelisation_packages = ['BUILD_MPI', 'BUILD_OMP', 'PKG_OPT', 'PKG_USER-OMP', 'PKG_USER-INTEL', 'PKG_KOKKOS']
# 'PKG_GPU'

_configuration_options = ['BUILD_LIB', 'BUILD_EXE', 'BUILD_SHARED_LIBS']

# Blacklist because of deps
# USER-SMD PKG_USER-QUIP PKG_LATTE PKG_USER-QMMM PKG_USER-VTK PKG_KIM PKG_MSCG

_general_packages = ['PKG_ASPHERE', 'PKG_BODY', 'PKG_CLASS2', 'PKG_COLLOID', 'PKG_COMPRESS', 'PKG_CORESHELL',
                     'PKG_DIPOLE', 'PKG_GRANULAR', 'PKG_KSPACE', 'PKG_MANYBODY', 'PKG_MC', 'PKG_MEAM', 'PKG_MISC',
                     'PKG_MOLECULE', 'PKG_PERI', 'PKG_QEQ', 'PKG_REAX', 'PKG_REPLICA', 'PKG_RIGID', 'PKG_SHOCK',
                     'PKG_SNAP', 'PKG_SRD']

_other_packages = ['PKG_MPIIO', 'PKG_POEMS', 'PKG_PYTHON']

_user_packages = ['PKG_USER-ATC', 'PKG_USER-AWPMD', 'PKG_USER-CGDNA', 'PKG_USER-CGSDK', 'PKG_USER-COLVARS',
                  'PKG_USER-DIFFRACTION', 'PKG_USER-DPD', 'PKG_USER-DRUDE', 'PKG_USER-EFF', 'PKG_USER-FEP',
                  'PKG_USER-H5MD', 'PKG_USER-LB', 'PKG_USER-MANIFOLD', 'PKG_USER-MEAMC', 'PKG_USER-MESO',
                  'PKG_USER-MGPT', 'PKG_USER-MISC', 'PKG_USER-MOFFF', 'PKG_USER-MOLFILE', 'PKG_USER-NETCDF',
                  'PKG_USER-PHONON', 'PKG_USER-QTB', 'PKG_USER-REAXC',
                  'PKG_USER-SMTBQ', 'PKG_USER-SPH', 'PKG_USER-TALLY', 'PKG_USER-UEF']

_packages_opts = ' '.join("-D%s=on" % item for item in _parallelisation_packages + _general_packages + _other_packages
                          + _user_packages + _configuration_options)

_kspace_opts = ['FFT' + '=MKL', 'FFT_PACK' + '=array']

# _gpu_opts = ['GPU_API' + '=cuda', 'GPU_ARCH' + '=sm_70', 'CUDPP_OPT' + '=on']

_optional_deps = ['WITH_JPEG', 'WITH_PNG', 'WITH_GZIP']

_specific_opts = ' '.join("-D%s" % item for item in _kspace_opts)  # + _gpu_opts)
_other_opts = ' '.join("-D%s=yes" % item for item in _optional_deps)

configopts = _packages_opts + ' ' + _other_opts + ' ' + _specific_opts

# kokkos options
# configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ARCH="HSW"'
# configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ENABLE_CUDA=yes -DKOKKOS_ARCH="HSW;Kepler37"'
configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ARCH="EPYC"'
configopts += ' -DKOKKOS_ENABLE_OPENMP=yes -DKOKKOS_ENABLE_CUDA=no'

_pythonpath = 'lib/python%(pyshortver)s/site-packages'
modextrapaths = {'PYTHONPATH': _pythonpath}

sanity_check_paths = {
    'files': ['include/lammps/library.h', 'bin/lmp', 'lib64/liblammps.%s' % SHLIB_EXT],
    'dirs': [],
}

moduleclass = 'lib'
