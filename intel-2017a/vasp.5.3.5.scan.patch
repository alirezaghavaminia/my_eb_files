--- metagga.F.orig	2016-09-26 18:34:29.000000000 +0800
+++ metagga.F	2016-09-26 18:34:29.000000000 +0800
@@ -859,677 +859,885 @@
       END SUBROUTINE EPKZB
 
 
-!************************ SUBROUTINE VrevTPSSx *****************************
-!
-! calculates the first order derivatives of Ex wrt n and |grad(n)|
-! Perdew et. al. PRL (2009)
+!***********************************************************************
 !
 ! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
 !
-! everything in Hartree units
-!
-! ATTANTION: Every values are passed "as they are", i.e. including
-! possibly unphysical numerical errors (e.g. negative charge densities)
-! values need to be checked accordingly
-!
 ! RU,RD                        density up,down
 ! DRU, DRD                     abs. val. gradient of density up/down
 ! DRT                          abs. val. gradient of total density
-! TAUU,TAUD                    kinetic energy density up/down
-! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
-! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
-! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
-! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
+! CRPKZB                       C(ZETA,XI)
+! D_CRPKZB_D1,D_CRPKZB_D2      THE DERIVATIVE OF C(ZETA,XI) WRT n
+! D_CRPKZB_DD1,D_CRPKZB_DD2    THE DERIVATIVE OF C(ZETA,XI) WRT |GRAD n|
 !
 !***********************************************************************
 
-      SUBROUTINE VrevTPSSx(&
-     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ex_revTPSS,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2)
+      SUBROUTINE COE_RPKZB(&
+     &   RU,RD,DRU,DRD,DRT, &
+     &   CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
 
       USE prec
       USE constant
       IMPLICIT REAL(q) (A-H,O-Z)
 
 ! the following parameters are given by Perdew et.al.
-! the coefficients for the exchange part
-      PARAMETER (RKAPPA=0.804_q)
-      PARAMETER (CFB=0.40_q)
-      PARAMETER (CFC=2.35203946_q)
-      PARAMETER (CFE=2.16769874_q)
-      PARAMETER (CFMU=0.14_q)
+! the coefficients for the correlatin part
+      PARAMETER (CF1=0.59_q)
+      PARAMETER (CF2=0.9269_q)
+      PARAMETER (CF3=0.6225_q)
+      PARAMETER (CF4=2.1540_q)
 
 ! other parameters
       PARAMETER (ONE=1._q)
       PARAMETER (TWO=2._q)
       PARAMETER (THREE=3._q)
       PARAMETER (FOUR=4._q)
+      PARAMETER (FIVE=5._q)
+      PARAMETER (SIX=6._q)
       PARAMETER (THRD=1._q/3._q)
       PARAMETER (THRD2=2._q*THRD)
       PARAMETER (THRD4=4._q*THRD)
       PARAMETER (THRD5=1._q+THRD2)
       PARAMETER (THRD8=1._q+THRD5)
       PARAMETER (PISQ=PI*PI)
-      PARAMETER (AX=-0.738558766382022405884230032680836_q)
-! test
-      PARAMETER (thresh=1.e-10_q)
-      PARAMETER (xorder=12._q)
-      PARAMETER (zinfinity=2._q)
-! test
-      VXD1=0._q;VXD2=0._q;
-      VXDD1=0._q;VXDD2=0._q;
-      AMUXD1=0._q;AMUXD2=0._q;
 
+      CRPKZB=0._q
+      D_CRPKZB_D1=0._q;D_CRPKZB_D2=0._q;
+      D_CRPKZB_DD1=0._q;D_CRPKZB_DD2=0._q;
 
-      CX1=10._q/81._q
-      CX2=146._q/2025._q
-      CX3=73._q/405._q
-      CFE12=SQRT(CFE)
+      RT=RU+RD
+      YA=DRU**2._q
+      YB=DRD**2._q
+      Y=DRT**2._q
+! YC IS DEL RU DOT DEL RD
+      YC=(Y-YA-YB)/2._q
 
-! Suspect that TAUWU and TAUWD are not well described. Use TAUW_TEMP=0.125_q*DRT**2/RT
-! IF WANT TO TEST TAUW, SIMPLY OVERWRITE TAUW_TEMP BY TAUW
-      TAUWU_TEMP=0.125_q*DRU**2._q/RU
-!     TAUWU_TEMP=MIN(TAUWU_TEMP,TAUU)
-      
-      TAUWD_TEMP=0.125_q*DRD**2._q/RD
-!     TAUWD_TEMP=MIN(TAUWD_TEMP,TAUD)
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
+      ZETA2=ZETA*ZETA
+      OPZETA=ONE/(ONE+ZETA)
+      OMZETA=ONE/(ONE-ZETA)
+      D_ZETA_D1=TWO*RD/RT**TWO
+      D_ZETA_D2=-TWO*RU/RT**TWO
 
-! spin up
-! IN EXD1(2*RU), TAUWU AND TAUU SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
-      RHO=TWO*RU
-      DRHO=TWO*DRU
-      TAUW_RHO=TWO*TAUWU_TEMP
-      TAU_RHO=TWO*TAUU
+! |GRAD ZETA|, 
+! IN SOME EXTREME CASES, THE TERM (YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)
+! GOES TO NEGATIVE BECAUSE OF THE NUMERICAL PRESICION OF COMPUTERS. SO, WE USE 2/4 AS THE POWER
+! INSTEAD OF 1/2
+     
+      DEL_ZETA=TWO/RT**TWO*((YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)**TWO)**(ONE/FOUR)
+      DEL_ZETA=MAX(DEL_ZETA,1E-10_q)
+      D_DEL_ZETA_D1=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RD+TWO*RU*YB)
+      D_DEL_ZETA_D2=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RU+TWO*RD*YA)
+      D_DEL_ZETA_DD1=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RD**TWO*DRU-TWO*RU*RD*YC/DRU)
+      D_DEL_ZETA_DD2=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RU**TWO*DRD-TWO*RU*RD*YC/DRD)
 
-!----------------------------------------------------------------------
-! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
-      EXUNIF=AX*RHO**THRD
-      EXLDA=EXUNIF*RHO
-      EXDLDA=EXUNIF*THRD4
+! XI
+      XIDEN=TWO*(THREE*PISQ*RT)**THRD
+      XI=DEL_ZETA/XIDEN
+      D_XI_D1=(D_DEL_ZETA_D1-THRD*DEL_ZETA/RT)/XIDEN
+      D_XI_D2=(D_DEL_ZETA_D2-THRD*DEL_ZETA/RT)/XIDEN
+      D_XI_DD1=D_DEL_ZETA_DD1/XIDEN
+      D_XI_DD2=D_DEL_ZETA_DD2/XIDEN
 
+      CNUM=CF1+(CF2+(CF3+CF4*ZETA2)*ZETA2)*ZETA2
+      D_CNUM_D1=D_ZETA_D1*(TWO*CF2+(FOUR*CF3+SIX*CF4*ZETA2)*ZETA2)*ZETA
+      D_CNUM_D2=D_ZETA_D2*(TWO*CF2+(FOUR*CF3+SIX*CF4*ZETA2)*ZETA2)*ZETA
 
-! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
-      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
-      P2=P*P
-      Z=TAUW_RHO/TAU_RHO
-! test
-      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
-#ifdef Zmethod1
-      IF (Z>1) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=1
-      ELSE IF(Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE
-        DZTILDEDZ=1
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-      ENDIF
-#endif
-#ifdef Zmethod2 
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+Z**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-#ifdef Zmethod3
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-! test      
-      Z2=Z*Z
-      Z3=Z2*Z
-      ZTF=0.6_q*Z
-      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
-      
-!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
-      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
+      OPZETA43=OPZETA**THRD4
+      OMZETA43=OMZETA**THRD4
+      CDENL=ONE+XI**TWO*(OPZETA43+OMZETA43)/TWO
+      CDEN=CDENL**FOUR
+      D_CDENL_DXI=XI*(OPZETA43+OMZETA43)
+      D_CDENL_DZETA=-THRD2*XI**TWO*(OPZETA43*OPZETA-OMZETA43*OMZETA)
+      D_CDENL_D1=D_CDENL_DXI*D_XI_D1+D_CDENL_DZETA*D_ZETA_D1
+      D_CDENL_D2=D_CDENL_DXI*D_XI_D2+D_CDENL_DZETA*D_ZETA_D2
+      D_CDENL_DD1=D_CDENL_DXI*D_XI_DD1
+      D_CDENL_DD2=D_CDENL_DXI*D_XI_DD2
+
+      D_CDEN_D1=FOUR*CDENL**THREE*D_CDENL_D1
+      D_CDEN_D2=FOUR*CDENL**THREE*D_CDENL_D2
+      D_CDEN_DD1=FOUR*CDENL**THREE*D_CDENL_DD1
+      D_CDEN_DD2=FOUR*CDENL**THREE*D_CDENL_DD2
       
-      QB_NUM=9._q/20._q*(ALPHA-ONE)
-      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
-      QB=QB_NUM/QB_DEN+ TWO*P/THREE
-      OPZ=ONE+Z2
-      SFP=Z3/OPZ**TWO
-      FQ=SQRT((ZTF**TWO+P2)/TWO)
-      S1=(CX1+CFC*SFP)*P
-      S2=CX2*QB**TWO
-      S3=-CX3*FQ*QB
-      S4=(CX1*P)**TWO/RKAPPA
-      S5=TWO*CFE12*CX1*ZTF**TWO
-      S6=CFE*CFMU*P2*P
-      XN=S1+S2+S3+S4+S5+S6
-      XD=(ONE+CFE12*P)**TWO
-      X=XN/XD
+! OUTPUT CRPKZB,,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2
+      CRPKZB=CNUM/CDEN
+      D_CRPKZB_D1=(CDEN*D_CNUM_D1-CNUM*D_CDEN_D1)/CDEN**TWO
+      D_CRPKZB_D2=(CDEN*D_CNUM_D2-CNUM*D_CDEN_D2)/CDEN**TWO
+      D_CRPKZB_DD1=-CNUM*D_CDEN_DD1/CDEN**TWO
+      D_CRPKZB_DD2=-CNUM*D_CDEN_DD2/CDEN**TWO
+      RETURN
+      END SUBROUTINE COE_RPKZB
 
-!    GET THE VALUE FOR FX
-      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
 
-!    NOW, DERIVATIVES COME
-      DPD=-THRD8*P/RHO
-      DPDD=TWO*P/DRHO
-      DPDTAU=0._q
+!***********************************************************************
+!
+! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
+!
+! RU,RD                        density up,down
+! DRU, DRD                     abs. val. gradient of density up/down
+! DRT                          abs. val. gradient of total density
+! EPPGGA                       GGA ENERGY PER PARTICLE
+! EPPGGA_D1,EPPGGA_D2          THE DERIVATIVE OF EPPGGA WRT n
+! EPPGGA_DD1,EPPGGA_DD2        THE DERIVATIVE OF EPPGGA WRT |GRAD n|
+!
+!***********************************************************************
+      SUBROUTINE CORGGA_REVTPSS(&
+     &   RU,RD,DRU,DRD,DRT, &
+     &   EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
 
-      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
+      USE prec
+      USE constant
 
-      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
-!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   &  
-!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
+      IMPLICIT REAL(q) (A-H,O-Z)
+      PARAMETER (ONE=1._q)
+      PARAMETER (TWO=2._q)
+      PARAMETER (THREE=3._q)
+      PARAMETER (FOUR=4._q)
+      PARAMETER (FIVE=5._q)
+      PARAMETER (SIX=6._q)
+      PARAMETER (THRD=1._q/3._q)
+      PARAMETER (THRD2=2._q*THRD)
+      PARAMETER (THRD4=4._q*THRD)
+      PARAMETER (THRD5=1._q+THRD2)
+      PARAMETER (THRD8=1._q+THRD5)
+      PARAMETER (PISQ=PI*PI)
+  
+      PARAMETER (GAMMA=0.03109069086965489503494086371273_q)
+      PARAMETER (BETA_mb=0.06672455060314922_q)
 
-      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
-!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
+      EPPGGA  =0._q
+      EPPGGA_D1=0._q
+      EPPGGA_D2=0._q
+      EPPGGA_DD1=0._q
+      EPPGGA_DD2=0._q
 
-      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
-!     DALPHADTAU=ONE/TAU_UNIF
+      RT=RU+RD
+      YA=DRU**2._q
+      YB=DRD**2._q
+      Y=DRT**2._q
+!     YC IS DEL RU DOT DEL RD
+      YC=(Y-YA-YB)/2._q
 
-      DQB_NUM_D=9._q/20._q*DALPHAD
-      DQB_NUM_DD=9._q/20._q*DALPHADD
-      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
-      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
-      DQB_DEN_D=C_DQB_DEN*DALPHAD
-      DQB_DEN_DD=C_DQB_DEN*DALPHADD
-      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
+      DZETAD1=TWO*RD/RT**TWO
+      DZETAD2=-TWO*RU/RT**TWO
 
-      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
-      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
-      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
 
-      C1_DS1=P*Z2*(THREE*CFC-CFC*Z2)/OPZ**THREE
-      C2_DS1=(CX1+CFC*Z3/OPZ**TWO)
-      DS1D=C1_DS1*DZD+C2_DS1*DPD
-      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
-      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
+      DTHRD=exp(log(RT)*THRD)
+      RS=(0.75_q/PI)**THRD/DTHRD
+      DRSD1=-THRD/RT*RS
+      DRSD2=-THRD/RT*RS
 
-      C_DS2=CX2*TWO*QB
-      DS2D=C_DS2*DQBD
-      DS2DD=C_DS2*DQBDD
-      DS2DTAU=C_DS2*DQBDTAU
 
-      DFQD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZD+P*DPD)
-      DFQDD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDD+P*DPDD)
-      DFQDTAU=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDTAU+P*DPDTAU)
-      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
-      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
-      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
+      PHI = (exp((TWO*THRD)*log(1._q+ZETA)) &
+                +exp((TWO*THRD)*log(1._q-ZETA)))/2._q
+      D_PHI_DZETA=THRD*((ONE+ZETA)**(-THRD)-(ONE-ZETA)**(-THRD))
+      D_PHI_D1=D_PHI_DZETA*DZETAD1
+      D_PHI_D2=D_PHI_DZETA*DZETAD2
 
-      C_S4=TWO/RKAPPA*CX1**TWO*P
-      DS4D=C_S4*DPD
-      DS4DD=C_S4*DPDD
-      DS4DTAU=C_S4*DPDTAU
+      AFIX_T=SQRT(PI/FOUR)*(9._q*PI/FOUR)**(ONE/SIX)
+      S=DRT/(TWO*(THREE*PISQ)**THRD*RT**THRD4)
+      DSD1=-THRD4*S/RT
+      DSD2=-THRD4*S/RT
+! |GRAD N|/|GRAD N(UP OR DOWN)|
+      GNGNU=ONE/(TWO*DRT)*(TWO*DRU+TWO*YC/DRU)
+      GNGND=ONE/(TWO*DRT)*(TWO*DRD+TWO*YC/DRD)
+      DSDD1=S/DRT*GNGNU
+      DSDD2=S/DRT*GNGND
 
-      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
-      DS5D=C_S5*DZD
-      DS5DD=C_S5*DZDD
-      DS5DTAU=C_S5*DZDTAU
+      T=AFIX_T*S/SQRT(RS)/PHI
+      T2 = T*T
+      T4 = T2*T2
 
-      C_S6=THREE*CFE*CFMU*P2
-      DS6D=C_S6*DPD
-      DS6DD=C_S6*DPDD
-      DS6DTAU=C_S6*DPDTAU
+      DTD1=AFIX_T*(PHI*RS*DSD1-0.5_q*S*PHI*DRSD1-S*RS*D_PHI_D1)/(PHI**TWO*RS**(THREE/TWO))
+      DTD2=AFIX_T*(PHI*RS*DSD2-0.5_q*S*PHI*DRSD2-S*RS*D_PHI_D2)/(PHI**TWO*RS**(THREE/TWO))
+      DTDD1=AFIX_T*DSDD1/(SQRT(RS)*PHI)
+      DTDD2=AFIX_T*DSDD2/(SQRT(RS)*PHI)
 
-      C_XD=TWO*(ONE+CFE12*P)*CFE12
-      DXD_D=C_XD*DPD
-      DXD_DD=C_XD*DPDD
-      DXD_DTAU=C_XD*DPDTAU
+      FK=(3._q*PI*PI)**THRD*DTHRD
+      SK = SQRT(4.0_q*FK/PI)
+! Only the local part (EC,VCUPLDA,VCDNLDA) are used from the following call to CORPBE
+      CALL CORPBE_revtpss(RS,ZETA,EC,VCUPLDA,VCDNLDA,PHI,SK, &
+           T,H,DVCUP,DVCDN,ECQ,.FALSE.)
+! OBTAIN THE CONTRIBUTION FROM LDA PART AND D_EC_DRS AND D_EC_DZETA
+!      EPPGGA=EC
+!      EPPGGA_D1=(VCUPLDA-EC)/RT
+!      EPPGGA_D2=(VCDNLDA-EC)/RT
+      D_EC_DZETA=(VCUPLDA-VCDNLDA)/TWO
+      D_EC_DRS=(EC-ZETA*D_EC_DZETA-(VCUPLDA+VCDNLDA)/TWO)*THREE/RS
 
-      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
-      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
-      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
+! THE RS DEPENDENCE OF BETA
+      AFACTOR=0.1_q
+      BFACTOR=0.1778_Q
+      BETA_NUM=ONE + AFACTOR*RS
+      BETA_DEN=ONE+ BFACTOR*RS
+      D_BETA_NUM=AFACTOR
+      D_BETA_DEN=BFACTOR
+      BETA = BETA_MB*BETA_NUM/BETA_DEN
+      D_BETA_DRS=BETA_MB*(BETA_DEN*D_BETA_NUM-BETA_NUM*D_BETA_DEN)/BETA_DEN**TWO
+      
+ 
+      PHI3=PHI**THREE
+      PON=-EC/(PHI3*gamma)
+      W=DEXP(PON)-ONE
+      D_W_DRS=-(W+ONE)*D_EC_DRS/(GAMMA*PHI3)
+      D_W_DZETA=-(W+ONE)/(GAMMA*PHI3)*(D_EC_DZETA-THREE*EC*D_PHI_DZETA/PHI)
+      D_W_DT=0._q
 
-      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
-!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
-      DX_DD=DXN_DD/XD-X*DXD_DD/XD
-      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
 
-      C_FX=ONE/(ONE+X/RKAPPA)**TWO
-      DFX_D=C_FX*DX_D
-      DFX_DD=C_FX*DX_DD
-      DFX_DTAU=C_FX*DX_DTAU
+      A=BETA/(GAMMA*W)
+      D_A_DRS=(W*D_BETA_DRS-BETA*D_W_DRS)/(GAMMA*W**TWO)
+      D_A_DZETA=-BETA*D_W_DZETA/(GAMMA*W**TWO)
+      D_A_DT=0._q
 
-!   OUTPUT THE VXD1,VXDD1 AND AMUXD1
-      VXD1=EXDLDA*FX+EXLDA*DFX_D
-      VXDD1=EXLDA*DFX_DD
-      AMUXD1=EXLDA*DFX_DTAU
-      EX_REVTPSS=0._q
-      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+      V=A*T2
+      D_V_DRS=T2*D_A_DRS
+      D_V_DZETA=T2*D_A_DZETA
+      D_V_DT=T2*D_A_DT+TWO*A*T
+        
+      FUNKG=ONE/(ONE+V+V**TWO)
+      D_FUNKG_DV=-(ONE+TWO*V)*FUNKG**TWO
+      
+      
+      HCORE=ONE+W*(ONE-FUNKG)
+      AH=GAMMA*PHI3
+      H=AH*DLOG(HCORE)
+   
+      DH1=ONE-FUNKG
+      DH2=W*D_FUNKG_DV
+      D_H_DRS=(DH1*D_W_DRS-DH2*D_V_DRS)*AH/HCORE
+      D_H_DZETA=THREE*H*D_PHI_DZETA/PHI+(DH1*D_W_DZETA-DH2*D_V_DZETA)*AH/HCORE
+      D_H_DT=(DH1*D_W_DT-DH2*D_V_DT)*AH/HCORE
 
-! spin down
-! IN EXD1(2*RD), TAUWD AND TAUD SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
-      RHO=TWO*RD
-      DRHO=TWO*DRD
-      TAUW_RHO=TWO*TAUWD_TEMP
-      TAU_RHO=TWO*TAUD
+! OUTPUT EPPGGA AND ITS DERIVATIVES EPPGGA_D1,EPPGGA_D2, EPPGGA_DD1, EPPGGA_DD2
+      EPPGGA=EC+H
+      EPPGGA_D1=D_EC_DRS*DRSD1+D_EC_DZETA*DZETAD1+D_H_DRS*DRSD1+D_H_DZETA*DZETAD1+D_H_DT*DTD1
+      EPPGGA_D2=D_EC_DRS*DRSD2+D_EC_DZETA*DZETAD2+D_H_DRS*DRSD2+D_H_DZETA*DZETAD2+D_H_DT*DTD2
+      EPPGGA_DD1=D_H_DT*DTDD1
+      EPPGGA_DD2=D_H_DT*DTDD2
 
-!----------------------------------------------------------------------
-! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
-      EXUNIF=AX*RHO**THRD
-      EXLDA=EXUNIF*RHO
-      EXDLDA=EXUNIF*THRD4
+      RETURN
+      END SUBROUTINE CORGGA_REVTPSS
 
 
-! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
+      SUBROUTINE GGASPINCOR_revTPSS(D1,D2,DDA,EC)
+!     D1   density up
+!     D2   density down
+!     DDA  |gradient of the total density|
 
-      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
-      P2=P*P
-      Z=TAUW_RHO/TAU_RHO
-! test
-      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
-#ifdef Zmethod1
-      IF (Z>1) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=1
-      ELSE IF(Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE
-        DZTILDEDZ=1
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-      ENDIF
-#endif
-#ifdef Zmethod2
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-         DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-         Z=Z/(1._q+Z**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-#ifdef Zmethod3
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-! test     
-      Z2=Z*Z
-      Z3=Z2*Z
-      ZTF=0.6_q*Z
-      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
+      PARAMETER (THRD=1._q/3._q)
 
-!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
-      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
-      
-      QB_NUM=9._q/20._q*(ALPHA-ONE)
-      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
-      QB=QB_NUM/QB_DEN+ TWO*P/THREE
-      OPZ=ONE+Z2
-      SFP=Z3/OPZ**TWO
-      FQ=SQRT((ZTF**TWO+P2)/TWO)
-      S1=(CX1+CFC*SFP)*P
-      S2=CX2*QB**TWO
-      S3=-CX3*FQ*QB
-      S4=(CX1*P)**TWO/RKAPPA
-      S5=TWO*CFE12*CX1*ZTF**TWO
-      S6=CFE*CFMU*P2*P
-      XN=S1+S2+S3+S4+S5+S6
-      XD=(ONE+CFE12*P)**TWO
-      X=XN/XD
+      D=D1+D2
+      DTHRD=exp(log(D)*THRD)
+      RS=(0.75_q/PI)**THRD/DTHRD
 
-!    GET THE VALUE FOR FX
-      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
+      ZETA=(D1-D2)/D
+      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
 
-!    NOW, DERIVATIVES COME
-      DPD=-THRD8*P/RHO
-      DPDD=TWO*P/DRHO
-      DPDTAU=0._q
-
-      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
-
-      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
-!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   & 
-!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
-
-      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
-!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
-
-      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
-!     DALPHADTAU=ONE/TAU_UNIF
-
-      DQB_NUM_D=9._q/20._q*DALPHAD
-      DQB_NUM_DD=9._q/20._q*DALPHADD
-      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
-      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
-      DQB_DEN_D=C_DQB_DEN*DALPHAD
-      DQB_DEN_DD=C_DQB_DEN*DALPHADD
-      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
-
-      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
-      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
-      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
-
-      C1_DS1=P*Z2*(THREE*CFC-CFC*Z2)/OPZ**THREE
-      C2_DS1=(CX1+CFC*Z3/OPZ**TWO)
-      DS1D=C1_DS1*DZD+C2_DS1*DPD
-      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
-      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
-
-      C_DS2=CX2*TWO*QB
-      DS2D=C_DS2*DQBD
-      DS2DD=C_DS2*DQBDD
-      DS2DTAU=C_DS2*DQBDTAU
-
-      DFQD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZD+P*DPD)
-      DFQDD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDD+P*DPDD)
-      DFQDTAU=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDTAU+P*DPDTAU)
-      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
-      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
-      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
-
-      C_S4=TWO/RKAPPA*CX1**TWO*P
-      DS4D=C_S4*DPD
-      DS4DD=C_S4*DPDD
-      DS4DTAU=C_S4*DPDTAU
-
-      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
-      DS5D=C_S5*DZD
-      DS5DD=C_S5*DZDD
-      DS5DTAU=C_S5*DZDTAU
-
-      C_S6=THREE*CFE*CFMU*P2
-      DS6D=C_S6*DPD
-      DS6DD=C_S6*DPDD
-      DS6DTAU=C_S6*DPDTAU
-
-      C_XD=TWO*(ONE+CFE12*P)*CFE12
-      DXD_D=C_XD*DPD
-      DXD_DD=C_XD*DPDD
-      DXD_DTAU=C_XD*DPDTAU
+      FK=(3._q*PI*PI)**THRD*DTHRD
+      SK = SQRT(4.0_q*FK/PI)
+      G = (exp((2*THRD)*log(1._q+ZETA)) &
+                +exp((2*THRD)*log(1._q-ZETA)))/2._q
+      T = DDA/(D*2._q*SK*G)
 
-      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
-      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
-      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
+      CALL CORPBE_revtpss(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
+           T,EC,ECD1,ECD2,ECQ,.TRUE.)
 
-      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
-!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
-      DX_DD=DXN_DD/XD-X*DXD_DD/XD
-      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
+      EC  =(EC  +ECLDA)
+      RETURN
+      END SUBROUTINE GGASPINCOR_revTPSS
 
-      C_FX=ONE/(ONE+X/RKAPPA)**TWO
-      DFX_D=C_FX*DX_D
-      DFX_DD=C_FX*DX_DD
-      DFX_DTAU=C_FX*DX_DTAU
 
-!   OUTPUT THE VXD2,VXDD2 AND AMUXD2
-      VXD2=EXDLDA*FX+EXLDA*DFX_D
-      VXDD2=EXLDA*DFX_DD
-      AMUXD2=EXLDA*DFX_DTAU
+! Modified by Adrienn Ruzsinszky
+!######################################################################
+!----------------------------------------------------------------------
+      SUBROUTINE CORPBE_revtpss(RS,ZET,EC,VCUP,VCDN,g,sk, &
+     &                  T,H,DVCUP,DVCDN,ecdd,lgga)
+!----------------------------------------------------------------------
+!  Official PBE correlation code. K. Burke, May 14, 1996.
+!  INPUT: RS=SEITZ RADIUS=(3/4pi rho)^(1/3)
+!       : ZET=RELATIVE SPIN POLARIZATION = (rhoup-rhodn)/rho
+!       : t=ABS(GRAD rho)/(rho*2.*KS*G)  -- only needed for PBE
+!       : lgga=flag to do gga (0=>LSD only)
+!       : lmetagga=flag to do metagga (revTPSS)
+!       : lpot=flag to do potential (0=>energy only)
+!  output: ec=lsd correlation energy from [a]
+!        : vcup=lsd up correlation potential
+!        : vcdn=lsd dn correlation potential
+!        : h=NONLOCAL PART OF CORRELATION ENERGY PER ELECTRON
+!        : dvcup=nonlocal correction to vcup
+!        : dvcdn=nonlocal correction to vcdn
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! References:
+! [a] J.P.~Perdew, K.~Burke, and M.~Ernzerhof, 
+!     {\sl Generalized gradient approximation made simple}, sub.
+!     to Phys. Rev.Lett. May 1996.
+! [b] J. P. Perdew, K. Burke, and Y. Wang, {\sl Real-space cutoff
+!     construction of a generalized gradient approximation:  The PW91
+!     density functional}, submitted to Phys. Rev. B, Feb. 1996.
+! [c] J. P. Perdew and Y. Wang, Phys. Rev. B {\bf 45}, 13244 (1992).
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+      USE prec
+      IMPLICIT REAL(q) (A-H,O-Z)
+      logical lgga
+! thrd*=various multiples of 1/3
+! numbers for use in LSD energy spin-interpolation formula, [c](9).
+!      GAM= 2^(4/3)-2
+!      FZZ=f''(0)= 8/(9*GAM)
+! numbers for construction of PBE
+!      gamma=(1-log(2))/pi^2
+!      bet=coefficient in gradient expansion for correlation, [a](4).
+!      eta=small number to stop d phi/ dzeta from blowing up at 
+!          |zeta|=1.      
+      parameter(thrd=1._q/3._q,thrdm=-thrd,thrd2=2._q*thrd)
+      parameter(sixthm=thrdm/2._q)
+      parameter(thrd4=4._q*thrd)
+      parameter(GAM=0.5198420997897463295344212145565_q)
+      parameter(fzz=8._q/(9._q*GAM))
+      parameter(gamma=0.03109069086965489503494086371273_q)
+      parameter(bet_mb=0.06672455060314922_q)
+      parameter(eta=1.e-12_q)
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! find LSD energy contributions, using [c](10) and Table I[c].
+! EU=unpolarized LSD correlation energy
+! EURS=dEU/drs
+! EP=fully polarized LSD correlation energy
+! EPRS=dEP/drs
+! ALFM=-spin stiffness, [c](3).
+! ALFRSM=-dalpha/drs
+! F=spin-scaling factor from [c](9).
+! construct ec, using [c](8)
+      rtrs=dsqrt(rs)
+      CALL gcor2(0.0310907_q,0.21370_q,7.5957_q,3.5876_q,1.6382_q, &
+     &    0.49294_q,rtrs,EU,EURS)
+      CALL gcor2(0.01554535_q,0.20548_q,14.1189_q,6.1977_q,3.3662_q, &
+     &    0.62517_q,rtRS,EP,EPRS)
+      CALL gcor2(0.0168869_q,0.11125_q,10.357_q,3.6231_q,0.88026_q, &
+     &    0.49671_q,rtRS,ALFM,ALFRSM)
+      ALFC = -ALFM
+      Z4 = ZET**4
+      F=((1._q+ZET)**THRD4+(1._q-ZET)**THRD4-2._q)/GAM
+      EC = EU*(1._q-F*Z4)+EP*F*Z4-ALFM*F*(1._q-Z4)/FZZ
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! LSD potential from [c](A1)
+! ECRS = dEc/drs [c](A2)
+! ECZET=dEc/dzeta [c](A3)
+! FZ = dF/dzeta [c](A4)
+      ECRS = EURS*(1._q-F*Z4)+EPRS*F*Z4-ALFRSM*F*(1._q-Z4)/FZZ
+      FZ = THRD4*((1._q+ZET)**THRD-(1._q-ZET)**THRD)/GAM
+      ECZET = 4._q*(ZET**3)*F*(EP-EU+ALFM/FZZ)+FZ*(Z4*EP-Z4*EU &
+     &        -(1._q-Z4)*ALFM/FZZ)
+      COMM = EC -RS*ECRS/3._q-ZET*ECZET
+      VCUP = COMM + ECZET
+      VCDN = COMM - ECZET
+!write(*,*)'rs,VCUP,VCDN',rs,VCUP,VCDN
+      if (.not.lgga) return
+!----------------------------------------------------------------------
+! PBE correlation energy
+! G=phi(zeta), given after [a](3)
+! DELT=bet/gamma
+! B=A of [a](8)
+      bet = bet_mb*(1._q + 0.1_q*RS)/(1._q + 0.1778_q*RS)
 
-      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
-      EX_REVTPSS=EX_REVTPSS/TWO
+      delt=bet/gamma
+      G3 = G**3
+      PON=-EC/(G3*gamma)
+      B = DELT/(DEXP(PON)-1._q)
+      B2 = B*B
+      T2 = T*T
+      T4 = T2*T2
+      RS2 = RS*RS
+      RS3 = RS2*RS
+      Q4 = 1._q+B*T2
+      Q5 = 1._q+B*T2+B2*T4
+      H = G3*(BET/DELT)*DLOG(1._q+DELT*Q4*T2/Q5)
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! ENERGY DONE. NOW THE POTENTIAL, using appendix E of [b].
+      G4 = G3*G
+      T6 = T4*T2
+      RSTHRD = RS/3._q
+      GZ=(((1._q+zet)**2+eta)**sixthm- &
+     &((1._q-zet)**2+eta)**sixthm)/3._q
+      FAC = DELT/B+1._q
+      BG = -3._q*B2*EC*FAC/(BET*G4)
+      BEC = B2*FAC/(BET*G3)
+      Q8 = Q5*Q5+DELT*Q4*Q5*T2
+      Q9 = 1._q+2._q*B*T2
+      hB = -BET*G3*B*T6*(2._q+B*T2)/Q8
+      hRS = -RSTHRD*hB*BEC*ECRS
+      hZ = 3._q*GZ*h/G + hB*(BG*GZ+BEC*ECZET)
+      hT = 2._q*BET*G3*Q9/Q8
+      COMM = H+HRS-7.0_q*T2*HT/6._q
+      PREF = HZ-GZ*T2*HT/G
+      COMM = COMM-PREF*ZET
+      DVCUP = COMM + PREF
+      DVCDN = COMM - PREF
+      ecdd=0.5_q/(sk*g)*t*ht
       RETURN
-      END SUBROUTINE VrevTPSSx
+      END SUBROUTINE CORPBE_revtpss
 
 
-!***********************************************************************
+!************************ SUBROUTINE VTPSSx ****************************
+!
+! calculates the first order derivatives of Ex wrt n and |grad(n)|
+! Perdew et. al. PRL (2009)
 !
 ! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
 !
+! everything in Hartree units
+!
+! ATTANTION: Every values are passed "as they are", i.e. including
+! possibly unphysical numerical errors (e.g. negative charge densities)
+! values need to be checked accordingly
+!
 ! RU,RD                        density up,down
 ! DRU, DRD                     abs. val. gradient of density up/down
 ! DRT                          abs. val. gradient of total density
 ! TAUU,TAUD                    kinetic energy density up/down
 ! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
-! VCD1 VCD2                    THE DERIVATIVES OF EC WRT n 
-! VCDD1,VCDD2                  THE DERIVATIVES OF EC WRT |grad n| 
-! AMUCD1, AMUCD2                   THE DERIVATIVES OF EC WRT TAU
+! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
+! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
+! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
 !
 !***********************************************************************
 
-      SUBROUTINE VrevTPSSc(&
+      SUBROUTINE VTPSSx(&
      &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
+     &   Ex_revTPSS,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2)
 
       USE prec
       USE constant
       IMPLICIT REAL(q) (A-H,O-Z)
 
 ! the following parameters are given by Perdew et.al.
-! the coefficients for the correlatin part
-      PARAMETER (CFD=2.8_q)
+! the coefficients for the exchange part
+      PARAMETER (RKAPPA=0.804_q)
+      PARAMETER (CFB=0.40_q)
+      PARAMETER (CFC=1.59096_q)
+      PARAMETER (CFE=1.537_q)
+      PARAMETER (CFMU=0.21951_q)
 
 ! other parameters
       PARAMETER (ONE=1._q)
       PARAMETER (TWO=2._q)
       PARAMETER (THREE=3._q)
       PARAMETER (FOUR=4._q)
-      PARAMETER (PISQ=PI*PI)
       PARAMETER (THRD=1._q/3._q)
       PARAMETER (THRD2=2._q*THRD)
       PARAMETER (THRD4=4._q*THRD)
       PARAMETER (THRD5=1._q+THRD2)
       PARAMETER (THRD8=1._q+THRD5)
+      PARAMETER (PISQ=PI*PI)
+      PARAMETER (AX=-0.738558766382022405884230032680836_q)
 ! test
       PARAMETER (thresh=1.e-10_q)
       PARAMETER (xorder=12._q)
       PARAMETER (zinfinity=2._q)
 ! test
 
-      VCD1=0._q;VCD2=0._q;
-      VCDD1=0._q;VCDD2=0._q;
-      AMUCD1=0._q;AMUCD2=0._q;
-
-      RT=RU+RD
-      YA=DRU**2._q
-      YB=DRD**2._q
-      Y=DRT**2._q
-!    YC IS DEL RU DOT DEL RD
-      YC=(Y-YA-YB)/2._q
-      TAUW=1._q/8._q*(Y/RT)
-      TAU=TAUU+TAUD
+      VXD1=0._q;VXD2=0._q;
+      VXDD1=0._q;VXDD2=0._q;
+      AMUXD1=0._q;AMUXD2=0._q;
 
-!     TAUW=MIN(TAUW,TAU)
 
-      Z=TAUW/TAU
+      CX1=10._q/81._q
+      CX2=146._q/2025._q
+      CX3=73._q/405._q
+      CFE12=SQRT(CFE)
+
+! Suspect that TAUWU and TAUWD are not well described. Use TAUW_TEMP=0.125_q*DRT**2/RT
+! IF WANT TO TEST TAUW, SIMPLY OVERWRITE TAUW_TEMP BY TAUW
+      TAUWU_TEMP=0.125_q*DRU**2._q/RU
+!     TAUWU_TEMP=MIN(TAUWU_TEMP,TAUU)
+      
+      TAUWD_TEMP=0.125_q*DRD**2._q/RD
+!     TAUWD_TEMP=MIN(TAUWD_TEMP,TAUD)
+
+! spin up
+! IN EXD1(2*RU), TAUWU AND TAUU SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
+      RHO=TWO*RU
+      DRHO=TWO*DRU
+      TAUW_RHO=TWO*TAUWU_TEMP
+      TAU_RHO=TWO*TAUU
+
+!----------------------------------------------------------------------
+! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
+      EXUNIF=AX*RHO**THRD
+      EXLDA=EXUNIF*RHO
+      EXDLDA=EXUNIF*THRD4
+
+
+! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
+      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
+      P2=P*P
+      Z=TAUW_RHO/TAU_RHO
 ! test
       !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
 #ifdef Zmethod1
       IF (Z>1) THEN
         DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=1
       ELSE IF(Z<0) THEN
         DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=0
       ELSE
         DZTILDEDZ=1
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
       ENDIF
 #endif
-#ifdef Zmethod2
+#ifdef Zmethod2 
       IF (Z<0) THEN
         DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=0
       ELSE       
         DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=Z/(1._q+Z**xorder)**(1._q/xorder)
       ENDIF
 #endif
 #ifdef Zmethod3
       IF (Z<0) THEN
         DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=0
       ELSE       
         DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
         Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
       ENDIF
 #endif
-! test
+! test      
       Z2=Z*Z
       Z3=Z2*Z
+      ZTF=0.6_q*Z
+      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
+      
+!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
+      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
+      
+      QB_NUM=9._q/20._q*(ALPHA-ONE)
+      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
+      QB=QB_NUM/QB_DEN+ TWO*P/THREE
+      OPZ=ONE+Z2
+      SFP=Z2/OPZ**TWO
+      FQ=SQRT((ZTF**TWO+P2)/TWO)
+      S1=(CX1+CFC*SFP)*P
+      S2=CX2*QB**TWO
+      S3=-CX3*FQ*QB
+      S4=(CX1*P)**TWO/RKAPPA
+      S5=TWO*CFE12*CX1*ZTF**TWO
+      S6=CFE*CFMU*P2*P
+      XN=S1+S2+S3+S4+S5+S6
+      XD=(ONE+CFE12*P)**TWO
+      X=XN/XD
 
-      CALL COE_RPKZB(RU,RD,DRU,DRD,DRT,CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
-
-      CALL CORGGA_REVTPSS(RU,RD,DRU,DRD,DRT,EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
+!    GET THE VALUE FOR FX
+      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
 
-! EPPGGA2_D1, EPPGGA1_D2 EPPGGA1_DD2 AND EPPGGA2_DD1 ARE ZEROS
-      CALL CORGGA_REVTPSS(RU,0._q,DRU,0._q,DRU,EPPGGA1,EPPGGA1_D1,EPPGGA1_D2,EPPGGA1_DD1,EPPGGA1_DD2)
-      EPPGGA1_D2=0._q
-      EPPGGA1_DD2=0._q
+!    NOW, DERIVATIVES COME
+      DPD=-THRD8*P/RHO
+      DPDD=TWO*P/DRHO
+      DPDTAU=0._q
 
-      CALL CORGGA_REVTPSS(RD,0._q,DRD,0._q,DRD,EPPGGA2,EPPGGA2_D2,EPPGGA2_D1,EPPGGA2_DD2,EPPGGA2_DD1)
-      EPPGGA2_D1=0._q
-      EPPGGA2_DD1=0._q
+      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
 
-      IF (EPPGGA1 .LT. EPPGGA)THEN
-          EPPGGA1=EPPGGA
-          EPPGGA1_D1=EPPGGA_D1
-          EPPGGA1_D2=EPPGGA_D2
-          EPPGGA1_DD1=EPPGGA_DD1
-          EPPGGA1_DD2=EPPGGA_DD2
-      ENDIF
+      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
+!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   &  
+!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
 
-      IF (EPPGGA2 .LT. EPPGGA)THEN
-          EPPGGA2=EPPGGA
-          EPPGGA2_D1=EPPGGA_D1
-          EPPGGA2_D2=EPPGGA_D2
-          EPPGGA2_DD1=EPPGGA_DD1
-          EPPGGA2_DD2=EPPGGA_DD2
-      ENDIF
+      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
+!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
 
-      WEIRD=(RU*EPPGGA1+RD*EPPGGA2)/RT
-      WEIRD_D1=RD*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D1-RD*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D1
-      WEIRD_D2=-RU*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D2+RU*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D2
-      WEIRD_DD1=RU/RT*EPPGGA1_DD1+RD/RT*EPPGGA2_DD1
-      WEIRD_DD2=RU/RT*EPPGGA1_DD2+RD/RT*EPPGGA2_DD2
+      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
+!     DALPHADTAU=ONE/TAU_UNIF
 
-      EPSC_REVPKZB=EPPGGA*(ONE+CRPKZB*Z2)-(ONE+CRPKZB)*Z2*WEIRD
+      DQB_NUM_D=9._q/20._q*DALPHAD
+      DQB_NUM_DD=9._q/20._q*DALPHADD
+      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
+      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
+      DQB_DEN_D=C_DQB_DEN*DALPHAD
+      DQB_DEN_DD=C_DQB_DEN*DALPHADD
+      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
 
-      FP_D_EPSC_REVPKZB_D1=(ONE+CRPKZB*Z2)*EPPGGA_D1+EPPGGA*(D_CRPKZB_D1*Z2+TWO*Z*CRPKZB*DZD1)
-      FP_D_EPSC_REVPKZB_D2=(ONE+CRPKZB*Z2)*EPPGGA_D2+EPPGGA*(D_CRPKZB_D2*Z2+TWO*Z*CRPKZB*DZD2)
+      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
+      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
+      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
 
-      SD_D_EPSC_REVPKZB_D1=D_CRPKZB_D1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D1
-      SD_D_EPSC_REVPKZB_D2=D_CRPKZB_D2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D2
+      C1_DS1=TWO*CFC*P*Z*(ONE-Z2)/OPZ**THREE
+      C2_DS1=(CX1+CFC*Z2/OPZ**TWO)
+      DS1D=C1_DS1*DZD+C2_DS1*DPD
+      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
+      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
 
-      D_EPSC_REVPKZB_D1=FP_D_EPSC_REVPKZB_D1-SD_D_EPSC_REVPKZB_D1
-      D_EPSC_REVPKZB_D2=FP_D_EPSC_REVPKZB_D2-SD_D_EPSC_REVPKZB_D2
+      C_DS2=CX2*TWO*QB
+      DS2D=C_DS2*DQBD
+      DS2DD=C_DS2*DQBDD
+      DS2DTAU=C_DS2*DQBDTAU
 
-      FP_D_EPSC_REVPKZB_DD1=(ONE+CRPKZB*Z2)*EPPGGA_DD1+EPPGGA*(D_CRPKZB_DD1*Z2+TWO*Z*CRPKZB*DZDD1)
-      FP_D_EPSC_REVPKZB_DD2=(ONE+CRPKZB*Z2)*EPPGGA_DD2+EPPGGA*(D_CRPKZB_DD2*Z2+TWO*Z*CRPKZB*DZDD2)
-      SD_D_EPSC_REVPKZB_DD1=D_CRPKZB_DD1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD1
-      SD_D_EPSC_REVPKZB_DD2=D_CRPKZB_DD2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD2
+      DFQD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZD+P*DPD)
+      DFQDD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDD+P*DPDD)
+      DFQDTAU=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDTAU+P*DPDTAU)
+      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
+      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
+      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
 
-      D_EPSC_REVPKZB_DD1=FP_D_EPSC_REVPKZB_DD1-SD_D_EPSC_REVPKZB_DD1
-      D_EPSC_REVPKZB_DD2=FP_D_EPSC_REVPKZB_DD2-SD_D_EPSC_REVPKZB_DD2
+      C_S4=TWO/RKAPPA*CX1**TWO*P
+      DS4D=C_S4*DPD
+      DS4DD=C_S4*DPDD
+      DS4DTAU=C_S4*DPDTAU
 
-      D_EPSC_REVPKZB_DTAU=EPPGGA*CRPKZB*TWO*Z*DZDTAU-(ONE+CRPKZB)*TWO*Z*DZDTAU*WEIRD
+      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
+      DS5D=C_S5*DZD
+      DS5DD=C_S5*DZDD
+      DS5DTAU=C_S5*DZDTAU
 
-      VCD1=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D1)*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D1+THREE*Z2*EPSC_REVPKZB*DZD1)
+      C_S6=THREE*CFE*CFMU*P2
+      DS6D=C_S6*DPD
+      DS6DD=C_S6*DPDD
+      DS6DTAU=C_S6*DPDTAU
 
-      VCD2=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D2)*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D2+THREE*Z2*EPSC_REVPKZB*DZD2)
+      C_XD=TWO*(ONE+CFE12*P)*CFE12
+      DXD_D=C_XD*DPD
+      DXD_DD=C_XD*DPDD
+      DXD_DTAU=C_XD*DPDTAU
 
-      VCDD1=RT*D_EPSC_REVPKZB_DD1*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD1+THREE*Z2*EPSC_REVPKZB*DZDD1)
+      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
+      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
+      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
 
-      VCDD2=RT*D_EPSC_REVPKZB_DD2*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD2+THREE*Z2*EPSC_REVPKZB*DZDD2)
+      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
+!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
+      DX_DD=DXN_DD/XD-X*DXD_DD/XD
+      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
 
-      AMUCD1=RT*D_EPSC_REVPKZB_DTAU*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DTAU+THREE*Z2*EPSC_REVPKZB*DZDTAU)
-      AMUCD2=AMUCD1
+      C_FX=ONE/(ONE+X/RKAPPA)**TWO
+      DFX_D=C_FX*DX_D
+      DFX_DD=C_FX*DX_DD
+      DFX_DTAU=C_FX*DX_DTAU
 
-      EC_REVTPSS=RT*EPSC_REVPKZB*(ONE+CFD*EPSC_REVPKZB*Z3)
+!   OUTPUT THE VXD1,VXDD1 AND AMUXD1
+      VXD1=EXDLDA*FX+EXLDA*DFX_D
+      VXDD1=EXLDA*DFX_DD
+      AMUXD1=EXLDA*DFX_DTAU
+      EX_REVTPSS=0._q
+      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+
+! spin down
+! IN EXD1(2*RD), TAUWD AND TAUD SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
+      RHO=TWO*RD
+      DRHO=TWO*DRD
+      TAUW_RHO=TWO*TAUWD_TEMP
+      TAU_RHO=TWO*TAUD
+
+!----------------------------------------------------------------------
+! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
+      EXUNIF=AX*RHO**THRD
+      EXLDA=EXUNIF*RHO
+      EXDLDA=EXUNIF*THRD4
+
+
+! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
+
+      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
+      P2=P*P
+      Z=TAUW_RHO/TAU_RHO
+! test
+      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
+#ifdef Zmethod1
+      IF (Z>1) THEN
+        DZTILDEDZ=0
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+        Z=1
+      ELSE IF(Z<0) THEN
+        DZTILDEDZ=0
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+        Z=0
+      ELSE
+        DZTILDEDZ=1
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+      ENDIF
+#endif
+#ifdef Zmethod2
+      IF (Z<0) THEN
+        DZTILDEDZ=0
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+        Z=0
+      ELSE       
+         DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+         Z=Z/(1._q+Z**xorder)**(1._q/xorder)
+      ENDIF
+#endif
+#ifdef Zmethod3
+      IF (Z<0) THEN
+        DZTILDEDZ=0
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+        Z=0
+      ELSE       
+        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
+        DZD=-Z/RHO*DZTILDEDZ
+        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
+        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
+        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
+      ENDIF
+#endif
+! test     
+      Z2=Z*Z
+      Z3=Z2*Z
+      ZTF=0.6_q*Z
+      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
+
+!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
+      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
+      
+      QB_NUM=9._q/20._q*(ALPHA-ONE)
+      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
+      QB=QB_NUM/QB_DEN+ TWO*P/THREE
+      OPZ=ONE+Z2
+      SFP=Z2/OPZ**TWO
+      FQ=SQRT((ZTF**TWO+P2)/TWO)
+      S1=(CX1+CFC*SFP)*P
+      S2=CX2*QB**TWO
+      S3=-CX3*FQ*QB
+      S4=(CX1*P)**TWO/RKAPPA
+      S5=TWO*CFE12*CX1*ZTF**TWO
+      S6=CFE*CFMU*P2*P
+      XN=S1+S2+S3+S4+S5+S6
+      XD=(ONE+CFE12*P)**TWO
+      X=XN/XD
+
+!    GET THE VALUE FOR FX
+      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
+
+!    NOW, DERIVATIVES COME
+      DPD=-THRD8*P/RHO
+      DPDD=TWO*P/DRHO
+      DPDTAU=0._q
+
+      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
+
+      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
+!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   & 
+!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
+
+      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
+!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
+
+      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
+!     DALPHADTAU=ONE/TAU_UNIF
+
+      DQB_NUM_D=9._q/20._q*DALPHAD
+      DQB_NUM_DD=9._q/20._q*DALPHADD
+      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
+      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
+      DQB_DEN_D=C_DQB_DEN*DALPHAD
+      DQB_DEN_DD=C_DQB_DEN*DALPHADD
+      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
+
+      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
+      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
+      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
+
+      C1_DS1=TWO*CFC*P*Z*(ONE-Z2)/OPZ**THREE
+      C2_DS1=(CX1+CFC*Z2/OPZ**TWO)
+      DS1D=C1_DS1*DZD+C2_DS1*DPD
+      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
+      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
+
+      C_DS2=CX2*TWO*QB
+      DS2D=C_DS2*DQBD
+      DS2DD=C_DS2*DQBDD
+      DS2DTAU=C_DS2*DQBDTAU
+
+      DFQD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZD+P*DPD)
+      DFQDD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDD+P*DPDD)
+      DFQDTAU=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDTAU+P*DPDTAU)
+      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
+      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
+      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
+
+      C_S4=TWO/RKAPPA*CX1**TWO*P
+      DS4D=C_S4*DPD
+      DS4DD=C_S4*DPDD
+      DS4DTAU=C_S4*DPDTAU
+
+      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
+      DS5D=C_S5*DZD
+      DS5DD=C_S5*DZDD
+      DS5DTAU=C_S5*DZDTAU
+
+      C_S6=THREE*CFE*CFMU*P2
+      DS6D=C_S6*DPD
+      DS6DD=C_S6*DPDD
+      DS6DTAU=C_S6*DPDTAU
+
+      C_XD=TWO*(ONE+CFE12*P)*CFE12
+      DXD_D=C_XD*DPD
+      DXD_DD=C_XD*DPDD
+      DXD_DTAU=C_XD*DPDTAU
+
+      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
+      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
+      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
+
+      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
+!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
+      DX_DD=DXN_DD/XD-X*DXD_DD/XD
+      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
+
+      C_FX=ONE/(ONE+X/RKAPPA)**TWO
+      DFX_D=C_FX*DX_D
+      DFX_DD=C_FX*DX_DD
+      DFX_DTAU=C_FX*DX_DTAU
+
+!   OUTPUT THE VXD2,VXDD2 AND AMUXD2
+      VXD2=EXDLDA*FX+EXLDA*DFX_D
+      VXDD2=EXLDA*DFX_DD
+      AMUXD2=EXLDA*DFX_DTAU
+
+      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+      EX_REVTPSS=EX_REVTPSS/TWO
       RETURN
-      END SUBROUTINE VrevTPSSC
+      END SUBROUTINE VTPSSx
 
 
 !***********************************************************************
@@ -1539,15 +1747,17 @@
 ! RU,RD                        density up,down
 ! DRU, DRD                     abs. val. gradient of density up/down
 ! DRT                          abs. val. gradient of total density
-! CRPKZB                       C(ZETA,XI)
-! D_CRPKZB_D1,D_CRPKZB_D2      THE DERIVATIVE OF C(ZETA,XI) WRT n
-! D_CRPKZB_DD1,D_CRPKZB_DD2    THE DERIVATIVE OF C(ZETA,XI) WRT |GRAD n|
+! TAUU,TAUD                    kinetic energy density up/down
+! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
+! VCD1 VCD2                    THE DERIVATIVES OF EC WRT n 
+! VCDD1,VCDD2                  THE DERIVATIVES OF EC WRT |grad n| 
+! AMUCD1, AMUCD2                   THE DERIVATIVES OF EC WRT TAU
 !
 !***********************************************************************
 
-      SUBROUTINE COE_RPKZB(&
-     &   RU,RD,DRU,DRD,DRT, &
-     &   CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
+      SUBROUTINE VTPSSc(&
+     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
+     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
 
       USE prec
       USE constant
@@ -1555,59 +1765,276 @@
 
 ! the following parameters are given by Perdew et.al.
 ! the coefficients for the correlatin part
-      PARAMETER (CF1=0.59_q)
-      PARAMETER (CF2=0.9269_q)
-      PARAMETER (CF3=0.6225_q)
-      PARAMETER (CF4=2.1540_q)
+      PARAMETER (CFD=2.8_q)
 
 ! other parameters
       PARAMETER (ONE=1._q)
       PARAMETER (TWO=2._q)
       PARAMETER (THREE=3._q)
       PARAMETER (FOUR=4._q)
-      PARAMETER (FIVE=5._q)
-      PARAMETER (SIX=6._q)
+      PARAMETER (PISQ=PI*PI)
       PARAMETER (THRD=1._q/3._q)
       PARAMETER (THRD2=2._q*THRD)
       PARAMETER (THRD4=4._q*THRD)
       PARAMETER (THRD5=1._q+THRD2)
       PARAMETER (THRD8=1._q+THRD5)
-      PARAMETER (PISQ=PI*PI)
+! test
+      PARAMETER (thresh=1.e-10_q)
+      PARAMETER (xorder=12._q)
+      PARAMETER (zinfinity=2._q)
+! test
 
-      CRPKZB=0._q
-      D_CRPKZB_D1=0._q;D_CRPKZB_D2=0._q;
-      D_CRPKZB_DD1=0._q;D_CRPKZB_DD2=0._q;
+      VCD1=0._q;VCD2=0._q;
+      VCDD1=0._q;VCDD2=0._q;
+      AMUCD1=0._q;AMUCD2=0._q;
 
       RT=RU+RD
       YA=DRU**2._q
       YB=DRD**2._q
       Y=DRT**2._q
-! YC IS DEL RU DOT DEL RD
+!    YC IS DEL RU DOT DEL RD
       YC=(Y-YA-YB)/2._q
+      TAUW=1._q/8._q*(Y/RT)
+      TAU=TAUU+TAUD
 
-      ZETA=(RU-RD)/RT
-      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
-      ZETA2=ZETA*ZETA
-      OPZETA=ONE/(ONE+ZETA)
-      OMZETA=ONE/(ONE-ZETA)
-      D_ZETA_D1=TWO*RD/RT**TWO
-      D_ZETA_D2=-TWO*RU/RT**TWO
-
-! |GRAD ZETA|, 
-! IN SOME EXTREME CASES, THE TERM (YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)
-! GOES TO NEGATIVE BECAUSE OF THE NUMERICAL PRESICION OF COMPUTERS. SO, WE USE 2/4 AS THE POWER
-! INSTEAD OF 1/2
-     
-      DEL_ZETA=TWO/RT**TWO*((YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)**TWO)**(ONE/FOUR)
-      DEL_ZETA=MAX(DEL_ZETA,1E-10_q)
-      D_DEL_ZETA_D1=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RD+TWO*RU*YB)
-      D_DEL_ZETA_D2=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RU+TWO*RD*YA)
-      D_DEL_ZETA_DD1=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RD**TWO*DRU-TWO*RU*RD*YC/DRU)
-      D_DEL_ZETA_DD2=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RU**TWO*DRD-TWO*RU*RD*YC/DRD)
-
-! XI
-      XIDEN=TWO*(THREE*PISQ*RT)**THRD
-      XI=DEL_ZETA/XIDEN
+      Z=TAUW/TAU
+! test
+      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
+#ifdef Zmethod1
+      IF (Z>1) THEN
+        DZTILDEDZ=0
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=1
+      ELSE IF(Z<0) THEN
+        DZTILDEDZ=0
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=0
+      ELSE
+        DZTILDEDZ=1
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+      ENDIF
+#endif
+#ifdef Zmethod2
+      IF (Z<0) THEN
+        DZTILDEDZ=0
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=0
+      ELSE       
+        DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=Z/(1._q+Z**xorder)**(1._q/xorder)
+      ENDIF
+#endif
+#ifdef Zmethod3
+      IF (Z<0) THEN
+        DZTILDEDZ=0
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=0
+      ELSE       
+        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
+        DZD1=-Z/RT*DZTILDEDZ
+        DZD2=DZD1
+        DYCDD1=YC/DRU
+        DYCDD2=YC/DRD
+        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
+        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
+        DZDTAU=-Z/TAU*DZTILDEDZ
+        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
+      ENDIF
+#endif
+! test
+      Z2=Z*Z
+      Z3=Z2*Z
+
+      CALL COE_RPKZB_TPSS(RU,RD,DRU,DRD,DRT,CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
+
+      CALL CORGGA_TPSS(RU,RD,DRU,DRD,DRT,EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
+
+! EPPGGA2_D1, EPPGGA1_D2 EPPGGA1_DD2 AND EPPGGA2_DD1 ARE ZEROS
+      CALL CORGGA_TPSS(RU,0._q,DRU,0._q,DRU,EPPGGA1,EPPGGA1_D1,EPPGGA1_D2,EPPGGA1_DD1,EPPGGA1_DD2)
+      EPPGGA1_D2=0._q
+      EPPGGA1_DD2=0._q
+
+      CALL CORGGA_TPSS(RD,0._q,DRD,0._q,DRD,EPPGGA2,EPPGGA2_D2,EPPGGA2_D1,EPPGGA2_DD2,EPPGGA2_DD1)
+      EPPGGA2_D1=0._q
+      EPPGGA2_DD1=0._q
+
+      IF (EPPGGA1 .LT. EPPGGA)THEN
+          EPPGGA1=EPPGGA
+          EPPGGA1_D1=EPPGGA_D1
+          EPPGGA1_D2=EPPGGA_D2
+          EPPGGA1_DD1=EPPGGA_DD1
+          EPPGGA1_DD2=EPPGGA_DD2
+      ENDIF
+
+      IF (EPPGGA2 .LT. EPPGGA)THEN
+          EPPGGA2=EPPGGA
+          EPPGGA2_D1=EPPGGA_D1
+          EPPGGA2_D2=EPPGGA_D2
+          EPPGGA2_DD1=EPPGGA_DD1
+          EPPGGA2_DD2=EPPGGA_DD2
+      ENDIF
+
+      WEIRD=(RU*EPPGGA1+RD*EPPGGA2)/RT
+      WEIRD_D1=RD*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D1-RD*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D1
+      WEIRD_D2=-RU*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D2+RU*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D2
+      WEIRD_DD1=RU/RT*EPPGGA1_DD1+RD/RT*EPPGGA2_DD1
+      WEIRD_DD2=RU/RT*EPPGGA1_DD2+RD/RT*EPPGGA2_DD2
+
+      EPSC_REVPKZB=EPPGGA*(ONE+CRPKZB*Z2)-(ONE+CRPKZB)*Z2*WEIRD
+
+      FP_D_EPSC_REVPKZB_D1=(ONE+CRPKZB*Z2)*EPPGGA_D1+EPPGGA*(D_CRPKZB_D1*Z2+TWO*Z*CRPKZB*DZD1)
+      FP_D_EPSC_REVPKZB_D2=(ONE+CRPKZB*Z2)*EPPGGA_D2+EPPGGA*(D_CRPKZB_D2*Z2+TWO*Z*CRPKZB*DZD2)
+
+      SD_D_EPSC_REVPKZB_D1=D_CRPKZB_D1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D1
+      SD_D_EPSC_REVPKZB_D2=D_CRPKZB_D2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D2
+
+      D_EPSC_REVPKZB_D1=FP_D_EPSC_REVPKZB_D1-SD_D_EPSC_REVPKZB_D1
+      D_EPSC_REVPKZB_D2=FP_D_EPSC_REVPKZB_D2-SD_D_EPSC_REVPKZB_D2
+
+      FP_D_EPSC_REVPKZB_DD1=(ONE+CRPKZB*Z2)*EPPGGA_DD1+EPPGGA*(D_CRPKZB_DD1*Z2+TWO*Z*CRPKZB*DZDD1)
+      FP_D_EPSC_REVPKZB_DD2=(ONE+CRPKZB*Z2)*EPPGGA_DD2+EPPGGA*(D_CRPKZB_DD2*Z2+TWO*Z*CRPKZB*DZDD2)
+      SD_D_EPSC_REVPKZB_DD1=D_CRPKZB_DD1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD1
+      SD_D_EPSC_REVPKZB_DD2=D_CRPKZB_DD2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD2
+
+      D_EPSC_REVPKZB_DD1=FP_D_EPSC_REVPKZB_DD1-SD_D_EPSC_REVPKZB_DD1
+      D_EPSC_REVPKZB_DD2=FP_D_EPSC_REVPKZB_DD2-SD_D_EPSC_REVPKZB_DD2
+
+      D_EPSC_REVPKZB_DTAU=EPPGGA*CRPKZB*TWO*Z*DZDTAU-(ONE+CRPKZB)*TWO*Z*DZDTAU*WEIRD
+
+      VCD1=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D1)*(ONE+CFD*EPSC_REVPKZB*Z3) &
+          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D1+THREE*Z2*EPSC_REVPKZB*DZD1)
+
+      VCD2=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D2)*(ONE+CFD*EPSC_REVPKZB*Z3) &
+          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D2+THREE*Z2*EPSC_REVPKZB*DZD2)
+
+      VCDD1=RT*D_EPSC_REVPKZB_DD1*(ONE+CFD*EPSC_REVPKZB*Z3) &
+          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD1+THREE*Z2*EPSC_REVPKZB*DZDD1)
+
+      VCDD2=RT*D_EPSC_REVPKZB_DD2*(ONE+CFD*EPSC_REVPKZB*Z3) &
+          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD2+THREE*Z2*EPSC_REVPKZB*DZDD2)
+
+      AMUCD1=RT*D_EPSC_REVPKZB_DTAU*(ONE+CFD*EPSC_REVPKZB*Z3) &
+          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DTAU+THREE*Z2*EPSC_REVPKZB*DZDTAU)
+      AMUCD2=AMUCD1
+
+      EC_REVTPSS=RT*EPSC_REVPKZB*(ONE+CFD*EPSC_REVPKZB*Z3)
+      RETURN
+      END SUBROUTINE VTPSSc
+
+
+!***********************************************************************
+!
+! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
+!
+! RU,RD                        density up,down
+! DRU, DRD                     abs. val. gradient of density up/down
+! DRT                          abs. val. gradient of total density
+! CRPKZB                       C(ZETA,XI)
+! D_CRPKZB_D1,D_CRPKZB_D2      THE DERIVATIVE OF C(ZETA,XI) WRT n
+! D_CRPKZB_DD1,D_CRPKZB_DD2    THE DERIVATIVE OF C(ZETA,XI) WRT |GRAD n|
+!
+!***********************************************************************
+
+      SUBROUTINE COE_RPKZB_TPSS(&
+     &   RU,RD,DRU,DRD,DRT, &
+     &   CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
+
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
+
+! the following parameters are given by Perdew et.al.
+! the coefficients for the correlatin part
+      PARAMETER (CF1=0.53_q)
+      PARAMETER (CF2=0.87_q)
+      PARAMETER (CF3=0.50_q)
+      PARAMETER (CF4=2.26_q)
+
+! other parameters
+      PARAMETER (ONE=1._q)
+      PARAMETER (TWO=2._q)
+      PARAMETER (THREE=3._q)
+      PARAMETER (FOUR=4._q)
+      PARAMETER (FIVE=5._q)
+      PARAMETER (SIX=6._q)
+      PARAMETER (THRD=1._q/3._q)
+      PARAMETER (THRD2=2._q*THRD)
+      PARAMETER (THRD4=4._q*THRD)
+      PARAMETER (THRD5=1._q+THRD2)
+      PARAMETER (THRD8=1._q+THRD5)
+      PARAMETER (PISQ=PI*PI)
+
+      CRPKZB=0._q
+      D_CRPKZB_D1=0._q;D_CRPKZB_D2=0._q;
+      D_CRPKZB_DD1=0._q;D_CRPKZB_DD2=0._q;
+
+      RT=RU+RD
+      YA=DRU**2._q
+      YB=DRD**2._q
+      Y=DRT**2._q
+! YC IS DEL RU DOT DEL RD
+      YC=(Y-YA-YB)/2._q
+
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
+      ZETA2=ZETA*ZETA
+      OPZETA=ONE/(ONE+ZETA)
+      OMZETA=ONE/(ONE-ZETA)
+      D_ZETA_D1=TWO*RD/RT**TWO
+      D_ZETA_D2=-TWO*RU/RT**TWO
+
+! |GRAD ZETA|, 
+! IN SOME EXTREME CASES, THE TERM (YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)
+! GOES TO NEGATIVE BECAUSE OF THE NUMERICAL PRESICION OF COMPUTERS. SO, WE USE 2/4 AS THE POWER
+! INSTEAD OF 1/2
+     
+      DEL_ZETA=TWO/RT**TWO*((YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)**TWO)**(ONE/FOUR)
+      DEL_ZETA=MAX(DEL_ZETA,1E-10_q)
+      D_DEL_ZETA_D1=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RD+TWO*RU*YB)
+      D_DEL_ZETA_D2=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RU+TWO*RD*YA)
+      D_DEL_ZETA_DD1=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RD**TWO*DRU-TWO*RU*RD*YC/DRU)
+      D_DEL_ZETA_DD2=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RU**TWO*DRD-TWO*RU*RD*YC/DRD)
+
+! XI
+      XIDEN=TWO*(THREE*PISQ*RT)**THRD
+      XI=DEL_ZETA/XIDEN
       D_XI_D1=(D_DEL_ZETA_D1-THRD*DEL_ZETA/RT)/XIDEN
       D_XI_D2=(D_DEL_ZETA_D2-THRD*DEL_ZETA/RT)/XIDEN
       D_XI_DD1=D_DEL_ZETA_DD1/XIDEN
@@ -1640,7 +2067,7 @@
       D_CRPKZB_DD1=-CNUM*D_CDEN_DD1/CDEN**TWO
       D_CRPKZB_DD2=-CNUM*D_CDEN_DD2/CDEN**TWO
       RETURN
-      END SUBROUTINE COE_RPKZB
+      END SUBROUTINE COE_RPKZB_TPSS
 
 
 !***********************************************************************
@@ -1655,7 +2082,7 @@
 ! EPPGGA_DD1,EPPGGA_DD2        THE DERIVATIVE OF EPPGGA WRT |GRAD n|
 !
 !***********************************************************************
-      SUBROUTINE CORGGA_REVTPSS(&
+      SUBROUTINE CORGGA_TPSS(&
      &   RU,RD,DRU,DRD,DRT, &
      &   EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
 
@@ -1732,7 +2159,7 @@
       FK=(3._q*PI*PI)**THRD*DTHRD
       SK = SQRT(4.0_q*FK/PI)
 ! Only the local part (EC,VCUPLDA,VCDNLDA) are used from the following call to CORPBE
-      CALL CORPBE_revtpss(RS,ZETA,EC,VCUPLDA,VCDNLDA,PHI,SK, &
+      CALL CORPBE_tpss(RS,ZETA,EC,VCUPLDA,VCDNLDA,PHI,SK, &
            T,H,DVCUP,DVCDN,ECQ,.FALSE.)
 ! OBTAIN THE CONTRIBUTION FROM LDA PART AND D_EC_DRS AND D_EC_DZETA
 !      EPPGGA=EC
@@ -1748,9 +2175,10 @@
       BETA_DEN=ONE+ BFACTOR*RS
       D_BETA_NUM=AFACTOR
       D_BETA_DEN=BFACTOR
-      BETA = BETA_MB*BETA_NUM/BETA_DEN
-      D_BETA_DRS=BETA_MB*(BETA_DEN*D_BETA_NUM-BETA_NUM*D_BETA_DEN)/BETA_DEN**TWO
-      
+!      BETA = BETA_MB*BETA_NUM/BETA_DEN
+!      D_BETA_DRS=BETA_MB*(BETA_DEN*D_BETA_NUM-BETA_NUM*D_BETA_DEN)/BETA_DEN**TWO
+      BETA=BETA_MB
+      D_BETA_DRS=0._q     
  
       PHI3=PHI**THREE
       PON=-EC/(PHI3*gamma)
@@ -1792,10 +2220,10 @@
       EPPGGA_DD2=D_H_DT*DTDD2
 
       RETURN
-      END SUBROUTINE CORGGA_REVTPSS
+      END SUBROUTINE CORGGA_TPSS
 
 
-      SUBROUTINE GGASPINCOR_revTPSS(D1,D2,DDA,EC)
+      SUBROUTINE GGASPINCOR_TPSS(D1,D2,DDA,EC)
 !     D1   density up
 !     D2   density down
 !     DDA  |gradient of the total density|
@@ -1818,18 +2246,18 @@
                 +exp((2*THRD)*log(1._q-ZETA)))/2._q
       T = DDA/(D*2._q*SK*G)
 
-      CALL CORPBE_revtpss(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
+      CALL CORPBE_tpss(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
            T,EC,ECD1,ECD2,ECQ,.TRUE.)
 
       EC  =(EC  +ECLDA)
       RETURN
-      END SUBROUTINE GGASPINCOR_revTPSS
+      END SUBROUTINE GGASPINCOR_TPSS
 
 
 ! Modified by Adrienn Ruzsinszky
 !######################################################################
 !----------------------------------------------------------------------
-      SUBROUTINE CORPBE_revtpss(RS,ZET,EC,VCUP,VCDN,g,sk, &
+      SUBROUTINE CORPBE_tpss(RS,ZET,EC,VCUP,VCDN,g,sk, &
      &                  T,H,DVCUP,DVCDN,ecdd,lgga)
 !----------------------------------------------------------------------
 !  Official PBE correlation code. K. Burke, May 14, 1996.
@@ -1919,7 +2347,9 @@
 ! G=phi(zeta), given after [a](3)
 ! DELT=bet/gamma
 ! B=A of [a](8)
-      bet = bet_mb*(1._q + 0.1_q*RS)/(1._q + 0.1778_q*RS)
+!  in TPSS beta is rs-independent
+!      bet = bet_mb*(1._q + 0.1_q*RS)/(1._q + 0.1778_q*RS)
+       bet = bet_mb
 
       delt=bet/gamma
       G3 = G**3
@@ -1957,21 +2387,18 @@
       DVCDN = COMM - PREF
       ecdd=0.5_q/(sk*g)*t*ht
       RETURN
-      END SUBROUTINE CORPBE_revtpss
+      END SUBROUTINE CORPBE_tpss
 
 
-!************************ SUBROUTINE VTPSSx ****************************
+!************************ SUBROUTINE M06 family ****************************
 !
-! calculates the first order derivatives of Ex wrt n and |grad(n)|
-! Perdew et. al. PRL (2009)
+! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
+! Zhao & Truhlar TCA (2008)
 !
-! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
+! Written by Yan Zhao 09/22/2011
 !
 ! everything in Hartree units
 !
-! ATTANTION: Every values are passed "as they are", i.e. including
-! possibly unphysical numerical errors (e.g. negative charge densities)
-! values need to be checked accordingly
 !
 ! RU,RD                        density up,down
 ! DRU, DRD                     abs. val. gradient of density up/down
@@ -1984,1501 +2411,401 @@
 !
 !***********************************************************************
 
-      SUBROUTINE VTPSSx(&
+      SUBROUTINE VM06x(&
      &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ex_revTPSS,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2)
+     &   Ex_M06,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2,IJZY)
 
       USE prec
       USE constant
       IMPLICIT REAL(q) (A-H,O-Z)
-
-! the following parameters are given by Perdew et.al.
-! the coefficients for the exchange part
-      PARAMETER (RKAPPA=0.804_q)
-      PARAMETER (CFB=0.40_q)
-      PARAMETER (CFC=1.59096_q)
-      PARAMETER (CFE=1.537_q)
-      PARAMETER (CFMU=0.21951_q)
-
-! other parameters
-      PARAMETER (ONE=1._q)
       PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (THRD=1._q/3._q)
-      PARAMETER (THRD2=2._q*THRD)
-      PARAMETER (THRD4=4._q*THRD)
-      PARAMETER (THRD5=1._q+THRD2)
-      PARAMETER (THRD8=1._q+THRD5)
-      PARAMETER (PISQ=PI*PI)
-      PARAMETER (AX=-0.738558766382022405884230032680836_q)
-! test
-      PARAMETER (thresh=1.e-10_q)
-      PARAMETER (xorder=12._q)
-      PARAMETER (zinfinity=2._q)
-! test
 
+      STAUU = TAUU*TWO
+      STAUD = TAUD*TWO
+      Ex_M06 = 0._q
+      EM6U  = 0._q
+      EVSXU = 0._q
+      EM6D  = 0._q
+      EVSXD = 0._q
       VXD1=0._q;VXD2=0._q;
       VXDD1=0._q;VXDD2=0._q;
       AMUXD1=0._q;AMUXD2=0._q;
+ 
+      CALL M6X(EM6U,RU,DRU,STAUU,EM6D1,EM6DD1,EM6AMUXD1,IJZY)
+      CALL VS98X(EVSXU,RU,DRU,STAUU,VSD1,VSDD1,VSAMUXD1,IJZY+1)
 
+      CALL M6X(EM6D,RD,DRD,STAUD,EM6D2,EM6DD2,EM6AMUXD2,IJZY)
+      CALL VS98X(EVSXD,RD,DRD,STAUD,VSD2,VSDD2,VSAMUXD2,IJZY+1)
+       
+      Ex_M06 = EM6U + EVSXU + EM6D + EVSXD
+      VXD1 = EM6D1 + VSD1
+      VXD2 = EM6D2 + VSD2
+!  EM6DD and VSDD are  DERIVATIVES OF EX WRT |grad n|^2 
+!  so We need to multiply them by 2*|grad n|
+      VXDD1 = (EM6DD1 + VSDD1)*TWO*DRU
+      VXDD2 = (EM6DD2 + VSDD2)*TWO*DRD
+! EM6AMUXD and VSAMUXD are  DERIVATIVES OF EX WRT 2Tau
+! so We need to multiply them by 2
+      AMUXD1 = (EM6AMUXD1 + VSAMUXD1)*TWO
+      AMUXD2 = (EM6AMUXD2 + VSAMUXD2)*TWO
+   
+      RETURN
+      END SUBROUTINE VM06x
 
-      CX1=10._q/81._q
-      CX2=146._q/2025._q
-      CX3=73._q/405._q
-      CFE12=SQRT(CFE)
+!************************ SUBROUTINE M06 family ****************************
+!
+! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
+! Zhao & Truhlar TCA (2008)
+!
+! Written by Yan Zhao 09/22/2011
+!
+! everything in Hartree units
+!
+!
+! R                     density up,down
+! DR                    abs. val. gradient of density up/down
+! TAU                   kinetic energy density up/down
+! M6D                   THE DERIVATIVES OF EX WRT n 
+! M6DD                  THE DERIVATIVES OF EX WRT |grad n| 
+! M6AMUXD               THE DERIVATIVES OF EX WRT TAU
+!
+!***********************************************************************
 
-! Suspect that TAUWU and TAUWD are not well described. Use TAUW_TEMP=0.125_q*DRT**2/RT
-! IF WANT TO TEST TAUW, SIMPLY OVERWRITE TAUW_TEMP BY TAUW
-      TAUWU_TEMP=0.125_q*DRU**2._q/RU
-!     TAUWU_TEMP=MIN(TAUWU_TEMP,TAUU)
-      
-      TAUWD_TEMP=0.125_q*DRD**2._q/RD
-!     TAUWD_TEMP=MIN(TAUWD_TEMP,TAUD)
+      SUBROUTINE M6X(EM6,R,DR,TAU,EM6D,EM6DD,EM6AMUXD,IJZY)
 
-! spin up
-! IN EXD1(2*RU), TAUWU AND TAUU SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
-      RHO=TWO*RU
-      DRHO=TWO*DRU
-      TAUW_RHO=TWO*TAUWU_TEMP
-      TAU_RHO=TWO*TAUU
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
 
-!----------------------------------------------------------------------
-! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
-      EXUNIF=AX*RHO**THRD
-      EXLDA=EXUNIF*RHO
-      EXDLDA=EXUNIF*THRD4
+! the coefficients 
+      PARAMETER (ONE=1._q)
+      PARAMETER (TWO=2._q)
+      PARAMETER (THREE=3._q)
+      PARAMETER (FOUR=4._q)
+      PARAMETER (FIVE=5._q)
+      PARAMETER (SIX=6._q)
+      PARAMETER (SEVEN=7._q)
+      PARAMETER (EIGHT=8._q)
+      PARAMETER (NINE=9._q)
 
+!      PI    = FOUR*ATAN(ONE)
+      F1O3  = ONE / THREE
+      F1O4  = ONE / FOUR
+      F1O8  = ONE / EIGHT
+      F2O3  = TWO / THREE
+      F3O2  = THREE / TWO
+      F4O3  = FOUR / THREE
+      F4O9  = FOUR / NINE
+      F3O5  = THREE / FIVE
+      F5O3  = FIVE / THREE
+      F5O2  = FIVE / TWO
+      F7O3  = SEVEN / THREE
+      F8O27 = EIGHT / ( THREE * NINE )
+      F12   = TWO * SIX
+      F18   = TWO * NINE
+      F10 = TWO*FIVE
+      F11 = 11._q
+      DTol = 1.0e-10_q
+ 
 
-! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
-      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
-      P2=P*P
-      Z=TAUW_RHO/TAU_RHO
-! test
-      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
-#ifdef Zmethod1
-      IF (Z>1) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=1
-      ELSE IF(Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE
-        DZTILDEDZ=1
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-      ENDIF
-#endif
-#ifdef Zmethod2 
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+Z**xorder)**(1._q/xorder)
+!
+!     PBE FUNCTIONAL'S PARAMETERS.
+!
+      C1     = 3.36116e-03_q
+      C2     = 4.49267e-03_q
+!     PARAMETERS FOR M06-L
+      IF (IJZY.EQ.1) THEN
+        AT0=    3.987756e-01_q
+        AT1=    2.548219e-01_q
+        AT2=    3.923994e-01_q
+        AT3=    -2.103655e+00_q
+        AT4=    -6.302147e+00_q
+        AT5=    1.097615e+01_q
+        AT6=    3.097273e+01_q
+        AT7=    -2.318489e+01_q
+        AT8=    -5.673480e+01_q
+        AT9=    2.160364e+01_q
+        AT10=   3.421814e+01_q
+        AT11=   -9.049762e+00_q
+       ELSEIF (IJZY.EQ.2) THEN
+!     PARAMETERS FOR M06-HF
+        AT0=    1.179732e-01_q
+        AT1=    -1.066708e+00_q
+        AT2=    -1.462405e-01_q
+        AT3=    7.481848e+00_q
+        AT4=    3.776679e+00_q
+        AT5=    -4.436118e+01_q
+        AT6=    -1.830962e+01_q
+        AT7=    1.003903e+02_q
+        AT8=    3.864360e+01_q
+        AT9=    -9.806018e+01_q
+        AT10=   -2.557716e+01_q
+        AT11=   3.590404e+01_q
+       ELSEIF (IJZY.EQ.3) THEN
+!     PARAMETERS FOR M06
+        AT0=    5.877943e-01_q
+        AT1=    -1.371776e-01_q
+        AT2=    2.682367e-01_q
+        AT3=    -2.515898e+00_q
+        AT4=    -2.978892e+00_q
+        AT5=    8.710679e+00_q
+        AT6=    1.688195e+01_q
+        AT7=    -4.489724e+00_q
+        AT8=    -3.299983e+01_q
+        AT9=    -1.449050e+01_q
+        AT10=   2.043747e+01_q
+        AT11=   1.256504e+01_q
+       ELSEIF (IJZY.EQ.4) THEN
+!     PARAMETERS FOR M06-2X
+        AT0=    4.600000e-01_q
+        AT1=    -2.206052e-01_q
+        AT2=    -9.431788e-02_q
+        AT3=    2.164494e+00_q
+        AT4=    -2.556466e+00_q
+        AT5=    -1.422133e+01_q
+        AT6=    1.555044e+01_q
+        AT7=    3.598078e+01_q
+        AT8=    -2.722754e+01_q
+        AT9=    -3.924093e+01_q
+        AT10=   1.522808e+01_q
+        AT11=   1.522227e+01_q
       ENDIF
-#endif
-#ifdef Zmethod3
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-! test      
-      Z2=Z*Z
-      Z3=Z2*Z
-      ZTF=0.6_q*Z
-      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
-      
-!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
-      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
-      
-      QB_NUM=9._q/20._q*(ALPHA-ONE)
-      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
-      QB=QB_NUM/QB_DEN+ TWO*P/THREE
-      OPZ=ONE+Z2
-      SFP=Z2/OPZ**TWO
-      FQ=SQRT((ZTF**TWO+P2)/TWO)
-      S1=(CX1+CFC*SFP)*P
-      S2=CX2*QB**TWO
-      S3=-CX3*FQ*QB
-      S4=(CX1*P)**TWO/RKAPPA
-      S5=TWO*CFE12*CX1*ZTF**TWO
-      S6=CFE*CFMU*P2*P
-      XN=S1+S2+S3+S4+S5+S6
-      XD=(ONE+CFE12*P)**TWO
-      X=XN/XD
-
-!    GET THE VALUE FOR FX
-      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
-
-!    NOW, DERIVATIVES COME
-      DPD=-THRD8*P/RHO
-      DPDD=TWO*P/DRHO
-      DPDTAU=0._q
 
-      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
+      
+      IF ((R .GT. DTol) .AND. (Tau .GT. DTol)) THEN
+        Ax = -F3o2*(F4o3*PI)**(-F1o3)
+        RHOO = R
+        RHO43 = RHOO**F4O3  
+        RRHO = ONE/RHOO       ! RECIPROCAL OF RHO
+        RHO13 = RHO43*RRHO
+        RHO53 = RHOO**F5O3
+        TAUN = TAU
+        TAUUEG=F3O5*((SIX*PI*PI)**F2O3)*RHO53
+        TSIG =TAUUEG/TAUN
+	   
+        WSIG =(TSIG-ONE)/(TSIG+ONE)
+        FSIG=(AT0 + WSIG*(AT1 + WSIG*(AT2 + WSIG*(AT3 + WSIG*( &
+     &            AT4 + WSIG*(AT5 + WSIG*(AT6 + WSIG*(AT7 + WSIG*( &
+     &            AT8 + WSIG*(AT9 + WSIG*(AT10+WSIG*AT11)))))))))))
+        Gamma = DR
+        X = GAMMA/RHO43
+        X2 = X*X
+        EN = C1*X2
+        ED = ONE + C2*X2
+        E  = -EN/ED
+        EM6=(AX+E)*FSIG*RHO43
+       
+        DEN   = TWO*C1*X   
+        DED   = TWO*C2*X
+        DE    = -(DEN*ED-EN*DED)/(ED*ED)
+        DFDW=(AT1 + WSIG*(TWO  *AT2 + WSIG*(THREE*AT3 + WSIG*( &
+     &           FOUR *AT4 + WSIG*(FIVE *AT5 + WSIG*(SIX  *AT6 + WSIG*(&
+     &           SEVEN*AT7 + WSIG*(EIGHT*AT8 + WSIG*(NINE *AT9 + WSIG*(&
+     &           F10 *AT10+ WSIG*F11*AT11))))))))))
+         DWDT = TWO/((ONE + TSIG)**2)
+         DTDR = ((SIX*PI*PI)**F2O3)*(RHOO**F2O3)/TAUN
+         DTDTAU = -TAUUEG/TAUN**2
+         DGGADR = F4O3*RHO13*(AX+(E-X*DE))
+         DFDR = DFDW*DWDT*DTDR
+         DFDTAU=DFDW*DWDT*DTDTAU
+         DGGADG =DE/(TWO*GAMMA)
+!       DGGADG =(DE/(TWO*GAMMA)) 
+       
+!        DF/DRHOA
+         EM6D = DGGADR*FSIG + (AX+E)*RHO43*DFDR
+!        DF/DGAMMAAA
+         EM6DD = DGGADG*FSIG
+!        DF/DTAUA
+         EM6AMUXD = RHO43*(AX+E)*DFDTAU
+      ELSE
+         EM6= 0._q
+         EM6D = 0._q
+         EM6DD = 0._q
+         EM6AMUXD = 0._q
+      ENDIF 
+      RETURN
+      END SUBROUTINE M6X
 
-      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
-!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   &  
-!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
+!************************ SUBROUTINE VS98 family ****************************
+!
+! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
+! Zhao & Truhlar TCA (2008)
+!
+! Written by Yan Zhao 09/22/2011
+!
+! everything in Hartree units
+!
+!
+! R                     density up,down
+! DR                    abs. val. gradient of density up/down
+! TAU                   kinetic energy density up/down
+! VSD                   THE DERIVATIVES OF EX WRT n 
+! VSDD                  THE DERIVATIVES OF EX WRT |grad n| 
+! VSAMUXD               THE DERIVATIVES OF EX WRT TAU
+!
+!***********************************************************************
 
-      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
-!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
+      SUBROUTINE VS98X(EVS,R,DR,TAU,VSD,VSDD,VSAMUXD,IJZY)
 
-      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
-!     DALPHADTAU=ONE/TAU_UNIF
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
 
-      DQB_NUM_D=9._q/20._q*DALPHAD
-      DQB_NUM_DD=9._q/20._q*DALPHADD
-      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
-      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
-      DQB_DEN_D=C_DQB_DEN*DALPHAD
-      DQB_DEN_DD=C_DQB_DEN*DALPHADD
-      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
+      REAL(q) KX,NINE
 
-      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
-      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
-      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
+!      PARAMETER( PI = 3.1415926535897932384626433832795_q )
 
-      C1_DS1=TWO*CFC*P*Z*(ONE-Z2)/OPZ**THREE
-      C2_DS1=(CX1+CFC*Z2/OPZ**TWO)
-      DS1D=C1_DS1*DZD+C2_DS1*DPD
-      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
-      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
+      PARAMETER (CF = 9.115599720_q)
+      PARAMETER (AXLSDA = -0.9305257363491_q)
+      PARAMETER (GG  = 0.00186726_q)
+      PARAMETER (ONE=1._q)
+      PARAMETER (TWO=2._q)
+      PARAMETER (THREE=3._q)
+      PARAMETER (FOUR=4._q)
+      PARAMETER (FIVE=5._q)
+      PARAMETER (SIX=6._q)
+      PARAMETER (SEVEN=7._q)
+      PARAMETER (EIGHT=8._q)
+      PARAMETER (NINE=9._q)
+      PARAMETER (F10=10._q)
+      PARAMETER (F11=11._q)
 
-      C_DS2=CX2*TWO*QB
-      DS2D=C_DS2*DQBD
-      DS2DD=C_DS2*DQBDD
-      DS2DTAU=C_DS2*DQBDTAU
+      DTol = 1.0e-10_q
+!      IF ((R .LT. DTol) .OR. (Tau .LT. DTol)) Return
+      F13 = ONE/THREE
+      F43 = FOUR/THREE
+      F53 = FIVE/THREE
+      F83 = EIGHT/THREE
+      F113 = F11/THREE
+      F3O5 = THREE/FIVE
+      F2O3 = TWO/THREE
+      
+      IF (IJZY.EQ.1) THEN
 
-      DFQD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZD+P*DPD)
-      DFQDD=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDD+P*DPDD)
-      DFQDTAU=ONE/TWO/FQ*(0.6_q**TWO*Z*DZDTAU+P*DPDTAU)
-      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
-      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
-      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
+!     PARAMETERS FOR VS98
 
-      C_S4=TWO/RKAPPA*CX1**TWO*P
-      DS4D=C_S4*DPD
-      DS4DD=C_S4*DPDD
-      DS4DTAU=C_S4*DPDTAU
+        R1=  -9.800683E-01_q
+        R2=  -3.556788E-03_q
+        R3=   6.250326E-03_q
+        R4=  -2.354518E-05_q
+        R5=  -1.282732E-04_q
+        R6=   3.574822E-04_q
+      ELSEIF (IJZY.EQ.2) THEN
 
-      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
-      DS5D=C_S5*DZD
-      DS5DD=C_S5*DZDD
-      DS5DTAU=C_S5*DZDTAU
+!     PARAMETERS FOR M06-L
 
-      C_S6=THREE*CFE*CFMU*P2
-      DS6D=C_S6*DPD
-      DS6DD=C_S6*DPDD
-      DS6DTAU=C_S6*DPDTAU
+        R1 =   6.012244E-01_q*AXLSDA
+        R2 =   4.748822E-03_q*AXLSDA
+        R3 =  -8.635108E-03_q*AXLSDA
+        R4 =  -9.308062E-06_q*AXLSDA
+        R5 =   4.482811E-05_q*AXLSDA
+        R6 =   0.000000E+00_q
+      ELSEIF (IJZY.EQ.3) THEN
 
-      C_XD=TWO*(ONE+CFE12*P)*CFE12
-      DXD_D=C_XD*DPD
-      DXD_DD=C_XD*DPDD
-      DXD_DTAU=C_XD*DPDTAU
+!     PARAMETERS FOR M06-HF
 
-      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
-      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
-      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
+        R1 =   -1.179732E-01_q*AXLSDA
+        R2 =   -2.500000E-03_q*AXLSDA
+        R3 =   -1.180065E-02_q*AXLSDA
+        R4 =   0.000000E+00_q
+        R5 =   0.000000E+00_q
+        R6 =   0.000000E+00_q
+      ELSEIF (IJZY.EQ.4) THEN
 
-      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
-!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
-      DX_DD=DXN_DD/XD-X*DXD_DD/XD
-      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
+!     PARAMETERS FOR M06
 
-      C_FX=ONE/(ONE+X/RKAPPA)**TWO
-      DFX_D=C_FX*DX_D
-      DFX_DD=C_FX*DX_DD
-      DFX_DTAU=C_FX*DX_DTAU
+        R1 =   1.422057E-01_q*AXLSDA
+        R2 =   7.370319E-04_q*AXLSDA
+        R3 =   -1.601373E-02_q*AXLSDA
+        R4 =   0.000000E+00_q
+        R5 =   0.000000E+00_q
+        R6 =   0.000000E+00_q
+      ENDIF
 
-!   OUTPUT THE VXD1,VXDD1 AND AMUXD1
-      VXD1=EXDLDA*FX+EXLDA*DFX_D
-      VXDD1=EXLDA*DFX_DD
-      AMUXD1=EXLDA*DFX_DTAU
-      EX_REVTPSS=0._q
-      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+      IF ((R .GT. DTol) .AND. (Tau .GT. DTol)) THEN 
+        RHOO = R
+        RHO43 = RHOO**F43  
+        RRHO = ONE/RHOO       ! RECIPROCAL OF RHO
+        RHO13 = RHO43*RRHO
+        RHO53 = RHOO**F53
+        TAUN =  TAU
+        TAUUEG=F3O5*((SIX*PI*PI)**F2O3)*RHO53
+	TSIG = TAUUEG/TAUN
 
-! spin down
-! IN EXD1(2*RD), TAUWD AND TAUD SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
-      RHO=TWO*RD
-      DRHO=TWO*DRD
-      TAUW_RHO=TWO*TAUWD_TEMP
-      TAU_RHO=TWO*TAUD
-
-!----------------------------------------------------------------------
-! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
-      EXUNIF=AX*RHO**THRD
-      EXLDA=EXUNIF*RHO
-      EXDLDA=EXUNIF*THRD4
-
-
-! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
-
-      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
-      P2=P*P
-      Z=TAUW_RHO/TAU_RHO
-! test
-      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
-#ifdef Zmethod1
-      IF (Z>1) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=1
-      ELSE IF(Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
+        RHO83 = RHO53*RHOO
+        GAMMA = DR*DR
+        X = GAMMA/RHO83
+        DXDR = -F83*X*RRHO
+        DXDG = ONE/RHO83
+        Z = TAUN/RHO53 - CF
+        DZDR = -F53 * TAUN/RHO83
+        DZDT = ONE/RHO53
+        KX = ONE + GG*X + GG*Z
+        XK = X/KX
+        ZK = Z/KX
+        CALL GVT4(GX,DGDX,DGDZ,XK,ZK,KX,GG,R1,R2,R3,R4,R5,R6)
+        EVS =  RHO43*GX
+        VSD =  F43*RHO13*GX + RHO43*(DGDX*DXDR + DGDZ*DZDR)
+        VSDD =  RHO43*(DGDX*DXDG)
+        VSAMUXD =  RHO43*(DGDZ*DZDT)
       ELSE
-        DZTILDEDZ=1
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-      ENDIF
-#endif
-#ifdef Zmethod2
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-         DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-         Z=Z/(1._q+Z**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-#ifdef Zmethod3
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD=-Z/RHO*DZTILDEDZ
-        DZDD=DRHO/(FOUR*RHO*TAU_RHO)*DZTILDEDZ
-        DZDTAU=-Z/TAU_RHO*DZTILDEDZ
-        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
+        EVS = 0._q
+        VSD = 0._q
+        VSDD = 0._q
+        VSAMUXD = 0._q
       ENDIF
-#endif
-! test     
-      Z2=Z*Z
-      Z3=Z2*Z
-      ZTF=0.6_q*Z
-      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
-
-!     ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
-      ALPHA=5._q/3._q*P*(1._q/Z-1._q)
       
-      QB_NUM=9._q/20._q*(ALPHA-ONE)
-      QB_DEN=SQRT(ONE+CFB*ALPHA*(ALPHA-ONE))
-      QB=QB_NUM/QB_DEN+ TWO*P/THREE
-      OPZ=ONE+Z2
-      SFP=Z2/OPZ**TWO
-      FQ=SQRT((ZTF**TWO+P2)/TWO)
-      S1=(CX1+CFC*SFP)*P
-      S2=CX2*QB**TWO
-      S3=-CX3*FQ*QB
-      S4=(CX1*P)**TWO/RKAPPA
-      S5=TWO*CFE12*CX1*ZTF**TWO
-      S6=CFE*CFMU*P2*P
-      XN=S1+S2+S3+S4+S5+S6
-      XD=(ONE+CFE12*P)**TWO
-      X=XN/XD
-
-!    GET THE VALUE FOR FX
-      FX=ONE+RKAPPA-RKAPPA/(ONE+(X/RKAPPA))
-
-!    NOW, DERIVATIVES COME
-      DPD=-THRD8*P/RHO
-      DPDD=TWO*P/DRHO
-      DPDTAU=0._q
-
-      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
-
-      DALPHAD=THRD5*(ONE/Z-ONE)*DPD-THRD5*P*DZD/Z**TWO
-!     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   & 
-!    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
-
-      DALPHADD=THRD5*(ONE/Z-ONE)*DPDD-THRD5*P*DZDD/Z**TWO
-!     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
-
-      DALPHADTAU=-THRD5*P*DZDTAU/Z**TWO
-!     DALPHADTAU=ONE/TAU_UNIF
-
-      DQB_NUM_D=9._q/20._q*DALPHAD
-      DQB_NUM_DD=9._q/20._q*DALPHADD
-      DQB_NUM_DTAU=9._q/20._q*DALPHADTAU
-      C_DQB_DEN=ONE/TWO*CFB*(TWO*ALPHA-ONE)/QB_DEN
-      DQB_DEN_D=C_DQB_DEN*DALPHAD
-      DQB_DEN_DD=C_DQB_DEN*DALPHADD
-      DQB_DEN_DTAU=C_DQB_DEN*DALPHADTAU
-
-      DQBD=(DQB_NUM_D*QB_DEN-QB_NUM*DQB_DEN_D)/QB_DEN**TWO+THRD2*DPD
-      DQBDD=(DQB_NUM_DD*QB_DEN-QB_NUM*DQB_DEN_DD)/QB_DEN**TWO+THRD2*DPDD
-      DQBDTAU=(DQB_NUM_DTAU*QB_DEN-QB_NUM*DQB_DEN_DTAU)/QB_DEN**TWO+THRD2*DPDTAU
-
-      C1_DS1=TWO*CFC*P*Z*(ONE-Z2)/OPZ**THREE
-      C2_DS1=(CX1+CFC*Z2/OPZ**TWO)
-      DS1D=C1_DS1*DZD+C2_DS1*DPD
-      DS1DD=C1_DS1*DZDD+C2_DS1*DPDD
-      DS1DTAU=C1_DS1*DZDTAU+C2_DS1*DPDTAU
-
-      C_DS2=CX2*TWO*QB
-      DS2D=C_DS2*DQBD
-      DS2DD=C_DS2*DQBDD
-      DS2DTAU=C_DS2*DQBDTAU
-
-      DFQD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZD+P*DPD)
-      DFQDD=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDD+P*DPDD)
-      DFQDTAU=ONE/TWO/FQ*(0.6_Q**TWO*Z*DZDTAU+P*DPDTAU)
-      DS3D=-CX3*(FQ*DQBD+QB*DFQD)
-      DS3DD=-CX3*(FQ*DQBDD+QB*DFQDD)
-      DS3DTAU=-CX3*(FQ*DQBDTAU+QB*DFQDTAU)
-
-      C_S4=TWO/RKAPPA*CX1**TWO*P
-      DS4D=C_S4*DPD
-      DS4DD=C_S4*DPDD
-      DS4DTAU=C_S4*DPDTAU
-
-      C_S5=FOUR*CFE12*CX1*0.6_q**TWO*Z
-      DS5D=C_S5*DZD
-      DS5DD=C_S5*DZDD
-      DS5DTAU=C_S5*DZDTAU
-
-      C_S6=THREE*CFE*CFMU*P2
-      DS6D=C_S6*DPD
-      DS6DD=C_S6*DPDD
-      DS6DTAU=C_S6*DPDTAU
+      RETURN 
+      END SUBROUTINE VS98X 
 
-      C_XD=TWO*(ONE+CFE12*P)*CFE12
-      DXD_D=C_XD*DPD
-      DXD_DD=C_XD*DPDD
-      DXD_DTAU=C_XD*DPDTAU
 
-      DXN_D=DS1D+DS2D+DS3D+DS4D+DS5D+DS6D
-      DXN_DD=DS1DD+DS2DD+DS3DD+DS4DD+DS5DD+DS6DD
-      DXN_DTAU=DS1DTAU+DS2DTAU+DS3DTAU+DS4DTAU+DS5DTAU+DS6DTAU
+      SUBROUTINE GVT4(GVT,DG_DX,DG_DZ,XG,ZG,GAMA,CT,A,B,C,D,E,F)
+       USE prec
+       USE constant
+       IMPLICIT REAL(q) (A-H,O-Z)       
+!    SOME WORKING VARIABLES
+       PARAMETER (F1= 1._q)
+       PARAMETER (F2= 2._q)
+       PARAMETER (F3= 3._q)
 
-      DX_D=(XD*DXN_D-XN*DXD_D)/XD**TWO
-!     DX_DD=(XD*DXN_DD-XN*DXD_DD)/XD**TWO
-      DX_DD=DXN_DD/XD-X*DXD_DD/XD
-      DX_DTAU=(XD*DXN_DTAU-XN*DXD_DTAU)/XD**TWO
 
-      C_FX=ONE/(ONE+X/RKAPPA)**TWO
-      DFX_D=C_FX*DX_D
-      DFX_DD=C_FX*DX_DD
-      DFX_DTAU=C_FX*DX_DTAU
+       G=GAMA
+       G2=GAMA*GAMA
 
-!   OUTPUT THE VXD2,VXDD2 AND AMUXD2
-      VXD2=EXDLDA*FX+EXLDA*DFX_D
-      VXDD2=EXLDA*DFX_DD
-      AMUXD2=EXLDA*DFX_DTAU
+       GVT =(A + B*XG + C*ZG + D*XG*XG + E*ZG*XG + F*ZG*ZG)/G
+       DG_DX =(-A*CT+B*(F1-F2*CT*XG)-F2*C*ZG*CT+D*(F2*XG-F3*XG*XG*CT) &
+     &  +E*(ZG -F3*ZG*XG*CT)-F3*F*ZG*ZG*CT )/G2
+       DG_DZ =(-A*CT -F2*B*XG*CT +C*(F1-F2*ZG*CT)-F3*D*XG*XG*CT &
+     &  +E*(XG-F3*XG*ZG*CT)+F*(F2*ZG-F3*ZG*ZG*CT))/G2
 
-      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
-      EX_REVTPSS=EX_REVTPSS/TWO
-      RETURN
-      END SUBROUTINE VTPSSx
+       RETURN
+       END SUBROUTINE GVT4 
 
 
-!***********************************************************************
+!************************ SUBROUTINE M06 family ****************************
+!
+! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
+! Zhao & Truhlar TCA (2008)
+!
+! Written by Yan Zhao 09/22/2011
+!
+! everything in Hartree units
 !
-! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
 !
 ! RU,RD                        density up,down
 ! DRU, DRD                     abs. val. gradient of density up/down
 ! DRT                          abs. val. gradient of total density
 ! TAUU,TAUD                    kinetic energy density up/down
 ! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
-! VCD1 VCD2                    THE DERIVATIVES OF EC WRT n 
-! VCDD1,VCDD2                  THE DERIVATIVES OF EC WRT |grad n| 
-! AMUCD1, AMUCD2                   THE DERIVATIVES OF EC WRT TAU
+! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
+! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
+! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
 !
 !***********************************************************************
 
-      SUBROUTINE VTPSSc(&
+      SUBROUTINE VM06c(&
      &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-
-! the following parameters are given by Perdew et.al.
-! the coefficients for the correlatin part
-      PARAMETER (CFD=2.8_q)
-
-! other parameters
-      PARAMETER (ONE=1._q)
-      PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (PISQ=PI*PI)
-      PARAMETER (THRD=1._q/3._q)
-      PARAMETER (THRD2=2._q*THRD)
-      PARAMETER (THRD4=4._q*THRD)
-      PARAMETER (THRD5=1._q+THRD2)
-      PARAMETER (THRD8=1._q+THRD5)
-! test
-      PARAMETER (thresh=1.e-10_q)
-      PARAMETER (xorder=12._q)
-      PARAMETER (zinfinity=2._q)
-! test
-
-      VCD1=0._q;VCD2=0._q;
-      VCDD1=0._q;VCDD2=0._q;
-      AMUCD1=0._q;AMUCD2=0._q;
-
-      RT=RU+RD
-      YA=DRU**2._q
-      YB=DRD**2._q
-      Y=DRT**2._q
-!    YC IS DEL RU DOT DEL RD
-      YC=(Y-YA-YB)/2._q
-      TAUW=1._q/8._q*(Y/RT)
-      TAU=TAUU+TAUD
-
-      Z=TAUW/TAU
-! test
-      !Z=max(min(Z,0.9999999999999_q),1.E-20_q)
-#ifdef Zmethod1
-      IF (Z>1) THEN
-        DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=1
-      ELSE IF(Z<0) THEN
-        DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=0
-      ELSE
-        DZTILDEDZ=1
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-      ENDIF
-#endif
-#ifdef Zmethod2
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+Z**xorder)**(1._q/xorder) - Z**xorder/(1._q+Z**xorder)**(1._q+1._q/xorder)
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=Z/(1._q+Z**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-#ifdef Zmethod3
-      IF (Z<0) THEN
-        DZTILDEDZ=0
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=0
-      ELSE       
-        DZTILDEDZ=1._q/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder) - (Z/zinfinity)**xorder/(1._q+(Z/zinfinity)**xorder)**(1._q+1._q/xorder)
-        DZD1=-Z/RT*DZTILDEDZ
-        DZD2=DZD1
-        DYCDD1=YC/DRU
-        DYCDD2=YC/DRD
-        DZDD1=ONE/FOUR/(RT*TAU)*(DRU+DYCDD1)*DZTILDEDZ
-        DZDD2=ONE/FOUR/(RT*TAU)*(DRD+DYCDD2)*DZTILDEDZ
-        DZDTAU=-Z/TAU*DZTILDEDZ
-        Z=Z/(1._q+(Z/zinfinity)**xorder)**(1._q/xorder)
-      ENDIF
-#endif
-! test
-      Z2=Z*Z
-      Z3=Z2*Z
-
-      CALL COE_RPKZB_TPSS(RU,RD,DRU,DRD,DRT,CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
-
-      CALL CORGGA_TPSS(RU,RD,DRU,DRD,DRT,EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
-
-! EPPGGA2_D1, EPPGGA1_D2 EPPGGA1_DD2 AND EPPGGA2_DD1 ARE ZEROS
-      CALL CORGGA_TPSS(RU,0._q,DRU,0._q,DRU,EPPGGA1,EPPGGA1_D1,EPPGGA1_D2,EPPGGA1_DD1,EPPGGA1_DD2)
-      EPPGGA1_D2=0._q
-      EPPGGA1_DD2=0._q
-
-      CALL CORGGA_TPSS(RD,0._q,DRD,0._q,DRD,EPPGGA2,EPPGGA2_D2,EPPGGA2_D1,EPPGGA2_DD2,EPPGGA2_DD1)
-      EPPGGA2_D1=0._q
-      EPPGGA2_DD1=0._q
-
-      IF (EPPGGA1 .LT. EPPGGA)THEN
-          EPPGGA1=EPPGGA
-          EPPGGA1_D1=EPPGGA_D1
-          EPPGGA1_D2=EPPGGA_D2
-          EPPGGA1_DD1=EPPGGA_DD1
-          EPPGGA1_DD2=EPPGGA_DD2
-      ENDIF
-
-      IF (EPPGGA2 .LT. EPPGGA)THEN
-          EPPGGA2=EPPGGA
-          EPPGGA2_D1=EPPGGA_D1
-          EPPGGA2_D2=EPPGGA_D2
-          EPPGGA2_DD1=EPPGGA_DD1
-          EPPGGA2_DD2=EPPGGA_DD2
-      ENDIF
-
-      WEIRD=(RU*EPPGGA1+RD*EPPGGA2)/RT
-      WEIRD_D1=RD*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D1-RD*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D1
-      WEIRD_D2=-RU*EPPGGA1/RT**TWO+RU/RT*EPPGGA1_D2+RU*EPPGGA2/RT**TWO+RD/RT*EPPGGA2_D2
-      WEIRD_DD1=RU/RT*EPPGGA1_DD1+RD/RT*EPPGGA2_DD1
-      WEIRD_DD2=RU/RT*EPPGGA1_DD2+RD/RT*EPPGGA2_DD2
-
-      EPSC_REVPKZB=EPPGGA*(ONE+CRPKZB*Z2)-(ONE+CRPKZB)*Z2*WEIRD
-
-      FP_D_EPSC_REVPKZB_D1=(ONE+CRPKZB*Z2)*EPPGGA_D1+EPPGGA*(D_CRPKZB_D1*Z2+TWO*Z*CRPKZB*DZD1)
-      FP_D_EPSC_REVPKZB_D2=(ONE+CRPKZB*Z2)*EPPGGA_D2+EPPGGA*(D_CRPKZB_D2*Z2+TWO*Z*CRPKZB*DZD2)
-
-      SD_D_EPSC_REVPKZB_D1=D_CRPKZB_D1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D1
-      SD_D_EPSC_REVPKZB_D2=D_CRPKZB_D2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_D2
-
-      D_EPSC_REVPKZB_D1=FP_D_EPSC_REVPKZB_D1-SD_D_EPSC_REVPKZB_D1
-      D_EPSC_REVPKZB_D2=FP_D_EPSC_REVPKZB_D2-SD_D_EPSC_REVPKZB_D2
-
-      FP_D_EPSC_REVPKZB_DD1=(ONE+CRPKZB*Z2)*EPPGGA_DD1+EPPGGA*(D_CRPKZB_DD1*Z2+TWO*Z*CRPKZB*DZDD1)
-      FP_D_EPSC_REVPKZB_DD2=(ONE+CRPKZB*Z2)*EPPGGA_DD2+EPPGGA*(D_CRPKZB_DD2*Z2+TWO*Z*CRPKZB*DZDD2)
-      SD_D_EPSC_REVPKZB_DD1=D_CRPKZB_DD1*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD1*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD1
-      SD_D_EPSC_REVPKZB_DD2=D_CRPKZB_DD2*Z2*WEIRD+(ONE+CRPKZB)*TWO*Z*DZDD2*WEIRD+(ONE+CRPKZB)*Z2*WEIRD_DD2
-
-      D_EPSC_REVPKZB_DD1=FP_D_EPSC_REVPKZB_DD1-SD_D_EPSC_REVPKZB_DD1
-      D_EPSC_REVPKZB_DD2=FP_D_EPSC_REVPKZB_DD2-SD_D_EPSC_REVPKZB_DD2
-
-      D_EPSC_REVPKZB_DTAU=EPPGGA*CRPKZB*TWO*Z*DZDTAU-(ONE+CRPKZB)*TWO*Z*DZDTAU*WEIRD
-
-      VCD1=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D1)*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D1+THREE*Z2*EPSC_REVPKZB*DZD1)
-
-      VCD2=(EPSC_REVPKZB+RT*D_EPSC_REVPKZB_D2)*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_D2+THREE*Z2*EPSC_REVPKZB*DZD2)
-
-      VCDD1=RT*D_EPSC_REVPKZB_DD1*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD1+THREE*Z2*EPSC_REVPKZB*DZDD1)
-
-      VCDD2=RT*D_EPSC_REVPKZB_DD2*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DD2+THREE*Z2*EPSC_REVPKZB*DZDD2)
-
-      AMUCD1=RT*D_EPSC_REVPKZB_DTAU*(ONE+CFD*EPSC_REVPKZB*Z3) &
-          & +RT*EPSC_REVPKZB*CFD*(Z3*D_EPSC_REVPKZB_DTAU+THREE*Z2*EPSC_REVPKZB*DZDTAU)
-      AMUCD2=AMUCD1
-
-      EC_REVTPSS=RT*EPSC_REVPKZB*(ONE+CFD*EPSC_REVPKZB*Z3)
-      RETURN
-      END SUBROUTINE VTPSSc
-
-
-!***********************************************************************
-!
-! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
-!
-! RU,RD                        density up,down
-! DRU, DRD                     abs. val. gradient of density up/down
-! DRT                          abs. val. gradient of total density
-! CRPKZB                       C(ZETA,XI)
-! D_CRPKZB_D1,D_CRPKZB_D2      THE DERIVATIVE OF C(ZETA,XI) WRT n
-! D_CRPKZB_DD1,D_CRPKZB_DD2    THE DERIVATIVE OF C(ZETA,XI) WRT |GRAD n|
-!
-!***********************************************************************
-
-      SUBROUTINE COE_RPKZB_TPSS(&
-     &   RU,RD,DRU,DRD,DRT, &
-     &   CRPKZB,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2)
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-
-! the following parameters are given by Perdew et.al.
-! the coefficients for the correlatin part
-      PARAMETER (CF1=0.53_q)
-      PARAMETER (CF2=0.87_q)
-      PARAMETER (CF3=0.50_q)
-      PARAMETER (CF4=2.26_q)
-
-! other parameters
-      PARAMETER (ONE=1._q)
-      PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (FIVE=5._q)
-      PARAMETER (SIX=6._q)
-      PARAMETER (THRD=1._q/3._q)
-      PARAMETER (THRD2=2._q*THRD)
-      PARAMETER (THRD4=4._q*THRD)
-      PARAMETER (THRD5=1._q+THRD2)
-      PARAMETER (THRD8=1._q+THRD5)
-      PARAMETER (PISQ=PI*PI)
-
-      CRPKZB=0._q
-      D_CRPKZB_D1=0._q;D_CRPKZB_D2=0._q;
-      D_CRPKZB_DD1=0._q;D_CRPKZB_DD2=0._q;
-
-      RT=RU+RD
-      YA=DRU**2._q
-      YB=DRD**2._q
-      Y=DRT**2._q
-! YC IS DEL RU DOT DEL RD
-      YC=(Y-YA-YB)/2._q
-
-      ZETA=(RU-RD)/RT
-      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
-      ZETA2=ZETA*ZETA
-      OPZETA=ONE/(ONE+ZETA)
-      OMZETA=ONE/(ONE-ZETA)
-      D_ZETA_D1=TWO*RD/RT**TWO
-      D_ZETA_D2=-TWO*RU/RT**TWO
-
-! |GRAD ZETA|, 
-! IN SOME EXTREME CASES, THE TERM (YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)
-! GOES TO NEGATIVE BECAUSE OF THE NUMERICAL PRESICION OF COMPUTERS. SO, WE USE 2/4 AS THE POWER
-! INSTEAD OF 1/2
-     
-      DEL_ZETA=TWO/RT**TWO*((YA*RD**TWO-TWO*RU*RD*YC+YB*RU**TWO)**TWO)**(ONE/FOUR)
-      DEL_ZETA=MAX(DEL_ZETA,1E-10_q)
-      D_DEL_ZETA_D1=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RD+TWO*RU*YB)
-      D_DEL_ZETA_D2=-TWO*DEL_ZETA/RT+TWO/(RT**FOUR*DEL_ZETA)*(-TWO*YC*RU+TWO*RD*YA)
-      D_DEL_ZETA_DD1=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RD**TWO*DRU-TWO*RU*RD*YC/DRU)
-      D_DEL_ZETA_DD2=TWO/(RT**FOUR*DEL_ZETA)*(TWO*RU**TWO*DRD-TWO*RU*RD*YC/DRD)
-
-! XI
-      XIDEN=TWO*(THREE*PISQ*RT)**THRD
-      XI=DEL_ZETA/XIDEN
-      D_XI_D1=(D_DEL_ZETA_D1-THRD*DEL_ZETA/RT)/XIDEN
-      D_XI_D2=(D_DEL_ZETA_D2-THRD*DEL_ZETA/RT)/XIDEN
-      D_XI_DD1=D_DEL_ZETA_DD1/XIDEN
-      D_XI_DD2=D_DEL_ZETA_DD2/XIDEN
-
-      CNUM=CF1+(CF2+(CF3+CF4*ZETA2)*ZETA2)*ZETA2
-      D_CNUM_D1=D_ZETA_D1*(TWO*CF2+(FOUR*CF3+SIX*CF4*ZETA2)*ZETA2)*ZETA
-      D_CNUM_D2=D_ZETA_D2*(TWO*CF2+(FOUR*CF3+SIX*CF4*ZETA2)*ZETA2)*ZETA
-
-      OPZETA43=OPZETA**THRD4
-      OMZETA43=OMZETA**THRD4
-      CDENL=ONE+XI**TWO*(OPZETA43+OMZETA43)/TWO
-      CDEN=CDENL**FOUR
-      D_CDENL_DXI=XI*(OPZETA43+OMZETA43)
-      D_CDENL_DZETA=-THRD2*XI**TWO*(OPZETA43*OPZETA-OMZETA43*OMZETA)
-      D_CDENL_D1=D_CDENL_DXI*D_XI_D1+D_CDENL_DZETA*D_ZETA_D1
-      D_CDENL_D2=D_CDENL_DXI*D_XI_D2+D_CDENL_DZETA*D_ZETA_D2
-      D_CDENL_DD1=D_CDENL_DXI*D_XI_DD1
-      D_CDENL_DD2=D_CDENL_DXI*D_XI_DD2
-
-      D_CDEN_D1=FOUR*CDENL**THREE*D_CDENL_D1
-      D_CDEN_D2=FOUR*CDENL**THREE*D_CDENL_D2
-      D_CDEN_DD1=FOUR*CDENL**THREE*D_CDENL_DD1
-      D_CDEN_DD2=FOUR*CDENL**THREE*D_CDENL_DD2
-      
-! OUTPUT CRPKZB,,D_CRPKZB_D1,D_CRPKZB_D2,D_CRPKZB_DD1,D_CRPKZB_DD2
-      CRPKZB=CNUM/CDEN
-      D_CRPKZB_D1=(CDEN*D_CNUM_D1-CNUM*D_CDEN_D1)/CDEN**TWO
-      D_CRPKZB_D2=(CDEN*D_CNUM_D2-CNUM*D_CDEN_D2)/CDEN**TWO
-      D_CRPKZB_DD1=-CNUM*D_CDEN_DD1/CDEN**TWO
-      D_CRPKZB_DD2=-CNUM*D_CDEN_DD2/CDEN**TWO
-      RETURN
-      END SUBROUTINE COE_RPKZB_TPSS
-
-
-!***********************************************************************
-!
-! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
-!
-! RU,RD                        density up,down
-! DRU, DRD                     abs. val. gradient of density up/down
-! DRT                          abs. val. gradient of total density
-! EPPGGA                       GGA ENERGY PER PARTICLE
-! EPPGGA_D1,EPPGGA_D2          THE DERIVATIVE OF EPPGGA WRT n
-! EPPGGA_DD1,EPPGGA_DD2        THE DERIVATIVE OF EPPGGA WRT |GRAD n|
-!
-!***********************************************************************
-      SUBROUTINE CORGGA_TPSS(&
-     &   RU,RD,DRU,DRD,DRT, &
-     &   EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
-
-      USE prec
-      USE constant
-
-      IMPLICIT REAL(q) (A-H,O-Z)
-      PARAMETER (ONE=1._q)
-      PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (FIVE=5._q)
-      PARAMETER (SIX=6._q)
-      PARAMETER (THRD=1._q/3._q)
-      PARAMETER (THRD2=2._q*THRD)
-      PARAMETER (THRD4=4._q*THRD)
-      PARAMETER (THRD5=1._q+THRD2)
-      PARAMETER (THRD8=1._q+THRD5)
-      PARAMETER (PISQ=PI*PI)
-  
-      PARAMETER (GAMMA=0.03109069086965489503494086371273_q)
-      PARAMETER (BETA_mb=0.06672455060314922_q)
-
-      EPPGGA  =0._q
-      EPPGGA_D1=0._q
-      EPPGGA_D2=0._q
-      EPPGGA_DD1=0._q
-      EPPGGA_DD2=0._q
-
-      RT=RU+RD
-      YA=DRU**2._q
-      YB=DRD**2._q
-      Y=DRT**2._q
-!     YC IS DEL RU DOT DEL RD
-      YC=(Y-YA-YB)/2._q
-
-      ZETA=(RU-RD)/RT
-      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
-      DZETAD1=TWO*RD/RT**TWO
-      DZETAD2=-TWO*RU/RT**TWO
-
-
-      DTHRD=exp(log(RT)*THRD)
-      RS=(0.75_q/PI)**THRD/DTHRD
-      DRSD1=-THRD/RT*RS
-      DRSD2=-THRD/RT*RS
-
-
-      PHI = (exp((TWO*THRD)*log(1._q+ZETA)) &
-                +exp((TWO*THRD)*log(1._q-ZETA)))/2._q
-      D_PHI_DZETA=THRD*((ONE+ZETA)**(-THRD)-(ONE-ZETA)**(-THRD))
-      D_PHI_D1=D_PHI_DZETA*DZETAD1
-      D_PHI_D2=D_PHI_DZETA*DZETAD2
-
-      AFIX_T=SQRT(PI/FOUR)*(9._q*PI/FOUR)**(ONE/SIX)
-      S=DRT/(TWO*(THREE*PISQ)**THRD*RT**THRD4)
-      DSD1=-THRD4*S/RT
-      DSD2=-THRD4*S/RT
-! |GRAD N|/|GRAD N(UP OR DOWN)|
-      GNGNU=ONE/(TWO*DRT)*(TWO*DRU+TWO*YC/DRU)
-      GNGND=ONE/(TWO*DRT)*(TWO*DRD+TWO*YC/DRD)
-      DSDD1=S/DRT*GNGNU
-      DSDD2=S/DRT*GNGND
-
-      T=AFIX_T*S/SQRT(RS)/PHI
-      T2 = T*T
-      T4 = T2*T2
-
-      DTD1=AFIX_T*(PHI*RS*DSD1-0.5_q*S*PHI*DRSD1-S*RS*D_PHI_D1)/(PHI**TWO*RS**(THREE/TWO))
-      DTD2=AFIX_T*(PHI*RS*DSD2-0.5_q*S*PHI*DRSD2-S*RS*D_PHI_D2)/(PHI**TWO*RS**(THREE/TWO))
-      DTDD1=AFIX_T*DSDD1/(SQRT(RS)*PHI)
-      DTDD2=AFIX_T*DSDD2/(SQRT(RS)*PHI)
-
-      FK=(3._q*PI*PI)**THRD*DTHRD
-      SK = SQRT(4.0_q*FK/PI)
-! Only the local part (EC,VCUPLDA,VCDNLDA) are used from the following call to CORPBE
-      CALL CORPBE_tpss(RS,ZETA,EC,VCUPLDA,VCDNLDA,PHI,SK, &
-           T,H,DVCUP,DVCDN,ECQ,.FALSE.)
-! OBTAIN THE CONTRIBUTION FROM LDA PART AND D_EC_DRS AND D_EC_DZETA
-!      EPPGGA=EC
-!      EPPGGA_D1=(VCUPLDA-EC)/RT
-!      EPPGGA_D2=(VCDNLDA-EC)/RT
-      D_EC_DZETA=(VCUPLDA-VCDNLDA)/TWO
-      D_EC_DRS=(EC-ZETA*D_EC_DZETA-(VCUPLDA+VCDNLDA)/TWO)*THREE/RS
-
-! THE RS DEPENDENCE OF BETA
-      AFACTOR=0.1_q
-      BFACTOR=0.1778_Q
-      BETA_NUM=ONE + AFACTOR*RS
-      BETA_DEN=ONE+ BFACTOR*RS
-      D_BETA_NUM=AFACTOR
-      D_BETA_DEN=BFACTOR
-!      BETA = BETA_MB*BETA_NUM/BETA_DEN
-!      D_BETA_DRS=BETA_MB*(BETA_DEN*D_BETA_NUM-BETA_NUM*D_BETA_DEN)/BETA_DEN**TWO
-      BETA=BETA_MB
-      D_BETA_DRS=0._q     
- 
-      PHI3=PHI**THREE
-      PON=-EC/(PHI3*gamma)
-      W=DEXP(PON)-ONE
-      D_W_DRS=-(W+ONE)*D_EC_DRS/(GAMMA*PHI3)
-      D_W_DZETA=-(W+ONE)/(GAMMA*PHI3)*(D_EC_DZETA-THREE*EC*D_PHI_DZETA/PHI)
-      D_W_DT=0._q
-
-
-      A=BETA/(GAMMA*W)
-      D_A_DRS=(W*D_BETA_DRS-BETA*D_W_DRS)/(GAMMA*W**TWO)
-      D_A_DZETA=-BETA*D_W_DZETA/(GAMMA*W**TWO)
-      D_A_DT=0._q
-
-      V=A*T2
-      D_V_DRS=T2*D_A_DRS
-      D_V_DZETA=T2*D_A_DZETA
-      D_V_DT=T2*D_A_DT+TWO*A*T
-        
-      FUNKG=ONE/(ONE+V+V**TWO)
-      D_FUNKG_DV=-(ONE+TWO*V)*FUNKG**TWO
-      
-      
-      HCORE=ONE+W*(ONE-FUNKG)
-      AH=GAMMA*PHI3
-      H=AH*DLOG(HCORE)
-   
-      DH1=ONE-FUNKG
-      DH2=W*D_FUNKG_DV
-      D_H_DRS=(DH1*D_W_DRS-DH2*D_V_DRS)*AH/HCORE
-      D_H_DZETA=THREE*H*D_PHI_DZETA/PHI+(DH1*D_W_DZETA-DH2*D_V_DZETA)*AH/HCORE
-      D_H_DT=(DH1*D_W_DT-DH2*D_V_DT)*AH/HCORE
-
-! OUTPUT EPPGGA AND ITS DERIVATIVES EPPGGA_D1,EPPGGA_D2, EPPGGA_DD1, EPPGGA_DD2
-      EPPGGA=EC+H
-      EPPGGA_D1=D_EC_DRS*DRSD1+D_EC_DZETA*DZETAD1+D_H_DRS*DRSD1+D_H_DZETA*DZETAD1+D_H_DT*DTD1
-      EPPGGA_D2=D_EC_DRS*DRSD2+D_EC_DZETA*DZETAD2+D_H_DRS*DRSD2+D_H_DZETA*DZETAD2+D_H_DT*DTD2
-      EPPGGA_DD1=D_H_DT*DTDD1
-      EPPGGA_DD2=D_H_DT*DTDD2
-
-      RETURN
-      END SUBROUTINE CORGGA_TPSS
-
-
-      SUBROUTINE GGASPINCOR_TPSS(D1,D2,DDA,EC)
-!     D1   density up
-!     D2   density down
-!     DDA  |gradient of the total density|
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-      PARAMETER (THRD=1._q/3._q)
-
-      D=D1+D2
-      DTHRD=exp(log(D)*THRD)
-      RS=(0.75_q/PI)**THRD/DTHRD
-
-      ZETA=(D1-D2)/D
-      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
-
-      FK=(3._q*PI*PI)**THRD*DTHRD
-      SK = SQRT(4.0_q*FK/PI)
-      G = (exp((2*THRD)*log(1._q+ZETA)) &
-                +exp((2*THRD)*log(1._q-ZETA)))/2._q
-      T = DDA/(D*2._q*SK*G)
-
-      CALL CORPBE_tpss(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
-           T,EC,ECD1,ECD2,ECQ,.TRUE.)
-
-      EC  =(EC  +ECLDA)
-      RETURN
-      END SUBROUTINE GGASPINCOR_TPSS
-
-
-! Modified by Adrienn Ruzsinszky
-!######################################################################
-!----------------------------------------------------------------------
-      SUBROUTINE CORPBE_tpss(RS,ZET,EC,VCUP,VCDN,g,sk, &
-     &                  T,H,DVCUP,DVCDN,ecdd,lgga)
-!----------------------------------------------------------------------
-!  Official PBE correlation code. K. Burke, May 14, 1996.
-!  INPUT: RS=SEITZ RADIUS=(3/4pi rho)^(1/3)
-!       : ZET=RELATIVE SPIN POLARIZATION = (rhoup-rhodn)/rho
-!       : t=ABS(GRAD rho)/(rho*2.*KS*G)  -- only needed for PBE
-!       : lgga=flag to do gga (0=>LSD only)
-!       : lmetagga=flag to do metagga (revTPSS)
-!       : lpot=flag to do potential (0=>energy only)
-!  output: ec=lsd correlation energy from [a]
-!        : vcup=lsd up correlation potential
-!        : vcdn=lsd dn correlation potential
-!        : h=NONLOCAL PART OF CORRELATION ENERGY PER ELECTRON
-!        : dvcup=nonlocal correction to vcup
-!        : dvcdn=nonlocal correction to vcdn
-!----------------------------------------------------------------------
-!----------------------------------------------------------------------
-! References:
-! [a] J.P.~Perdew, K.~Burke, and M.~Ernzerhof, 
-!     {\sl Generalized gradient approximation made simple}, sub.
-!     to Phys. Rev.Lett. May 1996.
-! [b] J. P. Perdew, K. Burke, and Y. Wang, {\sl Real-space cutoff
-!     construction of a generalized gradient approximation:  The PW91
-!     density functional}, submitted to Phys. Rev. B, Feb. 1996.
-! [c] J. P. Perdew and Y. Wang, Phys. Rev. B {\bf 45}, 13244 (1992).
-!----------------------------------------------------------------------
-!----------------------------------------------------------------------
-      USE prec
-      IMPLICIT REAL(q) (A-H,O-Z)
-      logical lgga
-! thrd*=various multiples of 1/3
-! numbers for use in LSD energy spin-interpolation formula, [c](9).
-!      GAM= 2^(4/3)-2
-!      FZZ=f''(0)= 8/(9*GAM)
-! numbers for construction of PBE
-!      gamma=(1-log(2))/pi^2
-!      bet=coefficient in gradient expansion for correlation, [a](4).
-!      eta=small number to stop d phi/ dzeta from blowing up at 
-!          |zeta|=1.      
-      parameter(thrd=1._q/3._q,thrdm=-thrd,thrd2=2._q*thrd)
-      parameter(sixthm=thrdm/2._q)
-      parameter(thrd4=4._q*thrd)
-      parameter(GAM=0.5198420997897463295344212145565_q)
-      parameter(fzz=8._q/(9._q*GAM))
-      parameter(gamma=0.03109069086965489503494086371273_q)
-      parameter(bet_mb=0.06672455060314922_q)
-      parameter(eta=1.e-12_q)
-!----------------------------------------------------------------------
-!----------------------------------------------------------------------
-! find LSD energy contributions, using [c](10) and Table I[c].
-! EU=unpolarized LSD correlation energy
-! EURS=dEU/drs
-! EP=fully polarized LSD correlation energy
-! EPRS=dEP/drs
-! ALFM=-spin stiffness, [c](3).
-! ALFRSM=-dalpha/drs
-! F=spin-scaling factor from [c](9).
-! construct ec, using [c](8)
-      rtrs=dsqrt(rs)
-      CALL gcor2(0.0310907_q,0.21370_q,7.5957_q,3.5876_q,1.6382_q, &
-     &    0.49294_q,rtrs,EU,EURS)
-      CALL gcor2(0.01554535_q,0.20548_q,14.1189_q,6.1977_q,3.3662_q, &
-     &    0.62517_q,rtRS,EP,EPRS)
-      CALL gcor2(0.0168869_q,0.11125_q,10.357_q,3.6231_q,0.88026_q, &
-     &    0.49671_q,rtRS,ALFM,ALFRSM)
-      ALFC = -ALFM
-      Z4 = ZET**4
-      F=((1._q+ZET)**THRD4+(1._q-ZET)**THRD4-2._q)/GAM
-      EC = EU*(1._q-F*Z4)+EP*F*Z4-ALFM*F*(1._q-Z4)/FZZ
-!----------------------------------------------------------------------
-!----------------------------------------------------------------------
-! LSD potential from [c](A1)
-! ECRS = dEc/drs [c](A2)
-! ECZET=dEc/dzeta [c](A3)
-! FZ = dF/dzeta [c](A4)
-      ECRS = EURS*(1._q-F*Z4)+EPRS*F*Z4-ALFRSM*F*(1._q-Z4)/FZZ
-      FZ = THRD4*((1._q+ZET)**THRD-(1._q-ZET)**THRD)/GAM
-      ECZET = 4._q*(ZET**3)*F*(EP-EU+ALFM/FZZ)+FZ*(Z4*EP-Z4*EU &
-     &        -(1._q-Z4)*ALFM/FZZ)
-      COMM = EC -RS*ECRS/3._q-ZET*ECZET
-      VCUP = COMM + ECZET
-      VCDN = COMM - ECZET
-!write(*,*)'rs,VCUP,VCDN',rs,VCUP,VCDN
-      if (.not.lgga) return
-!----------------------------------------------------------------------
-! PBE correlation energy
-! G=phi(zeta), given after [a](3)
-! DELT=bet/gamma
-! B=A of [a](8)
-!  in TPSS beta is rs-independent
-!      bet = bet_mb*(1._q + 0.1_q*RS)/(1._q + 0.1778_q*RS)
-       bet = bet_mb
-
-      delt=bet/gamma
-      G3 = G**3
-      PON=-EC/(G3*gamma)
-      B = DELT/(DEXP(PON)-1._q)
-      B2 = B*B
-      T2 = T*T
-      T4 = T2*T2
-      RS2 = RS*RS
-      RS3 = RS2*RS
-      Q4 = 1._q+B*T2
-      Q5 = 1._q+B*T2+B2*T4
-      H = G3*(BET/DELT)*DLOG(1._q+DELT*Q4*T2/Q5)
-!----------------------------------------------------------------------
-!----------------------------------------------------------------------
-! ENERGY DONE. NOW THE POTENTIAL, using appendix E of [b].
-      G4 = G3*G
-      T6 = T4*T2
-      RSTHRD = RS/3._q
-      GZ=(((1._q+zet)**2+eta)**sixthm- &
-     &((1._q-zet)**2+eta)**sixthm)/3._q
-      FAC = DELT/B+1._q
-      BG = -3._q*B2*EC*FAC/(BET*G4)
-      BEC = B2*FAC/(BET*G3)
-      Q8 = Q5*Q5+DELT*Q4*Q5*T2
-      Q9 = 1._q+2._q*B*T2
-      hB = -BET*G3*B*T6*(2._q+B*T2)/Q8
-      hRS = -RSTHRD*hB*BEC*ECRS
-      hZ = 3._q*GZ*h/G + hB*(BG*GZ+BEC*ECZET)
-      hT = 2._q*BET*G3*Q9/Q8
-      COMM = H+HRS-7.0_q*T2*HT/6._q
-      PREF = HZ-GZ*T2*HT/G
-      COMM = COMM-PREF*ZET
-      DVCUP = COMM + PREF
-      DVCDN = COMM - PREF
-      ecdd=0.5_q/(sk*g)*t*ht
-      RETURN
-      END SUBROUTINE CORPBE_tpss
-
-
-!************************ SUBROUTINE M06 family ****************************
-!
-! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
-! Zhao & Truhlar TCA (2008)
-!
-! Written by Yan Zhao 09/22/2011
-!
-! everything in Hartree units
-!
-!
-! RU,RD                        density up,down
-! DRU, DRD                     abs. val. gradient of density up/down
-! DRT                          abs. val. gradient of total density
-! TAUU,TAUD                    kinetic energy density up/down
-! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
-! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
-! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
-! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
-!
-!***********************************************************************
-
-      SUBROUTINE VM06x(&
-     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ex_M06,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2,IJZY)
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-      PARAMETER (TWO=2._q)
-
-      STAUU = TAUU*TWO
-      STAUD = TAUD*TWO
-      Ex_M06 = 0._q
-      EM6U  = 0._q
-      EVSXU = 0._q
-      EM6D  = 0._q
-      EVSXD = 0._q
-      VXD1=0._q;VXD2=0._q;
-      VXDD1=0._q;VXDD2=0._q;
-      AMUXD1=0._q;AMUXD2=0._q;
- 
-      CALL M6X(EM6U,RU,DRU,STAUU,EM6D1,EM6DD1,EM6AMUXD1,IJZY)
-      CALL VS98X(EVSXU,RU,DRU,STAUU,VSD1,VSDD1,VSAMUXD1,IJZY+1)
-
-      CALL M6X(EM6D,RD,DRD,STAUD,EM6D2,EM6DD2,EM6AMUXD2,IJZY)
-      CALL VS98X(EVSXD,RD,DRD,STAUD,VSD2,VSDD2,VSAMUXD2,IJZY+1)
-       
-      Ex_M06 = EM6U + EVSXU + EM6D + EVSXD
-      VXD1 = EM6D1 + VSD1
-      VXD2 = EM6D2 + VSD2
-!  EM6DD and VSDD are  DERIVATIVES OF EX WRT |grad n|^2 
-!  so We need to multiply them by 2*|grad n|
-      VXDD1 = (EM6DD1 + VSDD1)*TWO*DRU
-      VXDD2 = (EM6DD2 + VSDD2)*TWO*DRD
-! EM6AMUXD and VSAMUXD are  DERIVATIVES OF EX WRT 2Tau
-! so We need to multiply them by 2
-      AMUXD1 = (EM6AMUXD1 + VSAMUXD1)*TWO
-      AMUXD2 = (EM6AMUXD2 + VSAMUXD2)*TWO
-   
-      RETURN
-      END SUBROUTINE VM06x
-
-!************************ SUBROUTINE M06 family ****************************
-!
-! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
-! Zhao & Truhlar TCA (2008)
-!
-! Written by Yan Zhao 09/22/2011
-!
-! everything in Hartree units
-!
-!
-! R                     density up,down
-! DR                    abs. val. gradient of density up/down
-! TAU                   kinetic energy density up/down
-! M6D                   THE DERIVATIVES OF EX WRT n 
-! M6DD                  THE DERIVATIVES OF EX WRT |grad n| 
-! M6AMUXD               THE DERIVATIVES OF EX WRT TAU
-!
-!***********************************************************************
-
-      SUBROUTINE M6X(EM6,R,DR,TAU,EM6D,EM6DD,EM6AMUXD,IJZY)
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-
-! the coefficients 
-      PARAMETER (ONE=1._q)
-      PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (FIVE=5._q)
-      PARAMETER (SIX=6._q)
-      PARAMETER (SEVEN=7._q)
-      PARAMETER (EIGHT=8._q)
-      PARAMETER (NINE=9._q)
-
-!      PI    = FOUR*ATAN(ONE)
-      F1O3  = ONE / THREE
-      F1O4  = ONE / FOUR
-      F1O8  = ONE / EIGHT
-      F2O3  = TWO / THREE
-      F3O2  = THREE / TWO
-      F4O3  = FOUR / THREE
-      F4O9  = FOUR / NINE
-      F3O5  = THREE / FIVE
-      F5O3  = FIVE / THREE
-      F5O2  = FIVE / TWO
-      F7O3  = SEVEN / THREE
-      F8O27 = EIGHT / ( THREE * NINE )
-      F12   = TWO * SIX
-      F18   = TWO * NINE
-      F10 = TWO*FIVE
-      F11 = 11._q
-      DTol = 1.0e-10_q
- 
-
-!
-!     PBE FUNCTIONAL'S PARAMETERS.
-!
-      C1     = 3.36116e-03_q
-      C2     = 4.49267e-03_q
-!     PARAMETERS FOR M06-L
-      IF (IJZY.EQ.1) THEN
-        AT0=    3.987756e-01_q
-        AT1=    2.548219e-01_q
-        AT2=    3.923994e-01_q
-        AT3=    -2.103655e+00_q
-        AT4=    -6.302147e+00_q
-        AT5=    1.097615e+01_q
-        AT6=    3.097273e+01_q
-        AT7=    -2.318489e+01_q
-        AT8=    -5.673480e+01_q
-        AT9=    2.160364e+01_q
-        AT10=   3.421814e+01_q
-        AT11=   -9.049762e+00_q
-       ELSEIF (IJZY.EQ.2) THEN
-!     PARAMETERS FOR M06-HF
-        AT0=    1.179732e-01_q
-        AT1=    -1.066708e+00_q
-        AT2=    -1.462405e-01_q
-        AT3=    7.481848e+00_q
-        AT4=    3.776679e+00_q
-        AT5=    -4.436118e+01_q
-        AT6=    -1.830962e+01_q
-        AT7=    1.003903e+02_q
-        AT8=    3.864360e+01_q
-        AT9=    -9.806018e+01_q
-        AT10=   -2.557716e+01_q
-        AT11=   3.590404e+01_q
-       ELSEIF (IJZY.EQ.3) THEN
-!     PARAMETERS FOR M06
-        AT0=    5.877943e-01_q
-        AT1=    -1.371776e-01_q
-        AT2=    2.682367e-01_q
-        AT3=    -2.515898e+00_q
-        AT4=    -2.978892e+00_q
-        AT5=    8.710679e+00_q
-        AT6=    1.688195e+01_q
-        AT7=    -4.489724e+00_q
-        AT8=    -3.299983e+01_q
-        AT9=    -1.449050e+01_q
-        AT10=   2.043747e+01_q
-        AT11=   1.256504e+01_q
-       ELSEIF (IJZY.EQ.4) THEN
-!     PARAMETERS FOR M06-2X
-        AT0=    4.600000e-01_q
-        AT1=    -2.206052e-01_q
-        AT2=    -9.431788e-02_q
-        AT3=    2.164494e+00_q
-        AT4=    -2.556466e+00_q
-        AT5=    -1.422133e+01_q
-        AT6=    1.555044e+01_q
-        AT7=    3.598078e+01_q
-        AT8=    -2.722754e+01_q
-        AT9=    -3.924093e+01_q
-        AT10=   1.522808e+01_q
-        AT11=   1.522227e+01_q
-      ENDIF
-
-      
-      IF ((R .GT. DTol) .AND. (Tau .GT. DTol)) THEN
-        Ax = -F3o2*(F4o3*PI)**(-F1o3)
-        RHOO = R
-        RHO43 = RHOO**F4O3  
-        RRHO = ONE/RHOO       ! RECIPROCAL OF RHO
-        RHO13 = RHO43*RRHO
-        RHO53 = RHOO**F5O3
-        TAUN = TAU
-        TAUUEG=F3O5*((SIX*PI*PI)**F2O3)*RHO53
-        TSIG =TAUUEG/TAUN
-	   
-        WSIG =(TSIG-ONE)/(TSIG+ONE)
-        FSIG=(AT0 + WSIG*(AT1 + WSIG*(AT2 + WSIG*(AT3 + WSIG*( &
-     &            AT4 + WSIG*(AT5 + WSIG*(AT6 + WSIG*(AT7 + WSIG*( &
-     &            AT8 + WSIG*(AT9 + WSIG*(AT10+WSIG*AT11)))))))))))
-        Gamma = DR
-        X = GAMMA/RHO43
-        X2 = X*X
-        EN = C1*X2
-        ED = ONE + C2*X2
-        E  = -EN/ED
-        EM6=(AX+E)*FSIG*RHO43
-       
-        DEN   = TWO*C1*X   
-        DED   = TWO*C2*X
-        DE    = -(DEN*ED-EN*DED)/(ED*ED)
-        DFDW=(AT1 + WSIG*(TWO  *AT2 + WSIG*(THREE*AT3 + WSIG*( &
-     &           FOUR *AT4 + WSIG*(FIVE *AT5 + WSIG*(SIX  *AT6 + WSIG*(&
-     &           SEVEN*AT7 + WSIG*(EIGHT*AT8 + WSIG*(NINE *AT9 + WSIG*(&
-     &           F10 *AT10+ WSIG*F11*AT11))))))))))
-         DWDT = TWO/((ONE + TSIG)**2)
-         DTDR = ((SIX*PI*PI)**F2O3)*(RHOO**F2O3)/TAUN
-         DTDTAU = -TAUUEG/TAUN**2
-         DGGADR = F4O3*RHO13*(AX+(E-X*DE))
-         DFDR = DFDW*DWDT*DTDR
-         DFDTAU=DFDW*DWDT*DTDTAU
-         DGGADG =DE/(TWO*GAMMA)
-!       DGGADG =(DE/(TWO*GAMMA)) 
-       
-!        DF/DRHOA
-         EM6D = DGGADR*FSIG + (AX+E)*RHO43*DFDR
-!        DF/DGAMMAAA
-         EM6DD = DGGADG*FSIG
-!        DF/DTAUA
-         EM6AMUXD = RHO43*(AX+E)*DFDTAU
-      ELSE
-         EM6= 0._q
-         EM6D = 0._q
-         EM6DD = 0._q
-         EM6AMUXD = 0._q
-      ENDIF 
-      RETURN
-      END SUBROUTINE M6X
-
-!************************ SUBROUTINE VS98 family ****************************
-!
-! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
-! Zhao & Truhlar TCA (2008)
-!
-! Written by Yan Zhao 09/22/2011
-!
-! everything in Hartree units
-!
-!
-! R                     density up,down
-! DR                    abs. val. gradient of density up/down
-! TAU                   kinetic energy density up/down
-! VSD                   THE DERIVATIVES OF EX WRT n 
-! VSDD                  THE DERIVATIVES OF EX WRT |grad n| 
-! VSAMUXD               THE DERIVATIVES OF EX WRT TAU
-!
-!***********************************************************************
-
-      SUBROUTINE VS98X(EVS,R,DR,TAU,VSD,VSDD,VSAMUXD,IJZY)
-
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-
-      REAL(q) KX,NINE
-
-!      PARAMETER( PI = 3.1415926535897932384626433832795_q )
-
-      PARAMETER (CF = 9.115599720_q)
-      PARAMETER (AXLSDA = -0.9305257363491_q)
-      PARAMETER (GG  = 0.00186726_q)
-      PARAMETER (ONE=1._q)
-      PARAMETER (TWO=2._q)
-      PARAMETER (THREE=3._q)
-      PARAMETER (FOUR=4._q)
-      PARAMETER (FIVE=5._q)
-      PARAMETER (SIX=6._q)
-      PARAMETER (SEVEN=7._q)
-      PARAMETER (EIGHT=8._q)
-      PARAMETER (NINE=9._q)
-      PARAMETER (F10=10._q)
-      PARAMETER (F11=11._q)
-
-      DTol = 1.0e-10_q
-!      IF ((R .LT. DTol) .OR. (Tau .LT. DTol)) Return
-      F13 = ONE/THREE
-      F43 = FOUR/THREE
-      F53 = FIVE/THREE
-      F83 = EIGHT/THREE
-      F113 = F11/THREE
-      F3O5 = THREE/FIVE
-      F2O3 = TWO/THREE
-      
-      IF (IJZY.EQ.1) THEN
-
-!     PARAMETERS FOR VS98
-
-        R1=  -9.800683E-01_q
-        R2=  -3.556788E-03_q
-        R3=   6.250326E-03_q
-        R4=  -2.354518E-05_q
-        R5=  -1.282732E-04_q
-        R6=   3.574822E-04_q
-      ELSEIF (IJZY.EQ.2) THEN
-
-!     PARAMETERS FOR M06-L
-
-        R1 =   6.012244E-01_q*AXLSDA
-        R2 =   4.748822E-03_q*AXLSDA
-        R3 =  -8.635108E-03_q*AXLSDA
-        R4 =  -9.308062E-06_q*AXLSDA
-        R5 =   4.482811E-05_q*AXLSDA
-        R6 =   0.000000E+00_q
-      ELSEIF (IJZY.EQ.3) THEN
-
-!     PARAMETERS FOR M06-HF
-
-        R1 =   -1.179732E-01_q*AXLSDA
-        R2 =   -2.500000E-03_q*AXLSDA
-        R3 =   -1.180065E-02_q*AXLSDA
-        R4 =   0.000000E+00_q
-        R5 =   0.000000E+00_q
-        R6 =   0.000000E+00_q
-      ELSEIF (IJZY.EQ.4) THEN
-
-!     PARAMETERS FOR M06
-
-        R1 =   1.422057E-01_q*AXLSDA
-        R2 =   7.370319E-04_q*AXLSDA
-        R3 =   -1.601373E-02_q*AXLSDA
-        R4 =   0.000000E+00_q
-        R5 =   0.000000E+00_q
-        R6 =   0.000000E+00_q
-      ENDIF
-
-      IF ((R .GT. DTol) .AND. (Tau .GT. DTol)) THEN 
-        RHOO = R
-        RHO43 = RHOO**F43  
-        RRHO = ONE/RHOO       ! RECIPROCAL OF RHO
-        RHO13 = RHO43*RRHO
-        RHO53 = RHOO**F53
-        TAUN =  TAU
-        TAUUEG=F3O5*((SIX*PI*PI)**F2O3)*RHO53
-	TSIG = TAUUEG/TAUN
-
-        RHO83 = RHO53*RHOO
-        GAMMA = DR*DR
-        X = GAMMA/RHO83
-        DXDR = -F83*X*RRHO
-        DXDG = ONE/RHO83
-        Z = TAUN/RHO53 - CF
-        DZDR = -F53 * TAUN/RHO83
-        DZDT = ONE/RHO53
-        KX = ONE + GG*X + GG*Z
-        XK = X/KX
-        ZK = Z/KX
-        CALL GVT4(GX,DGDX,DGDZ,XK,ZK,KX,GG,R1,R2,R3,R4,R5,R6)
-        EVS =  RHO43*GX
-        VSD =  F43*RHO13*GX + RHO43*(DGDX*DXDR + DGDZ*DZDR)
-        VSDD =  RHO43*(DGDX*DXDG)
-        VSAMUXD =  RHO43*(DGDZ*DZDT)
-      ELSE
-        EVS = 0._q
-        VSD = 0._q
-        VSDD = 0._q
-        VSAMUXD = 0._q
-      ENDIF
-      
-      RETURN 
-      END SUBROUTINE VS98X 
-
-
-      SUBROUTINE GVT4(GVT,DG_DX,DG_DZ,XG,ZG,GAMA,CT,A,B,C,D,E,F)
-       USE prec
-       USE constant
-       IMPLICIT REAL(q) (A-H,O-Z)       
-!    SOME WORKING VARIABLES
-       PARAMETER (F1= 1._q)
-       PARAMETER (F2= 2._q)
-       PARAMETER (F3= 3._q)
-
-
-       G=GAMA
-       G2=GAMA*GAMA
-
-       GVT =(A + B*XG + C*ZG + D*XG*XG + E*ZG*XG + F*ZG*ZG)/G
-       DG_DX =(-A*CT+B*(F1-F2*CT*XG)-F2*C*ZG*CT+D*(F2*XG-F3*XG*XG*CT) &
-     &  +E*(ZG -F3*ZG*XG*CT)-F3*F*ZG*ZG*CT )/G2
-       DG_DZ =(-A*CT -F2*B*XG*CT +C*(F1-F2*ZG*CT)-F3*D*XG*XG*CT &
-     &  +E*(XG-F3*XG*ZG*CT)+F*(F2*ZG-F3*ZG*ZG*CT))/G2
-
-       RETURN
-       END SUBROUTINE GVT4 
-
-
-!************************ SUBROUTINE M06 family ****************************
-!
-! calculates the first order derivatives of Ex wrt n, tau, and |grad(n)|
-! Zhao & Truhlar TCA (2008)
-!
-! Written by Yan Zhao 09/22/2011
-!
-! everything in Hartree units
-!
-!
-! RU,RD                        density up,down
-! DRU, DRD                     abs. val. gradient of density up/down
-! DRT                          abs. val. gradient of total density
-! TAUU,TAUD                    kinetic energy density up/down
-! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
-! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
-! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
-! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
-!
-!***********************************************************************
-
-      SUBROUTINE VM06c(&
-     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
-     &   Ec_M06,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2,IJZY)
+     &   Ec_M06,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2,IJZY)
 
       USE prec
       USE constant
@@ -4669,24 +3996,223 @@
       END FUNCTION LCALCMU
 
 
-!***********************************************************************
-!
-!***********************************************************************
-      FUNCTION LMIX_TAU()
-      IMPLICIT NONE
-      LOGICAL LMIX_TAU
-      LMIX_TAU=LMIXTAU
-      END FUNCTION LMIX_TAU
+!***********************************************************************
+!
+!***********************************************************************
+      FUNCTION LMIX_TAU()
+      IMPLICIT NONE
+      LOGICAL LMIX_TAU
+      LMIX_TAU=LMIXTAU
+      END FUNCTION LMIX_TAU
+
+
+!******************** SUBROUTINE POTLOK_METAGGA ************************
+!
+!***********************************************************************
+
+      SUBROUTINE POTLOK_METAGGA(&
+     &   KINEDEN, &
+     &   GRID,GRIDC,GRID_SOFT,COMM_INTER,WDES,INFO,P,T_INFO,E,LATT_CUR,  &
+     &   CHDEN,CHTOT,DENCOR,CVTOT,SV,MUTOT,MU,SOFT_TO_C,XCSIF &
+     &   )
+      USE prec
+      USE mpimy
+      USE mgrid
+      USE pseudo
+      USE lattice
+      USE poscar
+      USE setexm
+      USE base
+      USE xcgrad
+      USE wave
+
+      IMPLICIT NONE
+      
+      TYPE (tau_handle)  KINEDEN
+      TYPE (grid_3d)     GRID,GRIDC,GRID_SOFT
+      TYPE (wavedes)     WDES
+      TYPE (transit)     SOFT_TO_C
+      TYPE (info_struct) INFO
+      TYPE (type_info)   T_INFO
+      TYPE (potcar)      P (T_INFO%NTYP)
+      TYPE (energy)      E
+      TYPE (latt)        LATT_CUR
+      TYPE (communic)    COMM_INTER
+            
+      RGRID SV(DIMREAL(GRID%MPLWV),WDES%NCDIJ),DENCOR(GRIDC%RL%NP)
+      COMPLEX(q) CHDEN(GRID_SOFT%MPLWV,WDES%NCDIJ)
+      COMPLEX(q) CHTOT(GRIDC%MPLWV,WDES%NCDIJ),CVTOT(GRIDC%MPLWV,WDES%NCDIJ)
+
+      RGRID , TARGET :: MU(:,:)
+      COMPLEX(q), TARGET :: MUTOT(:,:)
+
+      REAL(q) XCSIF(3,3)      
+
+      ! local variables
+      INTEGER ISP
+      INTEGER MWORK1
+      REAL(q) RINPL
+      REAL(q) EXC,EXCG,XCENCG
+      REAL(q) TMPSIF(3,3)
+      COMPLEX(q) CVZERG
+      RGRID , POINTER :: MU_(:,:)
+      COMPLEX(q), POINTER :: MUTOT_(:,:)
+      ! work arrays (allocated after call to FEXCG)
+      COMPLEX(q), ALLOCATABLE:: CWORK1(:),CWORK(:,:)
+#ifdef noAugXCmeta
+      COMPLEX(q), ALLOCATABLE :: CTMP(:,:)
+#endif
+      ! quick return if possible
+      IF (.NOT.LDO_METAGGA()) RETURN
+#ifdef noAugXCmeta
+      ALLOCATE(CTMP(GRIDC%MPLWV,WDES%NCDIJ))
+#else
+#define CTMP CHTOT
+#endif
+      ! just a failsafe
+      IF (.NOT.ASSOCIATED(KINEDEN%TAU)) THEN
+         WRITE(*,*) 'POTLOK_METAGGA: internal ERROR, KIN_EDEN handle not allocated'
+         STOP
+      ENDIF
+
+      MU_ => MU
+      MUTOT_ => MUTOT
+
+      MWORK1=MAX(GRIDC%MPLWV,GRID_SOFT%MPLWV)
+      ALLOCATE(CWORK1(MWORK1),CWORK(GRIDC%MPLWV,WDES%NCDIJ))
+!-----------------------------------------------------------------------
+!
+!  calculate the exchange correlation potential and the dc. correction
+!
+!-----------------------------------------------------------------------
+
+      EXCG  =0
+      XCENCG=0
+      CVZERG=0
+      TMPSIF=0
+
+      CWORK=0
+
+#ifdef noAugXCmeta
+      ! We will use the soft charge density instead of the augmented one
+      CTMP=0
+      DO ISP=1,WDES%NCDIJ
+         CALL ADD_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CHDEN(1,ISP),CTMP(1,ISP))
+         CALL SETUNB_COMPAT(CTMP(1,ISP),GRIDC)
+      ENDDO
+#endif
+      ! Bring the charge density to real space
+      DO ISP=1,WDES%NCDIJ
+         CALL FFT3D(CTMP(1,ISP),GRIDC,1)
+      ENDDO
+  
+      CALL FEXCGS_METAGGA( &
+     &   WDES%NCDIJ,GRIDC,LATT_CUR,XCENCG,EXCG,CVZERG,TMPSIF, &
+     &   KINEDEN,CTMP,DENCOR,CWORK,MUTOT_)
+       
+      XCSIF=XCSIF+TMPSIF
+      E%EXCG=E%EXCG+EXCG
+      E%XCENC=E%XCENC+XCENCG
+      E%CVZERO=E%CVZERO+CVZERG
+
+#ifndef noAugXCmeta
+      ! Take the charge density back to reciprocal space
+      DO ISP=1,WDES%NCDIJ
+         CALL FFT_RC_SCALE(CTMP(1,ISP),CTMP(1,ISP),GRIDC)
+         CALL SETUNB_COMPAT(CTMP(1,ISP),GRIDC)
+      ENDDO
+#endif
+!-----------------------------------------------------------------------
+! Add CWORK to CVTOT in real space, store the result in CVTOT
+! and take it to reciprocal space
+!-----------------------------------------------------------------------
+#ifdef noAugXCmeta
+      ! Store CVTOT in CTMP
+      CTMP=CVTOT
+#endif
+      RINPL=1._q/GRIDC%NPLWV
+      DO  ISP=1,WDES%NCDIJ 
+         CALL RL_ADD(CVTOT(1,ISP),RINPL,CWORK(1,ISP),RINPL,CVTOT(1,ISP),GRIDC)
+         CALL FFT3D(CVTOT(1,ISP),GRIDC,-1)
+      ENDDO
+!-----------------------------------------------------------------------
+! copy CVTOT to SV and set contribution of unbalanced lattice-vectors
+! to zero, then FFT of SV and CVTOT to real space
+!-----------------------------------------------------------------------
+      DO ISP=1,WDES%NCDIJ
+         CALL SETUNB_COMPAT(CVTOT(1,ISP),GRIDC)
+         CALL CP_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CVTOT(1,ISP),CWORK1)
+         CALL SETUNB(CWORK1,GRID_SOFT)
+         CALL FFT3D(CWORK1,GRID_SOFT, 1)
+         CALL RL_ADD(CWORK1,1.0_q,CWORK1,0.0_q,SV(1,ISP),GRID_SOFT)
+
+    !  final result is only correct for first in-band-group
+    ! (i.e. proc with nodeid 1 in COMM_INTER)
+    !  copy to other in-band-groups using COMM_INTER
+    ! (see SET_RL_GRID() in mgrid.F, and M_divide() in mpi.F)
+#ifdef realmode
+         CALLMPI( M_bcast_d(COMM_INTER, SV(1,ISP), GRID%RL%NP))
+#else
+         CALLMPI( M_bcast_z(COMM_INTER, SV(1,ISP), GRID%RL%NP))
+#endif
+#ifndef noAugXCmeta
+         CALL FFT3D(CVTOT(1,ISP),GRIDC,1)
+#endif
+      ENDDO
+
+#ifdef noAugXCmeta
+      ! Restore CVTOT from CTMP
+      CVTOT=CTMP
+#endif
+      IF (ASSOCIATED(MUTOT_).AND.ASSOCIATED(MU_)) THEN
+!-----------------------------------------------------------------------
+! The same procedure to calculate MU from MUTOT
+!-----------------------------------------------------------------------
+      RINPL=1._q/GRIDC%NPLWV
+      DO  ISP=1,WDES%NCDIJ 
+         CALL RL_ADD(MUTOT_(1,ISP),RINPL,MUTOT_(1,ISP),0._q,MUTOT_(1,ISP),GRIDC)
+         CALL FFT3D(MUTOT_(1,ISP),GRIDC,-1)
+      ENDDO
+!-----------------------------------------------------------------------
+! copy MUTOT_ to MU_ and set contribution of unbalanced lattice-vectors
+! to zero, then FFT of MU_ and MUTOT_ to real space
+!-----------------------------------------------------------------------
+      DO ISP=1,WDES%NCDIJ
+         CALL SETUNB_COMPAT(MUTOT_(1,ISP),GRIDC)
+         CALL CP_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,MUTOT_(1,ISP),CWORK1)
+         CALL SETUNB(CWORK1,GRID_SOFT)
+         CALL FFT3D(CWORK1,GRID_SOFT, 1)
+         CALL RL_ADD(CWORK1,1.0_q,CWORK1,0.0_q,MU_(1,ISP),GRID_SOFT)
+
+    !  final result is only correct for first in-band-group
+    ! (i.e. proc with nodeid 1 in COMM_INTER)
+    !  copy to other in-band-groups using COMM_INTER
+    ! (see SET_RL_GRID() in mgrid.F, and M_divide() in mpi.F)
+#ifdef realmode
+         CALLMPI( M_bcast_d(COMM_INTER, MU_(1,ISP), GRID%RL%NP))
+#else
+         CALLMPI( M_bcast_z(COMM_INTER, MU_(1,ISP), GRID%RL%NP))
+#endif
+         CALL FFT3D(MUTOT_(1,ISP),GRIDC,1)
+      ENDDO
+      ENDIF
+
+      DEALLOCATE(CWORK1,CWORK)
+      NULLIFY(MU_,MUTOT_)
+#ifdef noAugXCmeta
+      DEALLOCATE(CTMP)
+#endif
+      RETURN
+      END SUBROUTINE POTLOK_METAGGA
 
 
-!******************** SUBROUTINE POTLOK_METAGGA ************************
+!******************** SUBROUTINE POTXC_METAGGA *************************
 !
 !***********************************************************************
 
-      SUBROUTINE POTLOK_METAGGA(&
-     &   KINEDEN, &
-     &   GRID,GRIDC,GRID_SOFT,COMM_INTER,WDES,INFO,P,T_INFO,E,LATT_CUR,  &
-     &   CHDEN,CHTOT,DENCOR,CVTOT,SV,MUTOT,MU,SOFT_TO_C,XCSIF &
+      SUBROUTINE POTXC_METAGGA(&
+     &   KINEDEN,GRID,GRIDC,GRID_SOFT,SOFT_TO_C,WDES,LATT_CUR,  &
+     &   CHDEN,CHTOT,DENCOR,CVTOT,MUTOT &
      &   )
       USE prec
       USE mpimy
@@ -4705,33 +4231,21 @@
       TYPE (grid_3d)     GRID,GRIDC,GRID_SOFT
       TYPE (wavedes)     WDES
       TYPE (transit)     SOFT_TO_C
-      TYPE (info_struct) INFO
-      TYPE (type_info)   T_INFO
-      TYPE (potcar)      P (T_INFO%NTYP)
-      TYPE (energy)      E
       TYPE (latt)        LATT_CUR
-      TYPE (communic)    COMM_INTER
             
-      RGRID SV(DIMREAL(GRID%MPLWV),WDES%NCDIJ),DENCOR(GRIDC%RL%NP)
+      RGRID DENCOR(GRIDC%RL%NP)
       COMPLEX(q) CHDEN(GRID_SOFT%MPLWV,WDES%NCDIJ)
       COMPLEX(q) CHTOT(GRIDC%MPLWV,WDES%NCDIJ),CVTOT(GRIDC%MPLWV,WDES%NCDIJ)
 
-      RGRID , TARGET :: MU(:,:)
       COMPLEX(q), TARGET :: MUTOT(:,:)
 
-      REAL(q) XCSIF(3,3)      
-
       ! local variables
       INTEGER ISP
-      INTEGER MWORK1
       REAL(q) RINPL
       REAL(q) EXC,EXCG,XCENCG
       REAL(q) TMPSIF(3,3)
       COMPLEX(q) CVZERG
-      RGRID , POINTER :: MU_(:,:)
       COMPLEX(q), POINTER :: MUTOT_(:,:)
-      ! work arrays (allocated after call to FEXCG)
-      COMPLEX(q), ALLOCATABLE:: CWORK1(:),CWORK(:,:)
 #ifdef noAugXCmeta
       COMPLEX(q), ALLOCATABLE :: CTMP(:,:)
 #endif
@@ -4748,23 +4262,10 @@
          STOP
       ENDIF
 
-      MU_ => MU
       MUTOT_ => MUTOT
 
-      MWORK1=MAX(GRIDC%MPLWV,GRID_SOFT%MPLWV)
-      ALLOCATE(CWORK1(MWORK1),CWORK(GRIDC%MPLWV,WDES%NCDIJ))
-!-----------------------------------------------------------------------
-!
-!  calculate the exchange correlation potential and the dc. correction
-!
-!-----------------------------------------------------------------------
-
-      EXCG  =0
-      XCENCG=0
-      CVZERG=0
-      TMPSIF=0
-
-      CWORK=0
+      CVTOT=0; MUTOT_=0
+      XCENCG=0; EXCG=0; CVZERG=0; TMPSIF=0
 
 #ifdef noAugXCmeta
       ! We will use the soft charge density instead of the augmented one
@@ -4781,13 +4282,8 @@
   
       CALL FEXCGS_METAGGA( &
      &   WDES%NCDIJ,GRIDC,LATT_CUR,XCENCG,EXCG,CVZERG,TMPSIF, &
-     &   KINEDEN,CTMP,DENCOR,CWORK,MUTOT_)
+     &   KINEDEN,CTMP,DENCOR,CVTOT,MUTOT_)
        
-      XCSIF=XCSIF+TMPSIF
-      E%EXCG=E%EXCG+EXCG
-      E%XCENC=E%XCENC+XCENCG
-      E%CVZERO=E%CVZERO+CVZERG
-
 #ifndef noAugXCmeta
       ! Take the charge density back to reciprocal space
       DO ISP=1,WDES%NCDIJ
@@ -4799,3900 +4295,4568 @@
 ! Add CWORK to CVTOT in real space, store the result in CVTOT
 ! and take it to reciprocal space
 !-----------------------------------------------------------------------
-#ifdef noAugXCmeta
-      ! Store CVTOT in CTMP
-      CTMP=CVTOT
-#endif
       RINPL=1._q/GRIDC%NPLWV
       DO  ISP=1,WDES%NCDIJ 
-         CALL RL_ADD(CVTOT(1,ISP),RINPL,CWORK(1,ISP),RINPL,CVTOT(1,ISP),GRIDC)
+         CALL RL_ADD(CVTOT(1,ISP),RINPL,CVTOT(1,ISP),0._q,CVTOT(1,ISP),GRIDC)
          CALL FFT3D(CVTOT(1,ISP),GRIDC,-1)
+         CALL SETUNB_COMPAT(CVTOT(1,ISP),GRIDC)         
       ENDDO
+     ! Flip CVTOT from (up,down) to (total,magnetization) storage mode
+     ! This is done because the routine FORTAU needs the "total" component
+     CALL RC_FLIP_POTENTIAL(CVTOT,GRIDC,WDES%NCDIJ,.FALSE.)
+
+      IF (ASSOCIATED(MUTOT_)) THEN
 !-----------------------------------------------------------------------
-! copy CVTOT to SV and set contribution of unbalanced lattice-vectors
-! to zero, then FFT of SV and CVTOT to real space
+! The same procedure with MUTOT
 !-----------------------------------------------------------------------
-      DO ISP=1,WDES%NCDIJ
-         CALL SETUNB_COMPAT(CVTOT(1,ISP),GRIDC)
-         CALL CP_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CVTOT(1,ISP),CWORK1)
-         CALL SETUNB(CWORK1,GRID_SOFT)
-         CALL FFT3D(CWORK1,GRID_SOFT, 1)
-         CALL RL_ADD(CWORK1,1.0_q,CWORK1,0.0_q,SV(1,ISP),GRID_SOFT)
+      RINPL=1._q/GRIDC%NPLWV
+      DO  ISP=1,WDES%NCDIJ 
+         CALL RL_ADD(MUTOT_(1,ISP),RINPL,MUTOT_(1,ISP),0._q,MUTOT_(1,ISP),GRIDC)
+         CALL FFT3D(MUTOT_(1,ISP),GRIDC,-1)
+         CALL SETUNB_COMPAT(MUTOT_(1,ISP),GRIDC)         
+      ENDDO
+      ! Flip MUTOT from (up,down) to (total,magnetization) storage mode
+      ! This is done because the routine FORTAU needs the "total" component 
+      CALL RC_FLIP_POTENTIAL(MUTOT_,GRIDC,WDES%NCDIJ,.FALSE.)
+      ENDIF
 
-    !  final result is only correct for first in-band-group
-    ! (i.e. proc with nodeid 1 in COMM_INTER)
-    !  copy to other in-band-groups using COMM_INTER
-    ! (see SET_RL_GRID() in mgrid.F, and M_divide() in mpi.F)
-#ifdef realmode
-         CALLMPI( M_bcast_d(COMM_INTER, SV(1,ISP), GRID%RL%NP))
-#else
-         CALLMPI( M_bcast_z(COMM_INTER, SV(1,ISP), GRID%RL%NP))
-#endif
-#ifndef noAugXCmeta
-         CALL FFT3D(CVTOT(1,ISP),GRIDC,1)
+      NULLIFY(MUTOT_)
+#ifdef noAugXCmeta
+      DEALLOCATE(CTMP)
 #endif
-      ENDDO
+      RETURN
+      END SUBROUTINE POTXC_METAGGA
+
+
+!******************** SUBROUTINE FEXCGS_METAGGA ************************
+!
+!***********************************************************************
+
+      SUBROUTINE FEXCGS_METAGGA(&
+     &   NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+     &   KINEDEN,CHTOT,DENCOR,CWORK,MUTOT &
+     &)
+      USE prec
+      USE lattice
+      USE mpimy
+      USE mgrid
+      USE setexm
+
+      IMPLICIT COMPLEX(q) (C)
+      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+
+      TYPE (grid_3d)     GRIDC
+      TYPE (latt)        LATT_CUR
+      TYPE (tau_handle)  KINEDEN
+
+      RGRID DENCOR(GRIDC%RL%NP)
+      COMPLEX(q) CHTOT(GRIDC%MPLWV,NCDIJ),CWORK(GRIDC%MPLWV,NCDIJ)
+      DIMENSION XCSIF(3,3)
+      COMPLEX(q), POINTER :: MUTOT(:,:)
+      ! work arrays
+      COMPLEX(q),ALLOCATABLE :: CWGRAD(:,:)
+      REAL(q), ALLOCATABLE   :: DWORKG(:,:),DWORK1(:,:),DWORK2(:,:),DWORK3(:,:),DVC(:)
+
+      REAL(q) LAPLUP,LAPLDW
+      
+      NP1=GRIDC%RL%NP
+      
+      IF (NCDIJ==1.OR.NCDIJ==2) THEN
+      ! (Non)spinpolarized
+         ALLOCATE(CWGRAD(GRIDC%MPLWV,NCDIJ), DWORKG(NP1,NCDIJ), &
+           DWORK1(NP1,NCDIJ),DWORK2(NP1,NCDIJ),DWORK3(NP1,NCDIJ),DVC(NP1))
+
+         ! Flip CHTOT from (rho,mag) to (rho_up,rho_down)
+         CALL RL_FLIP(CHTOT,GRIDC,NCDIJ,.TRUE.)
+
+         CALL FEXCGS_METAGGA_(LCALCPOT(),LCALCMU(), &
+        &            NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+        &            CWGRAD,CHTOT,CWORK,KINEDEN%TAU,CWGRAD,CHTOT,CWORK,KINEDEN%TAU, &
+        &            DENCOR,KINEDEN%TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,MUTOT)
+         ! Flip CHTOT back to (rho,mag)
+         CALL RL_FLIP(CHTOT,GRIDC,NCDIJ,.FALSE.)
+         DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)               
+      ELSEIF (NCDIJ==4) THEN
+      ! Non-collinear magnetism: gradient corrections in the
+      ! noncollinear case are calculated a bit differently than in the collinear case
+         ALLOCATE(CWGRAD(GRIDC%MPLWV,NCDIJ), DWORKG(NP1,NCDIJ/2), &
+           DWORK1(NP1,NCDIJ),DWORK2(NP1,NCDIJ),DWORK3(NP1,NCDIJ),DVC(NP1))
+
+         ! CHTOT and KINEDEN should be in (rho,mag) representation
+         CALL FEXCGS_METAGGA_NONCOL(LCALCPOT(),LCALCMU(), &
+        &            NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+        &            CWGRAD,CHTOT,CWORK,KINEDEN%TAU,CWGRAD,CHTOT,CWORK,KINEDEN%TAU, &
+        &            DENCOR,KINEDEN%TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,MUTOT)
+
+         IF (ASSOCIATED(MUTOT).AND.LCALCMU()) THEN
+! mM: just until all is done
+!           WRITE(*,*) 'non-collinear mode for revTPSS not yet fully implemented, sorry ...'
+!           STOP
+! mM
+            ! MUTOT and CWORK come out as two component (up,down) quantities, where
+            ! "up" and "down" are taken w.r.t. the local magnetization direction,
+            ! this is now cast into (rho, mag) form.
+            CALL MAG_DIRECTION_KINDENS(CHTOT(1,1), KINEDEN%TAU(1,1), MUTOT(1,1), CWORK(1,1), GRIDC, NCDIJ, LATT_CUR)
+            ! and rearranged from (rho,mag) to spinor representation 
+            CALL POT_FLIP_RL(MUTOT(1,1), GRIDC, NCDIJ)    
+         ELSE
+            ! CWORK(potential) comes out with (spin up and down) representation
+            ! It needs to flip to (total, mag) representation
+            CALL MAG_DIRECTION(CHTOT(1,1), CWORK(1,1), GRIDC, NCDIJ)
+         ENDIF
+         ! rearrange the potential in (spinor) representation 
+         CALL POT_FLIP_RL(CWORK(1,1), GRIDC, NCDIJ)
+         DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)         
+      ENDIF
+
+      RETURN
+      END SUBROUTINE FEXCGS_METAGGA
+
+
+!******************** SUBROUTINE SET_PAW_METAGGA ***********************
+!
+!***********************************************************************
+      SUBROUTINE SET_PAW_METAGGA(P)
+      USE prec
+      USE pseudo
+      USE radial
+      USE constant
+      IMPLICIT NONE
+      TYPE (potcar), POINTER :: P
+      ! local variables
+      INTEGER I,NMIN,NMAX
+      REAL(q) SCALE
+      REAL(q) RHO(P%R%NMAX),DRHO(P%R%NMAX)
+
+      SCALE=1/(2*SQRT(PI)) ! Y00
+
+      NMAX=P%R%NMAX
+
+!     NMIN=NMAX
+!     DO I=1,P%LMAX
+!        NMIN=MIN(NMIN,IR_MATCH(P,I))
+!     ENDDO
+      NMIN=IR_PSMAX(P)
 
-#ifdef noAugXCmeta
-      ! Restore CVTOT from CTMP
-      CVTOT=CTMP
-#endif
-      IF (ASSOCIATED(MUTOT_).AND.ASSOCIATED(MU_)) THEN
-!-----------------------------------------------------------------------
-! The same procedure to calculate MU from MUTOT
-!-----------------------------------------------------------------------
-      RINPL=1._q/GRIDC%NPLWV
-      DO  ISP=1,WDES%NCDIJ 
-         CALL RL_ADD(MUTOT_(1,ISP),RINPL,MUTOT_(1,ISP),0._q,MUTOT_(1,ISP),GRIDC)
-         CALL FFT3D(MUTOT_(1,ISP),GRIDC,-1)
-      ENDDO
-!-----------------------------------------------------------------------
-! copy MUTOT_ to MU_ and set contribution of unbalanced lattice-vectors
-! to zero, then FFT of MU_ and MUTOT_ to real space
-!-----------------------------------------------------------------------
-      DO ISP=1,WDES%NCDIJ
-         CALL SETUNB_COMPAT(MUTOT_(1,ISP),GRIDC)
-         CALL CP_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,MUTOT_(1,ISP),CWORK1)
-         CALL SETUNB(CWORK1,GRID_SOFT)
-         CALL FFT3D(CWORK1,GRID_SOFT, 1)
-         CALL RL_ADD(CWORK1,1.0_q,CWORK1,0.0_q,MU_(1,ISP),GRID_SOFT)
+      RHO(:)=SCALE*P%RHOAE(:)/(P%R%R(:)*P%R%R(:))
 
-    !  final result is only correct for first in-band-group
-    ! (i.e. proc with nodeid 1 in COMM_INTER)
-    !  copy to other in-band-groups using COMM_INTER
-    ! (see SET_RL_GRID() in mgrid.F, and M_divide() in mpi.F)
-#ifdef realmode
-         CALLMPI( M_bcast_d(COMM_INTER, MU_(1,ISP), GRID%RL%NP))
-#else
-         CALLMPI( M_bcast_z(COMM_INTER, MU_(1,ISP), GRID%RL%NP))
-#endif
-         CALL FFT3D(MUTOT_(1,ISP),GRIDC,1)
+      CALL GRAD(P%R,RHO,DRHO)
+      DRHO=ABS(DRHO)
+      DO I=1,NMAX
+         IF ((DRHO(I)*DRHO(I)/RHO(I)/8._q*2._q*HSQDTM) > (P%TAUAE(I)*SCALE/(P%R%R(I)*P%R%R(I))) ) &
+        &   P%TAUAE(I)=(DRHO(I)*DRHO(I)/RHO(I)/8._q*2._q*HSQDTM)/SCALE*(P%R%R(I)*P%R%R(I)) !*1.00001
       ENDDO
-      ENDIF
 
-      DEALLOCATE(CWORK1,CWORK)
-      NULLIFY(MU_,MUTOT_)
-#ifdef noAugXCmeta
-      DEALLOCATE(CTMP)
-#endif
+!     P%TAUAE(NMIN:NMAX)=0
+      P%RHOAE(NMIN:NMAX)=P%RHOPS(NMIN:NMAX)
+
       RETURN
-      END SUBROUTINE POTLOK_METAGGA
+      END SUBROUTINE SET_PAW_METAGGA
 
 
-!******************** SUBROUTINE POTXC_METAGGA *************************
+!******************** SUBROUTINE SET_KINEDEN ***************************
+!
+! SET_KINEDEN calculates the kinetic energy density of the PW part of
+! the wavefunctions (0.5*|grad psi|**2)  and the Weizsaecker kinetic
+! energy density.
+!
+! The actual work is done in TAU_PW_DIRECT
 !
 !***********************************************************************
 
-      SUBROUTINE POTXC_METAGGA(&
-     &   KINEDEN,GRID,GRIDC,GRID_SOFT,SOFT_TO_C,WDES,LATT_CUR,  &
-     &   CHDEN,CHTOT,DENCOR,CVTOT,MUTOT &
-     &   )
+      SUBROUTINE SET_KINEDEN(&
+     &   GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND,W,WDES,KINEDEN &
+     &)
       USE prec
-      USE mpimy
-      USE mgrid
-      USE pseudo
       USE lattice
-      USE poscar
-      USE setexm
+      USE mgrid
+      USE msymmetry
       USE base
-      USE xcgrad
       USE wave
-
-      IMPLICIT NONE
+      USE mpimy
       
-      TYPE (tau_handle)  KINEDEN
-      TYPE (grid_3d)     GRID,GRIDC,GRID_SOFT
-      TYPE (wavedes)     WDES
-      TYPE (transit)     SOFT_TO_C
-      TYPE (latt)        LATT_CUR
-            
-      RGRID DENCOR(GRIDC%RL%NP)
-      COMPLEX(q) CHDEN(GRID_SOFT%MPLWV,WDES%NCDIJ)
-      COMPLEX(q) CHTOT(GRIDC%MPLWV,WDES%NCDIJ),CVTOT(GRIDC%MPLWV,WDES%NCDIJ)
+      IMPLICIT NONE
 
-      COMPLEX(q), TARGET :: MUTOT(:,:)
+      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
+      TYPE (latt)        LATT_CUR
+      TYPE (transit)     SOFT_TO_C
+      TYPE (symmetry)    SYMM
+      TYPE (wavespin)    W
+      TYPE (wavedes)     WDES
+      TYPE (tau_handle)  KINEDEN
 
-      ! local variables
-      INTEGER ISP
-      REAL(q) RINPL
-      REAL(q) EXC,EXCG,XCENCG
-      REAL(q) TMPSIF(3,3)
-      COMPLEX(q) CVZERG
-      COMPLEX(q), POINTER :: MUTOT_(:,:)
-#ifdef noAugXCmeta
-      COMPLEX(q), ALLOCATABLE :: CTMP(:,:)
-#endif
+      INTEGER NIOND
+      
       ! quick return if possible
       IF (.NOT.LDO_METAGGA()) RETURN
-#ifdef noAugXCmeta
-      ALLOCATE(CTMP(GRIDC%MPLWV,WDES%NCDIJ))
-#else
-#define CTMP CHTOT
-#endif
+!     IF ((.NOT.LDO_METAGGA()).OR.(.NOT.LCALCMU())) RETURN
+
       ! just a failsafe
       IF (.NOT.ASSOCIATED(KINEDEN%TAU)) THEN
-         WRITE(*,*) 'POTLOK_METAGGA: internal ERROR, KIN_EDEN handle not allocated'
+         WRITE(*,*) 'SET_KINEDEN: internal ERROR, KIN_EDEN handle not allocated'
          STOP
       ENDIF
+      
+      CALL TAU_PW(&
+     &   GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND,W,WDES,KINEDEN%TAU)
+   
+      RETURN
+      END SUBROUTINE SET_KINEDEN
 
-      MUTOT_ => MUTOT
 
-      CVTOT=0; MUTOT_=0
-      XCENCG=0; EXCG=0; CVZERG=0; TMPSIF=0
+!************************* SUBROUTINE TAUPAR ***************************
+!
+!  subroutine to calculate the partial kinetic energy density of the 
+!  core electrons from overlapping atoms in real space and store
+!  it in an real array
+!  NOTE: the DENS array is not necessarily suffiently large
+!  to allow for 3d-FFT, hence a work array is temporarily allocated
+!
+!***********************************************************************
 
-#ifdef noAugXCmeta
-      ! We will use the soft charge density instead of the augmented one
-      CTMP=0
-      DO ISP=1,WDES%NCDIJ
-         CALL ADD_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CHDEN(1,ISP),CTMP(1,ISP))
-         CALL SETUNB_COMPAT(CTMP(1,ISP),GRIDC)
-      ENDDO
-#endif
-      ! Bring the charge density to real space
-      DO ISP=1,WDES%NCDIJ
-         CALL FFT3D(CTMP(1,ISP),GRIDC,1)
-      ENDDO
-  
-      CALL FEXCGS_METAGGA( &
-     &   WDES%NCDIJ,GRIDC,LATT_CUR,XCENCG,EXCG,CVZERG,TMPSIF, &
-     &   KINEDEN,CTMP,DENCOR,CVTOT,MUTOT_)
-       
-#ifndef noAugXCmeta
-      ! Take the charge density back to reciprocal space
-      DO ISP=1,WDES%NCDIJ
-         CALL FFT_RC_SCALE(CTMP(1,ISP),CTMP(1,ISP),GRIDC)
-         CALL SETUNB_COMPAT(CTMP(1,ISP),GRIDC)
-      ENDDO
-#endif
-!-----------------------------------------------------------------------
-! Add CWORK to CVTOT in real space, store the result in CVTOT
-! and take it to reciprocal space
-!-----------------------------------------------------------------------
-      RINPL=1._q/GRIDC%NPLWV
-      DO  ISP=1,WDES%NCDIJ 
-         CALL RL_ADD(CVTOT(1,ISP),RINPL,CVTOT(1,ISP),0._q,CVTOT(1,ISP),GRIDC)
-         CALL FFT3D(CVTOT(1,ISP),GRIDC,-1)
-         CALL SETUNB_COMPAT(CVTOT(1,ISP),GRIDC)         
-      ENDDO
-     ! Flip CVTOT from (up,down) to (total,magnetization) storage mode
-     ! This is done because the routine FORTAU needs the "total" component
-     CALL RC_FLIP_POTENTIAL(CVTOT,GRIDC,WDES%NCDIJ,.FALSE.)
+      SUBROUTINE TAUPAR(GRIDC,T_INFO,B,OMEGA,P,CSTRF,DENS)
+      USE prec
+      USE mpimy
+      USE mgrid
+      USE poscar
+      USE pseudo
+      IMPLICIT NONE
+
+      TYPE (type_info)   T_INFO
+      TYPE (potcar)      P(T_INFO%NTYP)
+      TYPE (grid_3d)     GRIDC
+      RGRID        DENS(GRIDC%RL%NP)
+      COMPLEX(q)   CSTRF(GRIDC%MPLWV,T_INFO%NTYP)
+      REAL(q)      B(3,3),OMEGA
+      ! work arrays
+      COMPLEX(q),ALLOCATABLE::    CWORK1(:),CWORK2(:)
+
+      ALLOCATE(CWORK1(GRIDC%MPLWV),CWORK2(GRIDC%MPLWV))
+      CALL TAUATO(.TRUE.,GRIDC,T_INFO,B,P,CSTRF,CWORK1,CWORK2)
+      CALL RL_ADD(CWORK1,1.0_q/OMEGA,CWORK1,0.0_q,DENS,GRIDC)
+
+      DEALLOCATE(CWORK1,CWORK2)
+
+      RETURN
+      END SUBROUTINE TAUPAR
+
+
+!************************* SUBROUTINE TAUATO ***************************
+!
+!  This routine calculates the partial kinetic energy density of the
+!  core electrons corresponding to overlapping atoms
+!
+!  LFOUR
+!   .FALSE. set up density in reciprocal space
+!   .TRUE.  set up density in real space
+!
+!***********************************************************************
+
+      SUBROUTINE TAUATO(LFOUR,GRIDC,T_INFO,B,P,CSTRF,CHTOT,CHDER)
+      USE prec
+      USE mpimy
+      USE mgrid
+      USE poscar
+      USE pseudo
+      USE constant
+      IMPLICIT COMPLEX(q) (C)
+
+      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+
+      TYPE (type_info)   T_INFO
+      TYPE (potcar)      P(T_INFO%NTYP)
+      TYPE (grid_3d)     GRIDC
+      COMPLEX(q)   CHTOT(GRIDC%RC%NP),CHDER(GRIDC%RC%NP)
+      COMPLEX(q)   CSTRF(GRIDC%MPLWV,T_INFO%NTYP)
+      REAL(q)      B(3,3)
+      LOGICAL LFOUR
+      ! local variables
+      REAL(q), POINTER :: PRHO(:)
+
+      CHTOT=0
+      CHDER=0
+!=======================================================================
+! loop over all types of atoms
+! if no pseudocharge for this ion next ion
+!=======================================================================
+      typ: DO NT=1,T_INFO%NTYP
+       PRHO=>P(NT)%PSPTAU
+       IF (.NOT.ASSOCIATED(PRHO)) GOTO 200
+!=======================================================================
+! calculate the scaling factor ARGSC that converts the magnitude of a
+! reciprocal lattice vector to the correponding position in the
+! pseudopotential arrays
+!=======================================================================
+      ARGSC=NPSPTS/P(NT)%PSGMAX
+      PSGMA2=P(NT)%PSGMAX-P(NT)%PSGMAX/NPSPTS*3
+
+      DO N=1,GRIDC%RC%NP
+        N1= MOD((N-1),GRIDC%RC%NROW) +1
+        NC= (N-1)/GRIDC%RC%NROW+1
+        N2= GRIDC%RC%I2(NC)
+        N3= GRIDC%RC%I3(NC)
+!=======================================================================
+! calculate the magnitude of the reciprocal lattice vector
+!=======================================================================
+        GX= GRIDC%LPCTX(N1)*B(1,1)+GRIDC%LPCTY(N2)*B(1,2)+GRIDC%LPCTZ(N3)*B(1,3)
+        GY= GRIDC%LPCTX(N1)*B(2,1)+GRIDC%LPCTY(N2)*B(2,2)+GRIDC%LPCTZ(N3)*B(2,3)
+        GZ= GRIDC%LPCTX(N1)*B(3,1)+GRIDC%LPCTY(N2)*B(3,2)+GRIDC%LPCTZ(N3)*B(3,3)
 
-      IF (ASSOCIATED(MUTOT_)) THEN
-!-----------------------------------------------------------------------
-! The same procedure with MUTOT
-!-----------------------------------------------------------------------
-      RINPL=1._q/GRIDC%NPLWV
-      DO  ISP=1,WDES%NCDIJ 
-         CALL RL_ADD(MUTOT_(1,ISP),RINPL,MUTOT_(1,ISP),0._q,MUTOT_(1,ISP),GRIDC)
-         CALL FFT3D(MUTOT_(1,ISP),GRIDC,-1)
-         CALL SETUNB_COMPAT(MUTOT_(1,ISP),GRIDC)         
+        G=SQRT(GX**2+GY**2+GZ**2)*TPI
+
+        IF (G/=0 .AND.G<PSGMA2) THEN
+!=======================================================================
+! convert the magnitude of the reciprocal latice vector to a position
+! in the charge-dens. array  and interpolate the atomic-chargedensity
+!=======================================================================
+          ARG=(G*ARGSC)+1
+          NADDR=MAX(INT(ARG),2)
+          REM=ARG-NADDR
+          V1=PRHO(NADDR-1)
+          V2=PRHO(NADDR)
+          V3=PRHO(NADDR+1)
+          V4=PRHO(NADDR+2)
+          T0=V2
+          T1=((6*V3)-(2*V1)-(3*V2)-V4)/6._q
+          T2=(V1+V3-(2*V2))/2._q
+          T3=(V4-V1+(3*(V2-V3)))/6._q
+          CHTOT(N)=CHTOT(N)+(T0+REM*(T1+REM*(T2+REM*T3))) *CSTRF(N,NT)
+          CHDER(N)=CHDER(N)+(T1+REM*(2*T2+REM*3*T3))*ARGSC*CSTRF(N,NT)
+        ELSE IF (G==0) THEN
+          CHTOT(N)=CHTOT(N)+PRHO(1)*CSTRF(N,NT)
+          CHDER(N)=0
+        ENDIF
       ENDDO
-      ! Flip MUTOT from (up,down) to (total,magnetization) storage mode
-      ! This is done because the routine FORTAU needs the "total" component 
-      CALL RC_FLIP_POTENTIAL(MUTOT_,GRIDC,WDES%NCDIJ,.FALSE.)
+  200 CONTINUE
+      ENDDO typ
+!=======================================================================
+! set the charge-density of unbalanced lattice-vectors to 0
+! and transform the charge-density to real space
+!=======================================================================
+      CALL SETUNB(CHTOT(1),GRIDC)
+      CALL SETUNB(CHDER(1),GRIDC)
+
+      IF (LFOUR) THEN
+        CALL FFT3D(CHTOT,GRIDC,1)
       ENDIF
 
-      NULLIFY(MUTOT_)
-#ifdef noAugXCmeta
-      DEALLOCATE(CTMP)
-#endif
       RETURN
-      END SUBROUTINE POTXC_METAGGA
+      END SUBROUTINE TAUATO
 
 
-!******************** SUBROUTINE FEXCGS_METAGGA ************************
+!************************ SUBROUTINE FORTAU ****************************
+!
+! This subroutine calculates the correction to the Hellmann-Feynman
+! forces due to the (possible) presence of a partial core kinetic energy
+! density
 !
 !***********************************************************************
 
-      SUBROUTINE FEXCGS_METAGGA(&
-     &   NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-     &   KINEDEN,CHTOT,DENCOR,CWORK,MUTOT &
-     &)
+      SUBROUTINE FORTAU(GRIDC,P,T_INFO,LATT_CUR,MUTOT,TAUFOR)
       USE prec
-      USE lattice
+
       USE mpimy
       USE mgrid
-      USE setexm
-
+      USE pseudo
+      USE lattice
+      USE poscar
+      USE constant
       IMPLICIT COMPLEX(q) (C)
+
       IMPLICIT REAL(q) (A-B,D-H,O-Z)
 
       TYPE (grid_3d)     GRIDC
+      TYPE (type_info)   T_INFO
+      TYPE (potcar)      P (T_INFO%NTYP)
       TYPE (latt)        LATT_CUR
-      TYPE (tau_handle)  KINEDEN
-
-      RGRID DENCOR(GRIDC%RL%NP)
-      COMPLEX(q) CHTOT(GRIDC%MPLWV,NCDIJ),CWORK(GRIDC%MPLWV,NCDIJ)
-      DIMENSION XCSIF(3,3)
-      COMPLEX(q), POINTER :: MUTOT(:,:)
+      COMPLEX(q)   MUTOT(GRIDC%MPLWV)
+      REAL(q)      TAUFOR(3,T_INFO%NIONS)
       ! work arrays
-      COMPLEX(q),ALLOCATABLE :: CWGRAD(:,:)
-      REAL(q), ALLOCATABLE   :: DWORKG(:,:),DWORK1(:,:),DWORK2(:,:),DWORK3(:,:),DVC(:)
+      REAL(q), POINTER :: PRHO(:)
+      REAL(q), ALLOCATABLE :: WORK(:)
 
-      REAL(q) LAPLUP,LAPLDW
-      
-      NP1=GRIDC%RL%NP
+      ALLOCATE(WORK(GRIDC%RC%NP))
       
-      IF (NCDIJ==1.OR.NCDIJ==2) THEN
-      ! (Non)spinpolarized
-         ALLOCATE(CWGRAD(GRIDC%MPLWV,NCDIJ), DWORKG(NP1,NCDIJ), &
-           DWORK1(NP1,NCDIJ),DWORK2(NP1,NCDIJ),DWORK3(NP1,NCDIJ),DVC(NP1))
+      SCALE=1._q/(RYTOEV*AUTOA2)
 
-         ! Flip CHTOT from (rho,mag) to (rho_up,rho_down)
-         CALL RL_FLIP(CHTOT,GRIDC,NCDIJ,.TRUE.)
+      TAUFOR(1:3,1:T_INFO%NIONS)=0
+!=======================================================================
+! loop over all types of atoms
+!=======================================================================
+      NIS=1
+      typ: DO NT=1,T_INFO%NTYP
+      NIADD=T_INFO%NITYP(NT)
 
-         CALL FEXCGS_METAGGA_(LCALCPOT(),LCALCMU(), &
-        &            NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-        &            CWGRAD,CHTOT,CWORK,KINEDEN%TAU,CWGRAD,CHTOT,CWORK,KINEDEN%TAU, &
-        &            DENCOR,KINEDEN%TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,MUTOT)
-         ! Flip CHTOT back to (rho,mag)
-         CALL RL_FLIP(CHTOT,GRIDC,NCDIJ,.FALSE.)
-         DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)               
-      ELSEIF (NCDIJ==4) THEN
-      ! Non-collinear magnetism: gradient corrections in the
-      ! noncollinear case are calculated a bit differently than in the collinear case
-         ALLOCATE(CWGRAD(GRIDC%MPLWV,NCDIJ), DWORKG(NP1,NCDIJ/2), &
-           DWORK1(NP1,NCDIJ),DWORK2(NP1,NCDIJ),DWORK3(NP1,NCDIJ),DVC(NP1))
+      PRHO=>P(NT)%PSPTAU
 
-         ! CHTOT and KINEDEN should be in (rho,mag) representation
-         CALL FEXCGS_METAGGA_NONCOL(LCALCPOT(),LCALCMU(), &
-        &            NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-        &            CWGRAD,CHTOT,CWORK,KINEDEN%TAU,CWGRAD,CHTOT,CWORK,KINEDEN%TAU, &
-        &            DENCOR,KINEDEN%TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,MUTOT)
+       IF (.NOT.ASSOCIATED(PRHO)) GOTO 200
+!=======================================================================
+! iterpolate the pseudopotential on the grid of reciprocal
+! lattice-vectors
+!=======================================================================
+      ARGSC=NPSPTS/P(NT)%PSGMAX
+      PSGMA2=P(NT)%PSGMAX-P(NT)%PSGMAX/NPSPTS*3
 
-         IF (ASSOCIATED(MUTOT).AND.LCALCMU()) THEN
-! mM: just until all is done
-!           WRITE(*,*) 'non-collinear mode for revTPSS not yet fully implemented, sorry ...'
-!           STOP
-! mM
-            ! MUTOT and CWORK come out as two component (up,down) quantities, where
-            ! "up" and "down" are taken w.r.t. the local magnetization direction,
-            ! this is now cast into (rho, mag) form.
-            CALL MAG_DIRECTION_KINDENS(CHTOT(1,1), KINEDEN%TAU(1,1), MUTOT(1,1), CWORK(1,1), GRIDC, NCDIJ, LATT_CUR)
-            ! and rearranged from (rho,mag) to spinor representation 
-            CALL POT_FLIP_RL(MUTOT(1,1), GRIDC, NCDIJ)    
-         ELSE
-            ! CWORK(potential) comes out with (spin up and down) representation
-            ! It needs to flip to (total, mag) representation
-            CALL MAG_DIRECTION(CHTOT(1,1), CWORK(1,1), GRIDC, NCDIJ)
-         ENDIF
-         ! rearrange the potential in (spinor) representation 
-         CALL POT_FLIP_RL(CWORK(1,1), GRIDC, NCDIJ)
-         DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)         
-      ENDIF
+      DO N=1,GRIDC%RC%NP
+        N1= MOD((N-1),GRIDC%RC%NROW) +1
+        NC= (N-1)/GRIDC%RC%NROW+1
+        N2= GRIDC%RC%I2(NC)
+        N3= GRIDC%RC%I3(NC)
+
+        SETFACT1
+        SETFACT
+!=======================================================================
+! calculate the magnitude of the reciprocal lattice vector
+!=======================================================================
+        GX= GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3)
+        GY= GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3)
+        GZ= GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3)
+
+        G=SQRT(GX**2+GY**2+GZ**2)*TPI
+
+        IF (G/=0 .AND.G<PSGMA2) THEN
+!=======================================================================
+! convert the magnitude of the reciprocal latice vector to a position
+! in the charge-dens. array  and interpolate the atomic-chargedensity
+!=======================================================================
+          ARG=(G*ARGSC)+1
+          NADDR=MAX(INT(ARG),2)
+          REM=ARG-NADDR
+          V1=PRHO(NADDR-1)
+          V2=PRHO(NADDR)
+          V3=PRHO(NADDR+1)
+          V4=PRHO(NADDR+2)
+          T0=V2
+          T1=((6*V3)-(2*V1)-(3*V2)-V4)/6._q
+          T2=(V1+V3-(2*V2))/2._q
+          T3=(V4-V1+(3*(V2-V3)))/.6_q
+          WORK(N)=T0+REM*(T1+REM*(T2+REM*T3))
+!       ELSE IF (G==0) THEN
+!         WORK(N)=PRHO(1)
+        ELSE
+          WORK(N)=0
+        ENDIF
+
+      ENDDO
+
+      ion: DO NI=NIS,NIADD+NIS-1
+!=======================================================================
+! initialise the force on the ion to zero
+!=======================================================================
+         FOR1=0._q
+         FOR2=0._q
+         FOR3=0._q
+!=======================================================================
+! calculate the total force on the ions by summing over reciprocal
+! lattice vectors
+! first calculate phase factor:
+! there are two version for calculating the phase factor
+! on vector machines you might try the first version
+! but usually the second version is much faster (less calls to CEXP)
+!=======================================================================
+#ifdef vector
+         DO NG=1,GRIDC%RC%NP
+
+           N1= MOD((NG-1),GRIDC%RC%NROW) +1
+           NC= (NG-1)/GRIDC%RC%NROW+1
+           N2= GRIDC%RC%I2(NC)
+           N3= GRIDC%RC%I3(NC)
+
+           G1=T_INFO%POSION(1,NI)*GRIDC%LPCTX(N1)
+           G2=T_INFO%POSION(2,NI)*GRIDC%LPCTY(N2)
+           G3=T_INFO%POSION(3,NI)*GRIDC%LPCTZ(N3)
+           SETFACT1
+           SETFACT
+           CEXPF=EXP(-CITPI*(G3+G2+G1))*T_INFO%VCA(NT)
+#else
+         CX =EXP(-CITPI*T_INFO%POSION(1,NI))
+         G1 =T_INFO%POSION(1,NI)*xmin(GRIDC%NGX)
+
+         DO NC=1,GRIDC%RC%NCOL
+           NGP=(NC-1)*GRIDC%RC%NROW+1
+
+           N2= GRIDC%RC%I2(NC)
+           N3= GRIDC%RC%I3(NC)
+           G2=T_INFO%POSION(2,NI)*GRIDC%LPCTY(N2)
+           G3=T_INFO%POSION(3,NI)*GRIDC%LPCTZ(N3)
+           CE=EXP(-CITPI*(G3+G2+G1))*T_INFO%VCA(NT)
+
+           DO N1P=0,GRIDC%RC%NROW-1
+           SETN1fromN1P
+           NG=NGP+N1
+           N1=N1+1
+           SETFACT1
+           SETFACT
+           CEXPF=CE
+           CE=CE*CX
+#endif
+!=======================================================================
+! add the contribution to the force from the present reciprocal lattice
+! vector  and multiply by i (ie take imaginary part)
+!=======================================================================
+           FOR=WORK(NG)*MULFACT AIMAG(CONJG(MUTOT(NG))*CEXPF)
+
+           FOR1=FOR1-GRIDC%LPCTX_(N1)*FOR
+           FOR2=FOR2-GRIDC%LPCTY_(N2)*FOR
+           FOR3=FOR3-GRIDC%LPCTZ_(N3)*FOR
+         ENDDO
+#ifndef vector
+         ENDDO
+#endif
+!=======================================================================
+! multiply forces by 2*Pi
+!=======================================================================
+         TAUFOR(1,NI)=FOR1*TPI*SCALE
+         TAUFOR(2,NI)=FOR2*TPI*SCALE
+         TAUFOR(3,NI)=FOR3*TPI*SCALE
+
+      ENDDO ion
+  200 NIS=NIS+NIADD
+      ENDDO typ
+!=======================================================================
+! forces are now in the reciprocal lattice transform it to
+! cartesian coordinates
+!=======================================================================
+      CALLMPI( M_sum_d(GRIDC%COMM,TAUFOR(1,1),T_INFO%NIONS*3))
+      CALL DIRKAR(T_INFO%NIONS,TAUFOR,LATT_CUR%B)
+      DEALLOCATE(WORK)
 
       RETURN
-      END SUBROUTINE FEXCGS_METAGGA
+      END SUBROUTINE FORTAU
 
 
-!******************** SUBROUTINE SET_PAW_METAGGA ***********************
+!******************** SUBROUTINE RAD_KINEDEN ***************************
 !
 !***********************************************************************
-      SUBROUTINE SET_PAW_METAGGA(P)
+      SUBROUTINE RAD_KINEDEN(&
+     &   P,W,LMAX_TAU,NCDIJ,COCC,TAU)
       USE prec
-      USE pseudo
+      USE asa
       USE radial
       USE constant
+      USE pseudo
       IMPLICIT NONE
-      TYPE (potcar), POINTER :: P
+      TYPE (potcar) P
+      REAL(q) W(:,:)
+      INTEGER LMAX_TAU,NCDIJ
+      OVERLAP COCC(:,:,:)
+      REAL(q) TAU(:,:,:)
       ! local variables
-      INTEGER I,NMIN,NMAX
-      REAL(q) SCALE
-      REAL(q) RHO(P%R%NMAX),DRHO(P%R%NMAX)
+      INTEGER ISP,I,Ch1,Ch2
+      INTEGER LLMAX_TAU,LMMAX_TAU,LM,LMP,LL,LLP,M,MP,MPLOW,INDYLM,INDYLMP
 
-      SCALE=1/(2*SQRT(PI)) ! Y00
+      REAL(q) FAKT
+      REAL(q) W1(P%R%NMAX),W2(P%R%NMAX),DW1(P%R%NMAX),DW2(P%R%NMAX)
 
-      NMAX=P%R%NMAX
+      TAU=0
 
-!     NMIN=NMAX
-!     DO I=1,P%LMAX
-!        NMIN=MIN(NMIN,IR_MATCH(P,I))
-!     ENDDO
-      NMIN=IR_PSMAX(P)
+      ! quick return if possible
+      IF (.NOT.LDO_METAGGA()) RETURN
+                  
+      ! check consistency
+      LMMAX_TAU=(LMAX_TAU+1)**2
+      IF (SIZE(TAU,2)<LMMAX_TAU) THEN
+         WRITE(*,*) 'RAD_KINEDEN: ERROR, size(TAU,2)<LMMAX_TAU',SIZE(TAU,2),LMMAX_TAU
+         STOP
+      ENDIF
+      
+      ! restriction for the angular development of \tau and \mu
+      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
 
-      RHO(:)=SCALE*P%RHOAE(:)/(P%R%R(:)*P%R%R(:))
+      spin: DO ISP=1,NCDIJ
+         
+         ! loops over channels (l,epsilon)
+         LM=1; DO Ch1=1,P%LMAX
+         ! d(w1/r)/dr
+         W1(:)=W(:,Ch1)/P%R%R(:); CALL GRAD(P%R,W1,DW1)
+         
+         LMP=LM; DO Ch2=Ch1,P%LMAX
+         ! d(w2/r)/dr
+         W2(:)=W(:,Ch2)/P%R%R(:); CALL GRAD(P%R,W2,DW2)
+         
+            LL=P%LPS(Ch1); LLP=P%LPS(Ch2)
+            DO M=1,2*LL+1
+            MPLOW=1; IF(Ch1==Ch2) MPLOW=M
+            DO MP=MPLOW,2*LLP+1
+               INDYLM= LL**2 +M
+               INDYLMP=LLP**2+MP
 
-      CALL GRAD(P%R,RHO,DRHO)
-      DRHO=ABS(DRHO)
-      DO I=1,NMAX
-         IF ((DRHO(I)*DRHO(I)/RHO(I)/8._q*2._q*HSQDTM) > (P%TAUAE(I)*SCALE/(P%R%R(I)*P%R%R(I))) ) &
-        &   P%TAUAE(I)=(DRHO(I)*DRHO(I)/RHO(I)/8._q*2._q*HSQDTM)/SCALE*(P%R%R(I)*P%R%R(I)) !*1.00001
-      ENDDO
+               FAKT=REAL(COCC(LM+M-1,LMP+MP-1,ISP)+COCC(LMP+MP-1,LM+M-1,ISP),q)
+               IF ((LM+M-1)==(LMP+MP-1)) THEN
+                  FAKT=REAL(COCC(LM+M-1,LMP+MP-1,ISP),q)
+               ENDIF
+               
+               DO I=1,LMMAX_TAU
+                  TAU(:,I,ISP)=TAU(:,I,ISP)+FAKT*&
+                 &   (DW1(:)*X_YLM_X_YLM(INDYLM,INDYLMP,I)*DW2(:)*P%R%R(:)*P%R%R(:) + &
+                 &    DW1(:)*X_YLM_YLMD(INDYLM,INDYLMP,I)*W2(:)*P%R%R(:) + &
+                 &    W1(:)*X_YLM_YLMD(INDYLMP,INDYLM,I)*DW2(:)*P%R%R(:) + &
+                 &    W1(:)*YLMD_YLMD(INDYLM,INDYLMP,I)*W2(:))
+               ENDDO
+                              
+            ENDDO
+            ENDDO
+         LMP=LMP+2*LLP+1
+         ENDDO
+         LM =LM +2*LL +1
+         ENDDO
 
-!     P%TAUAE(NMIN:NMAX)=0
-      P%RHOAE(NMIN:NMAX)=P%RHOPS(NMIN:NMAX)
+      ENDDO spin
+      
+      TAU=TAU*HSQDTM
 
       RETURN
-      END SUBROUTINE SET_PAW_METAGGA
+      END SUBROUTINE RAD_KINEDEN
 
 
-!******************** SUBROUTINE SET_KINEDEN ***************************
-!
-! SET_KINEDEN calculates the kinetic energy density of the PW part of
-! the wavefunctions (0.5*|grad psi|**2)  and the Weizsaecker kinetic
-! energy density.
-!
-! The actual work is done in TAU_PW_DIRECT
+!********************* SUBROUTINE RAD_TAU_ATOM *************************
 !
 !***********************************************************************
-
-      SUBROUTINE SET_KINEDEN(&
-     &   GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND,W,WDES,KINEDEN &
-     &)
+      SUBROUTINE RAD_TAU_ATOM( &
+     &   P,W,LMAX_TAU,TAU)
       USE prec
-      USE lattice
-      USE mgrid
-      USE msymmetry
-      USE base
-      USE wave
-      USE mpimy
+      USE pseudo
+      IMPLICIT NONE
+      TYPE (potcar) P
+      REAL(q) W(:,:)  
+      REAL(q) TAU(:,:,:)
+      INTEGER LMAX_TAU
+      ! local variables
+      OVERLAP, ALLOCATABLE :: COCC(:,:,:)
+      INTEGER Ch,LM,M,LMMAX_TAU
+
+      ! quick return if possible
+      IF (.NOT.LDO_METAGGA()) RETURN
+                  
+      ! check consistency
+      LMMAX_TAU=(LMAX_TAU+1)**2
+      IF (SIZE(TAU,2)<LMMAX_TAU) THEN
+         WRITE(*,*) 'RAD_TAU_ATOM: ERROR, size(TAU,2)<LMMAX_TAU',SIZE(TAU,2),LMMAX_TAU
+         STOP
+      ENDIF
+      
+      ALLOCATE(COCC(P%LMDIM,P%LMDIM,1))
+      COCC=0
+      
+      LM=1
+      DO Ch=1,P%LMAX
+         DO M=1,2*P%LPS(Ch)+1
+            COCC(LM,LM,1)=P%QATO(Ch,Ch)
+            LM=LM+1
+         ENDDO
+      ENDDO
+      
+      CALL RAD_KINEDEN(P,W,LMAX_TAU,1,COCC,TAU)
+      
+      DEALLOCATE(COCC)
       
+      RETURN
+      END SUBROUTINE RAD_TAU_ATOM
+
+
+!********************* SUBROUTINE RAD_POT_METAGGA **********************
+!
+!***********************************************************************
+      SUBROUTINE RAD_POT_METAGGA(&
+     &   R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHO,RHOPS,RHOC,POTC,TAU,POTH,POT,DOUBLEC,EXCG,MU,TAUC)
+      USE prec
+      USE constant
+      USE radial
       IMPLICIT NONE
+      TYPE (rgrid) R            
+      INTEGER ISPIN
+      INTEGER LMAX_CALC,LMAX_TAU
+      REAL(q) RHO(:,:,:)     ! charge distribution see above (charge,magnetization)
+      REAL(q) RHOPS(:,:,:)   ! same as above (but possibly without augmentation)
+      REAL(q) RHOC(:)        ! core charge distribution
+      REAL(q) POTC(:)        ! frozen core potential (Hartree)
+      REAL(q) TAU(:,:,:)     ! kinetic energy density (up,down)
+      REAL(q) POTH(:,:,:)    ! Hartree potential (up,down)
+      REAL(q) POT(:,:,:)     ! Total potential (up,down)
+      REAL(q) EXCG           ! exchange energy only
+      REAL(q) DOUBLEC        ! double counting corrections      
+      REAL(q) MU(:,:,:)      ! d e_xc/d tau (up,down)
+      REAL(q), OPTIONAL :: TAUC(:) ! kinetic energy density of the core electrons
+      LOGICAL LASPH
+      ! local variables
+      INTEGER N,L,M,LM,K
+      REAL(q) SCALE
+      REAL(q) SUM,DHARTREE
+      REAL(q) DEXC,DVXC
 
-      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
-      TYPE (latt)        LATT_CUR
-      TYPE (transit)     SOFT_TO_C
-      TYPE (symmetry)    SYMM
-      TYPE (wavespin)    W
-      TYPE (wavedes)     WDES
-      TYPE (tau_handle)  KINEDEN
+      MU=0
 
-      INTEGER NIOND
-      
       ! quick return if possible
       IF (.NOT.LDO_METAGGA()) RETURN
-!     IF ((.NOT.LDO_METAGGA()).OR.(.NOT.LCALCMU())) RETURN
 
-      ! just a failsafe
-      IF (.NOT.ASSOCIATED(KINEDEN%TAU)) THEN
-         WRITE(*,*) 'SET_KINEDEN: internal ERROR, KIN_EDEN handle not allocated'
-         STOP
+      POT=0; POTH=0
+
+      SCALE=2*SQRT(PI)
+      N=R%NMAX
+
+      ! Hartree contributions 
+      DHARTREE=0
+      DO L=0,LMAX_CALC
+      DO M=0,2*L
+         LM=L*L+M+1
+         CALL RAD_POT_HAR(L,R,POTH(:,LM,1),RHO(:,LM,1),SUM)
+         IF (ISPIN==2) POTH(:,LM,2)=POTH(:,LM,1)
+         DHARTREE=DHARTREE+SUM
+      ENDDO
+      ENDDO
+      DO K=1,N
+         POTH(K,1,1)=POTH(K,1,1)+POTC(K)*SCALE
+      ENDDO
+      IF (ISPIN==2) POTH(:,1,2)=POTH(:,1,1)
+
+      ! Exchange-correlation
+      DEXC=0
+      DVXC=0
+
+      POT=POTH
+      
+      IF (PRESENT(TAUC)) THEN
+         CALL RAD_METAGGA_XC(R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHOPS,RHOC,POTC,TAU,DEXC,DVXC,POT,MU,TAUC)
+      ELSE
+         CALL RAD_METAGGA_XC(R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHOPS,RHOC,POTC,TAU,DEXC,DVXC,POT,MU)
       ENDIF
+
+      EXCG=DEXC
+      DOUBLEC=-DHARTREE/2+DEXC-DVXC
+#ifdef debug
+      WRITE(*,1)  DHARTREE/2+DEXC, DOUBLEC 
+1     FORMAT('  Hartree + exc, -Hartree + exc -vxc',6F14.7)
+#endif
       
-      CALL TAU_PW(&
-     &   GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND,W,WDES,KINEDEN%TAU)
-   
       RETURN
-      END SUBROUTINE SET_KINEDEN
+      END SUBROUTINE RAD_POT_METAGGA     
 
 
-!************************* SUBROUTINE TAUPAR ***************************
-!
-!  subroutine to calculate the partial kinetic energy density of the 
-!  core electrons from overlapping atoms in real space and store
-!  it in an real array
-!  NOTE: the DENS array is not necessarily suffiently large
-!  to allow for 3d-FFT, hence a work array is temporarily allocated
+!********************* SUBROUTINE RAD_METAGGA_XC ***********************
 !
 !***********************************************************************
-
-      SUBROUTINE TAUPAR(GRIDC,T_INFO,B,OMEGA,P,CSTRF,DENS)
+      SUBROUTINE RAD_METAGGA_XC(&
+     &   R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHO,RHOC,POTC,TAU,DEXC,DVXC,POT,MU,TAUC)
       USE prec
-      USE mpimy
-      USE mgrid
-      USE poscar
-      USE pseudo
+      USE asa
+      USE radial
+      USE constant
+      USE metalib
+
       IMPLICIT NONE
+      TYPE (rgrid) :: R
+      INTEGER ISPIN
+      INTEGER LMAX_CALC,LMAX_TAU
+      REAL(q) RHOC(:)        ! core charge distribution
+      REAL(q) POTC(:)        ! frozen core potential (Hartree)
+      REAL(q) RHO(:,:,:)     ! charge distribution see above (charge,magnetization)
+      REAL(q) TAU(:,:,:)     ! kinetic energy density (up,down)
+      REAL(q) DEXC, DVXC
+      REAL(q) POT(:,:,:)     ! potential (up,down)
+      REAL(q) MU(:,:,:)      ! d e_xc/d tau (up,down)
+      REAL(q), OPTIONAL :: TAUC(:) ! kinetic energy density of the core electrons
+      LOGICAL LASPH
+      ! local variables
+      REAL(q) RHOT(R%NMAX,2),RHO_ANG(R%NMAX,2,3),T1(R%NMAX,2),T2(R%NMAX,2)
+      REAL(q) TAUU(R%NMAX),TAUD(R%NMAX)
+      INTEGER ISP,K,I,J,IFAIL
+      INTEGER LM,LMP,LLMAX,LMMAX,LMMAX_alloc,LMMAX_CALC,LLMAX_TAU,LMMAX_TAU
+      INTEGER NP,PHPTS,THPTS,NPTS
+      REAL(q) SCALE,SUM,DELTAPHI,EVTOH
 
-      TYPE (type_info)   T_INFO
-      TYPE (potcar)      P(T_INFO%NTYP)
-      TYPE (grid_3d)     GRIDC
-      RGRID        DENS(GRIDC%RL%NP)
-      COMPLEX(q)   CSTRF(GRIDC%MPLWV,T_INFO%NTYP)
-      REAL(q)      B(3,3),OMEGA
-      ! work arrays
-      COMPLEX(q),ALLOCATABLE::    CWORK1(:),CWORK2(:)
+      REAL(q) DVINI,DCMU
 
-      ALLOCATE(CWORK1(GRIDC%MPLWV),CWORK2(GRIDC%MPLWV))
-      CALL TAUATO(.TRUE.,GRIDC,T_INFO,B,P,CSTRF,CWORK1,CWORK2)
-      CALL RL_ADD(CWORK1,1.0_q/OMEGA,CWORK1,0.0_q,DENS,GRIDC)
+      REAL(q) SIM_FAKT
+      REAL(q) TEMP1
+      REAL(q), ALLOCATABLE :: RADPTS(:,:), XYZPTS(:,:)
+      REAL(q), ALLOCATABLE :: YLM(:,:),YLMD(:,:,:),YLMDD(:,:,:)
+      REAL(q), ALLOCATABLE :: YLM_NABLA_YLM(:,:,:),YLM_X_YLM(:,:,:)
+      REAL(q), ALLOCATABLE :: dFXC(:,:,:,:),dFXCdT(:,:,:)
+      REAL(q), ALLOCATABLE :: WEIGHT(:),ABSCIS(:)
+      REAL(q), ALLOCATABLE :: RHOLM(:,:,:), RHOLMD(:,:,:)
 
-      DEALLOCATE(CWORK1,CWORK2)
+      REAL(q) XU,YU,ZU,XD,YD,ZD
+      REAL(q) TG,LAPLUP,LAPLDW,MUUP,MUDW
+      REAL(q) EXT,DEXC1,DEXC2,DVXC1,DVXC2,DVC
+      REAL(q) TMP(ISPIN,3)
+      EXTERNAL GAUSSI2
 
-      RETURN
-      END SUBROUTINE TAUPAR
+      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-10_q, LAPMIN=1E-10_q
 
+      ! initial double counting corrections
+      DVINI=0
+      IF (LCALCPOT()) THEN
+         CALL RAD_POT_IN_RHO(R,ISPIN,LMAX_CALC,RHO,POT,DVINI)
+      ENDIF
+      
+      SCALE=2*SQRT(PI) ! 1/Y00
+      
+      EVTOH=1._q/(2.*HSQDTM)*AUTOA5
+      
+      LMMAX_CALC=(LMAX_CALC+1)**2
+      ! restriction for the angular development of \rho
+      LLMAX=MIN(6,LMAX_CALC)
+      ! in GGA this needs to be increased by 1 (nabla-comment)
+      LLMAX=LLMAX+1; LMMAX=(LLMAX+1)**2
+      
+      ! restriction for the angular development of \tau and \mu
+      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
 
-!************************* SUBROUTINE TAUATO ***************************
-!
-!  This routine calculates the partial kinetic energy density of the
-!  core electrons corresponding to overlapping atoms
-!
-!  LFOUR
-!   .FALSE. set up density in reciprocal space
-!   .TRUE.  set up density in real space
-!
-!***********************************************************************
+      ! restrict everything to spherical contributions only (LASPH=.FALSE.)
+      IF (.NOT.LASPH) THEN
+         LLMAX=1; LMMAX=4; LLMAX_TAU=0; LMMAX_TAU=1; LMMAX_CALC=1
+      ENDIF
 
-      SUBROUTINE TAUATO(LFOUR,GRIDC,T_INFO,B,P,CSTRF,CHTOT,CHDER)
-      USE prec
-      USE mpimy
-      USE mgrid
-      USE poscar
-      USE pseudo
-      USE constant
-      IMPLICIT COMPLEX(q) (C)
+      LMMAX_alloc=(MAX(LLMAX,LLMAX_TAU)+1)**2
 
-      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+!========================================================================
+! number of theta and phi pivot points to perform angular integration
+! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically 
+! needed to integrate Yllmax,m. 
+! the factor 2 is the minium, 3 is more accurate
+!========================================================================
+      PHPTS=PHPTS_FACT*(MAX(LLMAX,LLMAX_TAU)+1)
+      THPTS=THPTS_FACT*FLOOR(REAL(MAX(LLMAX,LLMAX_TAU)/2+1,KIND=q))
+      NPTS=PHPTS*THPTS
+      DELTAPHI=REAL(2_q*PI/PHPTS,KIND=q)
+! allocate arrays
+      ALLOCATE(XYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), & 
+     &     YLM(NPTS,LMMAX_alloc),YLMD(NPTS,LMMAX_alloc,3),YLMDD(NPTS,LMMAX_alloc,6), &
+     &     YLM_NABLA_YLM(LMMAX,LMMAX,0:3),YLM_X_YLM(LMMAX,LMMAX,0:3), &
+     &     RHOLM(R%NMAX,LMMAX,2),RHOLMD(R%NMAX,LMMAX,2))
+      
+      IF (LCALCPOT()) THEN
+         ALLOCATE(dFXC(R%NMAX,LMMAX,0:3,2)); dFXC=0
+         CALL SETYLM_NABLA_YLM(LLMAX,YLM_NABLA_YLM,YLM_X_YLM)
+      ENDIF
+      IF (LCALCMU()) THEN
+         ALLOCATE(dFXCdT(R%NMAX,LMMAX_TAU,2)); dFXCdT=0
+      ENDIF
 
-      TYPE (type_info)   T_INFO
-      TYPE (potcar)      P(T_INFO%NTYP)
-      TYPE (grid_3d)     GRIDC
-      COMPLEX(q)   CHTOT(GRIDC%RC%NP),CHDER(GRIDC%RC%NP)
-      COMPLEX(q)   CSTRF(GRIDC%MPLWV,T_INFO%NTYP)
-      REAL(q)      B(3,3)
-      LOGICAL LFOUR
-      ! local variables
-      REAL(q), POINTER :: PRHO(:)
+      ! set phi positions, equally spaced
+      RADPTS=0; WEIGHT=0; ABSCIS=0
+      DO I=1,PHPTS
+         DO J=1,THPTS
+            RADPTS((J-1)*PHPTS+I,2)=(I-1)*DELTAPHI
+         ENDDO
+      ENDDO
+      ! get theta positions (actually get cos(theta)) (Gauss integration)
+      CALL GAUSSI(GAUSSI2,-1._q,1._q,0,THPTS,WEIGHT,ABSCIS,IFAIL)
+      DO I=1,THPTS
+         RADPTS((I-1)*PHPTS+1:I*PHPTS,1)=ABSCIS(I)
+      ENDDO
+      ! convert radial to cartesian coordinates
+      DO I=1,NPTS
+         XYZPTS(I,1)=COS(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! x
+         XYZPTS(I,2)=SIN(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! y
+         XYZPTS(I,3)=RADPTS(I,1)                                 ! z
+      ENDDO
+      
+      ! get |r| Y_lm on a unit sphere and its derivatives
+      YLM=0; YLMD=0; YLMDD=0
+!     CALL SETYLM_GRAD2(LLMAX,NPTS,YLM,YLMD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
+      CALL SETYLM_GRAD3(MAX(LLMAX,LLMAX_TAU),NPTS,YLM,YLMD,YLMDD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
+!========================================================================
+! main loop over all grid points
+! prepare the charge density array RHOT
+!========================================================================
+      DEXC=0
 
-      CHTOT=0
-      CHDER=0
-!=======================================================================
-! loop over all types of atoms
-! if no pseudocharge for this ion next ion
-!=======================================================================
-      typ: DO NT=1,T_INFO%NTYP
-       PRHO=>P(NT)%PSPTAU
-       IF (.NOT.ASSOCIATED(PRHO)) GOTO 200
-!=======================================================================
-! calculate the scaling factor ARGSC that converts the magnitude of a
-! reciprocal lattice vector to the correponding position in the
-! pseudopotential arrays
-!=======================================================================
-      ARGSC=NPSPTS/P(NT)%PSGMAX
-      PSGMA2=P(NT)%PSGMAX-P(NT)%PSGMAX/NPSPTS*3
+      ! loop over all points in the angular grid
+      points: DO NP=1,NPTS
+         ! weight of this points
+         SIM_FAKT=DELTAPHI*WEIGHT((INT((NP-1)/PHPTS)+1))
 
-      DO N=1,GRIDC%RC%NP
-        N1= MOD((N-1),GRIDC%RC%NROW) +1
-        NC= (N-1)/GRIDC%RC%NROW+1
-        N2= GRIDC%RC%I2(NC)
-        N3= GRIDC%RC%I3(NC)
-!=======================================================================
-! calculate the magnitude of the reciprocal lattice vector
-!=======================================================================
-        GX= GRIDC%LPCTX(N1)*B(1,1)+GRIDC%LPCTY(N2)*B(1,2)+GRIDC%LPCTZ(N3)*B(1,3)
-        GY= GRIDC%LPCTX(N1)*B(2,1)+GRIDC%LPCTY(N2)*B(2,2)+GRIDC%LPCTZ(N3)*B(2,3)
-        GZ= GRIDC%LPCTX(N1)*B(3,1)+GRIDC%LPCTY(N2)*B(3,2)+GRIDC%LPCTZ(N3)*B(3,3)
+         RHOT=0
+         RHO_ANG=0
+         TAUU=0; TAUD=0
+
+         ! calculate the total charge RHOT = RHO/r^2 (up and down)
+         ! and the gradient of the charge RHO_ANG
+         DO K=1,R%NMAX
+            DO LM=1,LMMAX_CALC
+               ! total charge
+               RHOT(K,1)=RHOT(K,1)+YLM(NP,LM)*RHO(K,LM,1) ! rho(r) Y_L(r)
+               RHO_ANG(K,1,:)=RHO_ANG(K,1,:)+YLMD(NP,LM,:)*RHO(K,LM,1) ! rho(r) nabla Y_L(r)
+               IF (ISPIN==1) THEN
+               ! LM resolved charge density (up,down)
+                  RHOLM(K,LM,1)=0.5_q*RHO(K,LM,1)/(R%R(K)*R%R(K))
+                  RHOLM(K,LM,2)=0.5_q*RHO(K,LM,1)/(R%R(K)*R%R(K))
+               ! magnetization
+                  RHOT(K,2)=0
+                  RHO_ANG(K,2,:)=0
+               ELSE
+               ! LM resolved charge density (up,down)
+                  RHOLM(K,LM,1)=0.5_q*(RHO(K,LM,1)+RHO(K,LM,2))/(R%R(K)*R%R(K))
+                  RHOLM(K,LM,2)=0.5_q*(RHO(K,LM,1)-RHO(K,LM,2))/(R%R(K)*R%R(K))               
+               ! magnetization
+                  RHOT(K,2)=RHOT(K,2)+YLM(NP,LM)*RHO(K,LM,2)
+                  RHO_ANG(K,2,:)=RHO_ANG(K,2,:)+YLMD(NP,LM,:)*RHO(K,LM,2)              
+               ENDIF
+            ENDDO
+            ! add core charge (spherical) and divide by 1/r^2
+            RHOT(K,1)=(RHOT(K,1)+RHOC(K)*YLM(NP,1))/(R%R(K)*R%R(K))
+!           RHOT(K,1)=(RHOT(K,1))/(R%R(K)*R%R(K))
+            RHOT(K,2)= RHOT(K,2)/(R%R(K)*R%R(K))
+            ! divide nabla Y_L through r^3 (1/r is missing in YLMD)
+            RHO_ANG(K,:,:)=RHO_ANG(K,:,:)/(R%R(K)*R%R(K))/R%R(K)
+            ! add core charge to RHOLM
+            RHOLM(K,1,1)=RHOLM(K,1,1)+0.5_q*RHOC(K)/(R%R(K)*R%R(K))
+            RHOLM(K,1,2)=RHOLM(K,1,2)+0.5_q*RHOC(K)/(R%R(K)*R%R(K))
+
+            DO LM=1,LMMAX_TAU
+               IF (ISPIN==1) THEN
+               ! kinetic energy density
+                  TAUU(K)=TAUU(K)+0.5_q*TAU(K,LM,1)*YLM(NP,LM)/(R%R(K)*R%R(K))
+                  TAUD(K)=TAUU(K)
+               ELSE
+               ! kinetic energy density
+                  TAUU(K)=TAUU(K)+TAU(K,LM,1)*YLM(NP,LM)/(R%R(K)*R%R(K))
+                  TAUD(K)=TAUD(K)+TAU(K,LM,2)*YLM(NP,LM)/(R%R(K)*R%R(K))
+               ENDIF
+            ENDDO
+            ! kinetic energy density of the core electrons
+            IF (PRESENT(TAUC)) THEN
+               TAUU(K)=TAUU(K)+0.5_q*TAUC(K)*YLM(NP,1)/(R%R(K)*R%R(K))
+               TAUD(K)=TAUD(K)+0.5_q*TAUC(K)*YLM(NP,1)/(R%R(K)*R%R(K))
+            ENDIF
+            TAUU(K)=MAX(TAUU(K),TAUMIN)
+            TAUD(K)=MAX(TAUD(K),TAUMIN)
+         ENDDO
 
-        G=SQRT(GX**2+GY**2+GZ**2)*TPI
+         ! d RHOLM / dr
+         DO LM=1,LMMAX_CALC
+            CALL GRAD(R,RHOLM(1:R%NMAX,LM,1),RHOLMD(1:R%NMAX,LM,1))
+            CALL GRAD(R,RHOLM(1:R%NMAX,LM,2),RHOLMD(1:R%NMAX,LM,2))
+         ENDDO         
 
-        IF (G/=0 .AND.G<PSGMA2) THEN
-!=======================================================================
-! convert the magnitude of the reciprocal latice vector to a position
-! in the charge-dens. array  and interpolate the atomic-chargedensity
-!=======================================================================
-          ARG=(G*ARGSC)+1
-          NADDR=MAX(INT(ARG),2)
-          REM=ARG-NADDR
-          V1=PRHO(NADDR-1)
-          V2=PRHO(NADDR)
-          V3=PRHO(NADDR+1)
-          V4=PRHO(NADDR+2)
-          T0=V2
-          T1=((6*V3)-(2*V1)-(3*V2)-V4)/6._q
-          T2=(V1+V3-(2*V2))/2._q
-          T3=(V4-V1+(3*(V2-V3)))/6._q
-          CHTOT(N)=CHTOT(N)+(T0+REM*(T1+REM*(T2+REM*T3))) *CSTRF(N,NT)
-          CHDER(N)=CHDER(N)+(T1+REM*(2*T2+REM*3*T3))*ARGSC*CSTRF(N,NT)
-        ELSE IF (G==0) THEN
-          CHTOT(N)=CHTOT(N)+PRHO(1)*CSTRF(N,NT)
-          CHDER(N)=0
-        ENDIF
-      ENDDO
-  200 CONTINUE
-      ENDDO typ
-!=======================================================================
-! set the charge-density of unbalanced lattice-vectors to 0
-! and transform the charge-density to real space
-!=======================================================================
-      CALL SETUNB(CHTOT(1),GRIDC)
-      CALL SETUNB(CHDER(1),GRIDC)
+         DO K=1,R%NMAX
+            TEMP1=RHOT(K,1)
+            RHOT(K,1)=(RHOT(K,1)+RHOT(K,2))/2    ! spin up
+            RHOT(K,2)=(TEMP1-RHOT(K,2))/2        ! spin down
+            
+            RHOT(K,1)=MAX(RHOT(K,1), CHGMIN)
+            RHOT(K,2)=MAX(RHOT(K,2), CHGMIN)
+         ENDDO
 
-      IF (LFOUR) THEN
-        CALL FFT3D(CHTOT,GRIDC,1)
-      ENDIF
+         ! d rhot / dr (up,down)
+         CALL GRAD(R,RHOT,T1)
+         CALL GRAD(R,RHOT(1:R%NMAX,2),T1(1:R%NMAX,2))
+         ! d^2 rhot / dr^2 (up,down)
+         CALL GRAD(R,T1,T2)
+         CALL GRAD(R,T1(1:R%NMAX,2),T2(1:R%NMAX,2))
 
-      RETURN
-      END SUBROUTINE TAUATO
+         DO K=1,R%NMAX
+            ! calculate the laplacian of the density
+            LAPLUP=0; LAPLDW=0
+            DO LM=1,LMMAX_CALC
+               LAPLUP=LAPLUP+ &
+              &    YLMDD(NP,LM,1)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,1)*XYZPTS(NP,1)+YLMD(NP,LM,1)*XYZPTS(NP,1))/R%R(K)*RHOLMD(K,LM,1) &
+              &   +YLMDD(NP,LM,4)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,2)*XYZPTS(NP,2)+YLMD(NP,LM,2)*XYZPTS(NP,2))/R%R(K)*RHOLMD(K,LM,1) &
+              &   +YLMDD(NP,LM,6)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,3)*XYZPTS(NP,3)+YLMD(NP,LM,3)*XYZPTS(NP,3))/R%R(K)*RHOLMD(K,LM,1)
+               LAPLDW=LAPLDW+ &
+              &    YLMDD(NP,LM,1)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,1)*XYZPTS(NP,1)+YLMD(NP,LM,1)*XYZPTS(NP,1))/R%R(K)*RHOLMD(K,LM,2) &
+              &   +YLMDD(NP,LM,4)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,2)*XYZPTS(NP,2)+YLMD(NP,LM,2)*XYZPTS(NP,2))/R%R(K)*RHOLMD(K,LM,2) &
+              &   +YLMDD(NP,LM,6)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
+              &   +(YLMD(NP,LM,3)*XYZPTS(NP,3)+YLMD(NP,LM,3)*XYZPTS(NP,3))/R%R(K)*RHOLMD(K,LM,2)
+            ENDDO
+            
+            LAPLUP=LAPLUP- &
+           &    XYZPTS(NP,1)*XYZPTS(NP,1)/(R%R(K))*T1(K,1)+XYZPTS(NP,1)*XYZPTS(NP,1)*T2(K,1) &
+           &   -XYZPTS(NP,2)*XYZPTS(NP,2)/(R%R(K))*T1(K,1)+XYZPTS(NP,2)*XYZPTS(NP,2)*T2(K,1) &
+           &   -XYZPTS(NP,3)*XYZPTS(NP,3)/(R%R(K))*T1(K,1)+XYZPTS(NP,3)*XYZPTS(NP,3)*T2(K,1) &
+           &   +3*T1(K,1)/R%R(K)
+           
+            LAPLDW=LAPLDW- &
+           &    XYZPTS(NP,1)*XYZPTS(NP,1)/(R%R(K))*T1(K,2)+XYZPTS(NP,1)*XYZPTS(NP,1)*T2(K,2) &
+           &   -XYZPTS(NP,2)*XYZPTS(NP,2)/(R%R(K))*T1(K,2)+XYZPTS(NP,2)*XYZPTS(NP,2)*T2(K,2) &
+           &   -XYZPTS(NP,3)*XYZPTS(NP,3)/(R%R(K))*T1(K,2)+XYZPTS(NP,3)*XYZPTS(NP,3)*T2(K,2) &
+           &   +3*T1(K,2)/R%R(K)
 
+            ! norm of gradient for spin up
+            XU  =T1(K,1)*XYZPTS(NP,1)+(RHO_ANG(K,1,1)+RHO_ANG(K,2,1))/2
+            YU  =T1(K,1)*XYZPTS(NP,2)+(RHO_ANG(K,1,2)+RHO_ANG(K,2,2))/2
+            ZU  =T1(K,1)*XYZPTS(NP,3)+(RHO_ANG(K,1,3)+RHO_ANG(K,2,3))/2
+            T1(K,1)=SQRT(XU*XU+YU*YU+ZU*ZU)
+            ! norm of gradient for spin down
+            XD  =T1(K,2)*XYZPTS(NP,1)+(RHO_ANG(K,1,1)-RHO_ANG(K,2,1))/2
+            YD  =T1(K,2)*XYZPTS(NP,2)+(RHO_ANG(K,1,2)-RHO_ANG(K,2,2))/2
+            ZD  =T1(K,2)*XYZPTS(NP,3)+(RHO_ANG(K,1,3)-RHO_ANG(K,2,3))/2
 
-!************************ SUBROUTINE FORTAU ****************************
-!
-! This subroutine calculates the correction to the Hellmann-Feynman
-! forces due to the (possible) presence of a partial core kinetic energy
-! density
-!
-!***********************************************************************
+            T1(K,2)=SQRT(XD*XD+YD*YD+ZD*ZD)
+!           TG=T1(K,1)+T1(K,2) incorrect definition
+            TG=SQRT((XU+XD)**2+(YU+YD)**2+(ZU+ZD)**2)
+            
+            T1(K,1)=MAX(T1(K,1),NABMIN); T1(K,2)=MAX(T1(K,2),NABMIN); TG=MAX(TG,2*NABMIN)
 
-      SUBROUTINE FORTAU(GRIDC,P,T_INFO,LATT_CUR,MUTOT,TAUFOR)
-      USE prec
+            CALL METAGGASPIN(&
+           &   RHOT(K,1)*AUTOA3,RHOT(K,2)*AUTOA3,T1(K,1)*AUTOA4,T1(K,2)*AUTOA4,TG*AUTOA4, &
+           &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU(K)*EVTOH,TAUD(K)*EVTOH, &
+           &   EXT,DEXC1,DEXC2,DVXC1,DVXC2,DVC,MUUP,MUDW)
 
-      USE mpimy
-      USE mgrid
-      USE pseudo
-      USE lattice
-      USE poscar
-      USE constant
-      IMPLICIT COMPLEX(q) (C)
+            CALL SUM_GRHO_OVER_RHO_ONE_CENTER( &
+           &   (RHOT(K,1)+RHOT(K,2)),TG*R%R(K)**2*AUTOA*R%SI(K)*SIM_FAKT)
 
-      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+            DEXC=DEXC+(EXT*RYTOEV)*(RHOT(K,1)+RHOT(K,2))*R%R(K)*R%R(K)*R%SI(K)*SIM_FAKT
 
-      TYPE (grid_3d)     GRIDC
-      TYPE (type_info)   T_INFO
-      TYPE (potcar)      P (T_INFO%NTYP)
-      TYPE (latt)        LATT_CUR
-      COMPLEX(q)   MUTOT(GRIDC%MPLWV)
-      REAL(q)      TAUFOR(3,T_INFO%NIONS)
-      ! work arrays
-      REAL(q), POINTER :: PRHO(:)
-      REAL(q), ALLOCATABLE :: WORK(:)
+            ! develop
+            !             d    f_xc     grad rho
+            !             ------------  --------  = vec dFXC(r)
+            !             d |grad rho| |grad rho|
+            ! into spherical harmonics
+            ! afterwards vec dFXC can be reconstructed using
+            ! dFXC_i(r) =  \sum_L dFXC_Li(r) Y_L(r)
 
-      ALLOCATE(WORK(GRIDC%RC%NP))
-      
-      SCALE=1._q/(RYTOEV*AUTOA2)
+            IF (LCALCPOT()) THEN
+               DEXC1=DEXC1*RYTOEV
+               DEXC2=DEXC2*RYTOEV
+               DVXC1=DVXC1*RYTOEV*AUTOA
+               DVXC2=DVXC2*RYTOEV*AUTOA
+               DVC  =DVC  *RYTOEV*AUTOA
 
-      TAUFOR(1:3,1:T_INFO%NIONS)=0
-!=======================================================================
-! loop over all types of atoms
-!=======================================================================
-      NIS=1
-      typ: DO NT=1,T_INFO%NTYP
-      NIADD=T_INFO%NITYP(NT)
+               DVXC1=DVXC1/ MAX(T1(K,1),NABMIN)
+               DVXC2=DVXC2/ MAX(T1(K,2),NABMIN)
+               DVC  =DVC  / MAX(TG,2*NABMIN)
 
-      PRHO=>P(NT)%PSPTAU
+               DO LM=1,LMMAX
+                  dFXC(K,LM,0,1) = dFXC(K,LM,0,1)+DEXC1*SIM_FAKT*YLM(NP,LM)
+                  dFXC(K,LM,0,2) = dFXC(K,LM,0,2)+DEXC2*SIM_FAKT*YLM(NP,LM)
 
-       IF (.NOT.ASSOCIATED(PRHO)) GOTO 200
-!=======================================================================
-! iterpolate the pseudopotential on the grid of reciprocal
-! lattice-vectors
-!=======================================================================
-      ARGSC=NPSPTS/P(NT)%PSGMAX
-      PSGMA2=P(NT)%PSGMAX-P(NT)%PSGMAX/NPSPTS*3
+                  dFXC(K,LM,1,1) = dFXC(K,LM,1,1)+(XU* DVXC1 + (XU+XD) * DVC)*SIM_FAKT*YLM(NP,LM)
+                  dFXC(K,LM,2,1) = dFXC(K,LM,2,1)+(YU* DVXC1 + (YU+YD) * DVC)*SIM_FAKT*YLM(NP,LM)
+                  dFXC(K,LM,3,1) = dFXC(K,LM,3,1)+(ZU* DVXC1 + (ZU+ZD) * DVC)*SIM_FAKT*YLM(NP,LM)
+                         
+                  dFXC(K,LM,1,2) = dFXC(K,LM,1,2)+(XD* DVXC2 + (XU+XD) * DVC)*SIM_FAKT*YLM(NP,LM)
+                  dFXC(K,LM,2,2) = dFXC(K,LM,2,2)+(YD* DVXC2 + (YU+YD) * DVC)*SIM_FAKT*YLM(NP,LM)
+                  dFXC(K,LM,3,2) = dFXC(K,LM,3,2)+(ZD* DVXC2 + (ZU+ZD) * DVC)*SIM_FAKT*YLM(NP,LM)
+               ENDDO
+            ENDIF
+            
+            IF (LCALCMU()) THEN
+               MUUP=0.5_q*MUUP*RYTOEV*AUTOA2
+               MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
+               DO LM=1,LMMAX_TAU
+                  dFXCdT(K,LM,1) = dFXCdT(K,LM,1)+MUUP*SIM_FAKT*YLM(NP,LM)
+                  dFXCdT(K,LM,2) = dFXCdT(K,LM,2)+MUDW*SIM_FAKT*YLM(NP,LM)
+               ENDDO
+            ENDIF
+         ENDDO
+      ENDDO points
 
-      DO N=1,GRIDC%RC%NP
-        N1= MOD((N-1),GRIDC%RC%NROW) +1
-        NC= (N-1)/GRIDC%RC%NROW+1
-        N2= GRIDC%RC%I2(NC)
-        N3= GRIDC%RC%I3(NC)
+!========================================================================
+!
+! GGA part related to d e_XC / grad n
+!
+! add -\sum_i Y_L  d (dFXC_L'i(x) Y_L'(x))/ d x_i to the potential V_L(r)
+!
+!                          x_i d dFXC_L'i(|x|)
+! -\sum_L'i Y_L(x) Y_L'(x)  -  --------------- + dFXC_L'i(x) Y_L nabla_i Y_L'(x)
+!                          |x|   d |x|     
+!
+!========================================================================
+      IF (LCALCPOT()) THEN
+         DO ISP=1,ISPIN
+            DO LM=1,LMMAX_CALC
+               DO K=1,R%NMAX
+                  POT(K,LM,ISP)=POT(K,LM,ISP)+dFXC(K,LM,0,ISP)
+               ENDDO
+            ENDDO
+         ENDDO
+         ! nabla comment: 
+         ! the matrix elements < Y_L| nabla | Y_L'> are non zero
+         ! for L=L'+-1
+         DO ISP=1,ISPIN
+            DO I=1,3
+               DO LMP=1,LMMAX
+                  CALL GRAD(R,dFXC(1:R%NMAX,LMP,I,ISP),T1(1:R%NMAX,1))
+                  DO LM=1,LMMAX_CALC
+                     IF (ABS(YLM_NABLA_YLM(LM,LMP,I))>1E-4 .OR. ABS(YLM_X_YLM(LM,LMP,I))>1E-4) THEN
+                        DO K=1,R%NMAX
+                           POT(K,LM,ISP)=POT(K,LM,ISP)-( &
+                                dFXC(K,LMP,I,ISP)*YLM_NABLA_YLM(LM,LMP,I)/ R%R(K)+ & 
+                                T1(K,1)*YLM_X_YLM(LM,LMP,I) &
+                              )
+                        ENDDO
+                  ENDIF
+                  ENDDO
+               ENDDO
+            ENDDO
+         ENDDO
+         DEALLOCATE(dFXC)
+      ENDIF
 
-        SETFACT1
-        SETFACT
-!=======================================================================
-! calculate the magnitude of the reciprocal lattice vector
-!=======================================================================
-        GX= GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3)
-        GY= GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3)
-        GZ= GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3)
+      DCMU=0
+      IF (LCALCMU()) THEN
+         DO ISP=1,ISPIN
+            DO LM=1,LMMAX_TAU
+               DO K=1,R%NMAX
+                  MU(K,LM,ISP)=dFXCdT(K,LM,ISP)
+                  DCMU=DCMU+MU(K,LM,ISP)*TAU(K,LM,ISP)*R%SI(K)/HSQDTM
+               ENDDO
+            ENDDO
+         ENDDO
+         DEALLOCATE(dFXcdT)
+      ENDIF
 
-        G=SQRT(GX**2+GY**2+GZ**2)*TPI
+      ! finally calculate the double counting corrections again
+      DVXC=0
+      IF (LCALCPOT()) THEN
+         CALL RAD_POT_IN_RHO(R,ISPIN,LMAX_CALC,RHO,POT,DVXC)
+         DVXC=DVXC-DVINI
+      ENDIF
 
-        IF (G/=0 .AND.G<PSGMA2) THEN
-!=======================================================================
-! convert the magnitude of the reciprocal latice vector to a position
-! in the charge-dens. array  and interpolate the atomic-chargedensity
-!=======================================================================
-          ARG=(G*ARGSC)+1
-          NADDR=MAX(INT(ARG),2)
-          REM=ARG-NADDR
-          V1=PRHO(NADDR-1)
-          V2=PRHO(NADDR)
-          V3=PRHO(NADDR+1)
-          V4=PRHO(NADDR+2)
-          T0=V2
-          T1=((6*V3)-(2*V1)-(3*V2)-V4)/6._q
-          T2=(V1+V3-(2*V2))/2._q
-          T3=(V4-V1+(3*(V2-V3)))/.6_q
-          WORK(N)=T0+REM*(T1+REM*(T2+REM*T3))
-!       ELSE IF (G==0) THEN
-!         WORK(N)=PRHO(1)
-        ELSE
-          WORK(N)=0
-        ENDIF
+      IF (LCALCMU()) THEN
+         DVXC=DVXC+DCMU
+!        WRITE(*,'(A,F24.14)') 'dcmu =',DCMU
+      ENDIF
 
-      ENDDO
+      DEALLOCATE(YLM,YLMD,YLMDD,XYZPTS,RADPTS,YLM_NABLA_YLM,YLM_X_YLM,WEIGHT,ABSCIS,RHOLM,RHOLMD)
+      
+      RETURN
+      END SUBROUTINE RAD_METAGGA_XC
 
-      ion: DO NI=NIS,NIADD+NIS-1
-!=======================================================================
-! initialise the force on the ion to zero
-!=======================================================================
-         FOR1=0._q
-         FOR2=0._q
-         FOR3=0._q
-!=======================================================================
-! calculate the total force on the ions by summing over reciprocal
-! lattice vectors
-! first calculate phase factor:
-! there are two version for calculating the phase factor
-! on vector machines you might try the first version
-! but usually the second version is much faster (less calls to CEXP)
-!=======================================================================
-#ifdef vector
-         DO NG=1,GRIDC%RC%NP
 
-           N1= MOD((NG-1),GRIDC%RC%NROW) +1
-           NC= (NG-1)/GRIDC%RC%NROW+1
-           N2= GRIDC%RC%I2(NC)
-           N3= GRIDC%RC%I3(NC)
+!********************* SUBROUTINE RAD_PROJ_METAGGA *********************
+!
+!***********************************************************************
+      SUBROUTINE RAD_PROJ_METAGGA(&
+     &   P,W,LMAX_TAU,MU,A,DLLMM)
+      USE prec
+      USE asa
+      USE pseudo
+      USE radial
+      USE constant
+      USE paw
+      IMPLICIT NONE
+      TYPE (potcar) P
+      INTEGER LMAX_TAU
+      REAL(q) A
+      REAL(q) W(:,:)
+      REAL(q) MU(:,:,:)
+      OVERLAP DLLMM(:,:,:)
+      ! local variables
+      INTEGER ISP,I,K,Ch1,Ch2
+      INTEGER LLMAX_TAU,LMMAX_TAU,LM,LMP,LL,LLP,M,MP,MPLOW,INDYLM,INDYLMP
 
-           G1=T_INFO%POSION(1,NI)*GRIDC%LPCTX(N1)
-           G2=T_INFO%POSION(2,NI)*GRIDC%LPCTY(N2)
-           G3=T_INFO%POSION(3,NI)*GRIDC%LPCTZ(N3)
-           SETFACT1
-           SETFACT
-           CEXPF=EXP(-CITPI*(G3+G2+G1))*T_INFO%VCA(NT)
-#else
-         CX =EXP(-CITPI*T_INFO%POSION(1,NI))
-         G1 =T_INFO%POSION(1,NI)*xmin(GRIDC%NGX)
+      REAL(q) SUM
+      REAL(q) W1(P%R%NMAX),W2(P%R%NMAX),DW1(P%R%NMAX),DW2(P%R%NMAX)
+      REAL(q), ALLOCATABLE :: TAU(:,:)      
 
-         DO NC=1,GRIDC%RC%NCOL
-           NGP=(NC-1)*GRIDC%RC%NROW+1
+      ! quick return if possible
+      IF ((.NOT.LDO_METAGGA()).OR.(.NOT.LCALCMU())) RETURN
 
-           N2= GRIDC%RC%I2(NC)
-           N3= GRIDC%RC%I3(NC)
-           G2=T_INFO%POSION(2,NI)*GRIDC%LPCTY(N2)
-           G3=T_INFO%POSION(3,NI)*GRIDC%LPCTZ(N3)
-           CE=EXP(-CITPI*(G3+G2+G1))*T_INFO%VCA(NT)
+      ! non-collinear magnetism
+!     IF (SIZE(DLLMM,3)==4) THEN
+!        WRITE(*,*) 'RAD_PROJ_METAGGA: internal error; non-collinear case not supported (yet).'
+!        STOP
+!     ENDIF
+            
+      ! check consistency
+      LMMAX_TAU=(LMAX_TAU+1)**2
+      IF (SIZE(MU,2)<LMMAX_TAU) THEN
+         WRITE(*,*) 'RAD_PROJ_METAGGA: ERROR, size(MU,2)<LMMAX_TAU',SIZE(MU,2),LMMAX_TAU
+         STOP
+      ENDIF
+      
+      ! restriction for the angular development of \tau and \mu
+      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
 
-           DO N1P=0,GRIDC%RC%NROW-1
-           SETN1fromN1P
-           NG=NGP+N1
-           N1=N1+1
-           SETFACT1
-           SETFACT
-           CEXPF=CE
-           CE=CE*CX
-#endif
-!=======================================================================
-! add the contribution to the force from the present reciprocal lattice
-! vector  and multiply by i (ie take imaginary part)
-!=======================================================================
-           FOR=WORK(NG)*MULFACT AIMAG(CONJG(MUTOT(NG))*CEXPF)
+      ALLOCATE(TAU(P%R%NMAX,LMMAX_TAU))
+      
+      ! loops over channels (l,epsilon)
+      LM=1; DO Ch1=1,P%LMAX
 
-           FOR1=FOR1-GRIDC%LPCTX_(N1)*FOR
-           FOR2=FOR2-GRIDC%LPCTY_(N2)*FOR
-           FOR3=FOR3-GRIDC%LPCTZ_(N3)*FOR
+      ! d(w1/r)/dr
+      W1(:)=W(:,Ch1)/P%R%R(:); CALL GRAD(P%R,W1,DW1)
+      
+      LMP=LM; DO Ch2=Ch1,P%LMAX
+      ! d(w2/r)/dr
+      W2(:)=W(:,Ch2)/P%R%R(:); CALL GRAD(P%R,W2,DW2)
+      
+         LL=P%LPS(Ch1); LLP=P%LPS(Ch2)
+         DO M=1,2*LL+1
+         MPLOW=1; IF(Ch1==Ch2) MPLOW=M
+         DO MP=MPLOW,2*LLP+1
+            INDYLM= LL**2 +M
+            INDYLMP=LLP**2+MP
+
+            TAU=0
+               
+            DO I=1,LMMAX_TAU
+               TAU(:,I)=TAU(:,I)+ &
+              &   (DW1(:)*X_YLM_X_YLM(INDYLM,INDYLMP,I)*DW2(:)*P%R%R(:)*P%R%R(:) + &
+              &    DW1(:)*X_YLM_YLMD(INDYLM,INDYLMP,I)*W2(:)*P%R%R(:) + &
+              &    W1(:)*X_YLM_YLMD(INDYLMP,INDYLM,I)*DW2(:)*P%R%R(:) + &
+              &    W1(:)*YLMD_YLMD(INDYLM,INDYLMP,I)*W2(:))
+            ENDDO
+            
+            DO ISP=1,SIZE(DLLMM,3)
+               SUM=0
+               DO I=1,LMMAX_TAU
+                  ! Integrate over r (Simpson integration)
+                  DO K=1,P%R%NMAX
+                     SUM=SUM+MU(K,I,ISP)*TAU(K,I)*P%R%SI(K)
+                  ENDDO
+               ENDDO
+               DLLMM(LM+M-1,LMP+MP-1,ISP)=DLLMM(LM+M-1,LMP+MP-1,ISP)+A*SUM
+               DLLMM(LMP+MP-1,LM+M-1,ISP)=DLLMM(LM+M-1,LMP+MP-1,ISP)
+            ENDDO
+            
          ENDDO
-#ifndef vector
          ENDDO
-#endif
-!=======================================================================
-! multiply forces by 2*Pi
-!=======================================================================
-         TAUFOR(1,NI)=FOR1*TPI*SCALE
-         TAUFOR(2,NI)=FOR2*TPI*SCALE
-         TAUFOR(3,NI)=FOR3*TPI*SCALE
+      LMP=LMP+2*LLP+1
+      ENDDO
+      LM =LM +2*LL +1
+      ENDDO
 
-      ENDDO ion
-  200 NIS=NIS+NIADD
-      ENDDO typ
-!=======================================================================
-! forces are now in the reciprocal lattice transform it to
-! cartesian coordinates
-!=======================================================================
-      CALLMPI( M_sum_d(GRIDC%COMM,TAUFOR(1,1),T_INFO%NIONS*3))
-      CALL DIRKAR(T_INFO%NIONS,TAUFOR,LATT_CUR%B)
-      DEALLOCATE(WORK)
+!     CALL DUMP_DLLMM( "NABLA-MU-NABLA",DLLMM(:,:,1),P)
+
+      DEALLOCATE(TAU)
 
       RETURN
-      END SUBROUTINE FORTAU
+      END SUBROUTINE RAD_PROJ_METAGGA
 
 
-!******************** SUBROUTINE RAD_KINEDEN ***************************
+!********************* SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA ******
 !
 !***********************************************************************
-      SUBROUTINE RAD_KINEDEN(&
-     &   P,W,LMAX_TAU,NCDIJ,COCC,TAU)
+      SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA(LLMAX)
       USE prec
       USE asa
       USE radial
       USE constant
       USE pseudo
       IMPLICIT NONE
-      TYPE (potcar) P
-      REAL(q) W(:,:)
-      INTEGER LMAX_TAU,NCDIJ
-      OVERLAP COCC(:,:,:)
-      REAL(q) TAU(:,:,:)
+      INTEGER LLMAX
       ! local variables
-      INTEGER ISP,I,Ch1,Ch2
-      INTEGER LLMAX_TAU,LMMAX_TAU,LM,LMP,LL,LLP,M,MP,MPLOW,INDYLM,INDYLMP
+      INTEGER I,J,Ch1,Ch2
+      INTEGER IFAIL,PHPTS,THPTS,NPTS,NP
+      INTEGER LMMAX,LLMAX_TAU,LMMAX_TAU
+      INTEGER LM,LMP,LL,LLP,M,MP,INDYLM,INDYLMP
+
+      REAL(q), ALLOCATABLE :: RADPTS(:,:), XYZPTS(:,:)
+      REAL(q), ALLOCATABLE :: YLM(:,:),YLMD(:,:,:)
+      REAL(q), ALLOCATABLE :: WEIGHT(:),ABSCIS(:)
+
+      REAL(q) DELTAPHI,SIM_FAKT
+      EXTERNAL GAUSSI2
+
+      ! quick return if possible
+      IF (.NOT.LDO_METAGGA()) RETURN
+     
+      IF (ALLOCATED(X_YLM_X_YLM).AND.ALLOCATED(YLMD_YLMD).AND.ALLOCATED(X_YLM_YLMD)) RETURN
+
+      LMMAX=(LLMAX+1)**2
+      LLMAX_TAU=MIN(2*LLMAX+2,LMAXTAU); LMMAX_TAU=(LLMAX_TAU+1)**2
+      
+      IF (ALLOCATED(X_YLM_X_YLM)) DEALLOCATE(X_YLM_X_YLM)
+      ALLOCATE(X_YLM_X_YLM(LMMAX,LMMAX,LMMAX_TAU)); X_YLM_X_YLM=0
+
+      IF (ALLOCATED(YLMD_YLMD)) DEALLOCATE(YLMD_YLMD)
+      ALLOCATE(YLMD_YLMD(LMMAX,LMMAX,LMMAX_TAU)); YLMD_YLMD=0
+
+      IF (ALLOCATED(X_YLM_YLMD)) DEALLOCATE(X_YLM_YLMD)
+      ALLOCATE(X_YLM_YLMD(LMMAX,LMMAX,LMMAX_TAU)); X_YLM_YLMD=0
+
+
+!========================================================================
+! number of theta and phi pivot points to perform angular integration
+! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically 
+! needed to integrate Yllmax,m. 
+! the factor 2 is the minium, 3 is more accurate
+!========================================================================
+      PHPTS=PHPTS_FACT*(MAX(LLMAX,LLMAX_TAU)+1)
+      THPTS=THPTS_FACT*FLOOR(REAL(MAX(LLMAX,LLMAX_TAU)/2+1,KIND=q))
+      NPTS=PHPTS*THPTS
+      DELTAPHI=REAL(2_q*PI/PHPTS,KIND=q)
+! allocate arrays
+      ALLOCATE(XYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), & 
+     &     YLM(NPTS,MAX(LMMAX,LMMAX_TAU)),YLMD(NPTS,MAX(LMMAX,LMMAX_TAU),3))
+      
+      ! set phi positions, equally spaced
+      RADPTS=0; WEIGHT=0; ABSCIS=0
+      DO I=1,PHPTS
+         DO J=1,THPTS
+            RADPTS((J-1)*PHPTS+I,2)=(I-1)*DELTAPHI
+         ENDDO
+      ENDDO
+     ! get theta positions (actually get cos(theta)) (Gauss integration)
+      CALL GAUSSI(GAUSSI2,-1._q,1._q,0,THPTS,WEIGHT,ABSCIS,IFAIL)
+      DO I=1,THPTS
+         RADPTS((I-1)*PHPTS+1:I*PHPTS,1)=ABSCIS(I)
+      ENDDO
+      ! convert radial to cartesian coordinates
+      DO I=1,NPTS
+         XYZPTS(I,1)=COS(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! x
+         XYZPTS(I,2)=SIN(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! y
+         XYZPTS(I,3)=RADPTS(I,1)                                 ! z
+      ENDDO
 
-      REAL(q) FAKT
-      REAL(q) W1(P%R%NMAX),W2(P%R%NMAX),DW1(P%R%NMAX),DW2(P%R%NMAX)
+      ! get |r| Y_lm on a unit sphere and its derivatives
+      YLM=0; YLMD=0
+      CALL SETYLM_GRAD2(MAX(LLMAX,LLMAX_TAU),NPTS,YLM,YLMD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
 
-      TAU=0
+      ! loop over all points in the angular grid
+      points: DO NP=1,NPTS
 
-      ! quick return if possible
-      IF (.NOT.LDO_METAGGA()) RETURN
-                  
-      ! check consistency
-      LMMAX_TAU=(LMAX_TAU+1)**2
-      IF (SIZE(TAU,2)<LMMAX_TAU) THEN
-         WRITE(*,*) 'RAD_KINEDEN: ERROR, size(TAU,2)<LMMAX_TAU',SIZE(TAU,2),LMMAX_TAU
-         STOP
-      ENDIF
-      
-      ! restriction for the angular development of \tau and \mu
-      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
+         ! weight of this points
+         SIM_FAKT=DELTAPHI*WEIGHT((INT((NP-1)/PHPTS)+1))
 
-      spin: DO ISP=1,NCDIJ
-         
          ! loops over channels (l,epsilon)
-         LM=1; DO Ch1=1,P%LMAX
-         ! d(w1/r)/dr
-         W1(:)=W(:,Ch1)/P%R%R(:); CALL GRAD(P%R,W1,DW1)
-         
-         LMP=LM; DO Ch2=Ch1,P%LMAX
-         ! d(w2/r)/dr
-         W2(:)=W(:,Ch2)/P%R%R(:); CALL GRAD(P%R,W2,DW2)
-         
-            LL=P%LPS(Ch1); LLP=P%LPS(Ch2)
+         DO LL =0,LLMAX
+         DO LLP=0,LLMAX
+
             DO M=1,2*LL+1
-            MPLOW=1; IF(Ch1==Ch2) MPLOW=M
-            DO MP=MPLOW,2*LLP+1
+            DO MP=1,2*LLP+1
                INDYLM= LL**2 +M
                INDYLMP=LLP**2+MP
-
-               FAKT=REAL(COCC(LM+M-1,LMP+MP-1,ISP)+COCC(LMP+MP-1,LM+M-1,ISP),q)
-               IF ((LM+M-1)==(LMP+MP-1)) THEN
-                  FAKT=REAL(COCC(LM+M-1,LMP+MP-1,ISP),q)
-               ENDIF
-               
                DO I=1,LMMAX_TAU
-                  TAU(:,I,ISP)=TAU(:,I,ISP)+FAKT*&
-                 &   (DW1(:)*X_YLM_X_YLM(INDYLM,INDYLMP,I)*DW2(:)*P%R%R(:)*P%R%R(:) + &
-                 &    DW1(:)*X_YLM_YLMD(INDYLM,INDYLMP,I)*W2(:)*P%R%R(:) + &
-                 &    W1(:)*X_YLM_YLMD(INDYLMP,INDYLM,I)*DW2(:)*P%R%R(:) + &
-                 &    W1(:)*YLMD_YLMD(INDYLM,INDYLMP,I)*W2(:))
+                  X_YLM_X_YLM(INDYLM,INDYLMP,I)=X_YLM_X_YLM(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
+                 &   (XYZPTS(NP,1)*XYZPTS(NP,1)+XYZPTS(NP,2)*XYZPTS(NP,2)+XYZPTS(NP,3)*XYZPTS(NP,3))* & 
+                 &   YLM(NP,INDYLM)*YLM(NP,INDYLMP)
+                  X_YLM_YLMD(INDYLM,INDYLMP,I)=X_YLM_YLMD(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
+                 &   (XYZPTS(NP,1)*YLMD(NP,INDYLMP,1)+XYZPTS(NP,2)*YLMD(NP,INDYLMP,2)+XYZPTS(NP,3)*YLMD(NP,INDYLMP,3))* &
+                 &   YLM(NP,INDYLM)
+                  YLMD_YLMD(INDYLM,INDYLMP,I)=YLMD_YLMD(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
+                 &   (YLMD(NP,INDYLM,1)*YLMD(NP,INDYLMP,1)+YLMD(NP,INDYLM,2)*YLMD(NP,INDYLMP,2)+YLMD(NP,INDYLM,3)*YLMD(NP,INDYLMP,3))
                ENDDO
-                              
             ENDDO
             ENDDO
-         LMP=LMP+2*LLP+1
          ENDDO
-         LM =LM +2*LL +1
          ENDDO
 
-      ENDDO spin
-      
-      TAU=TAU*HSQDTM
+      ENDDO points
 
+      DEALLOCATE(XYZPTS,RADPTS,WEIGHT,ABSCIS,YLM,YLMD)
+      
       RETURN
-      END SUBROUTINE RAD_KINEDEN
+      END SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA
 
 
-!********************* SUBROUTINE RAD_TAU_ATOM *************************
-!
+!******************** FUNCTION IR_MATCH ********************************
+!        
 !***********************************************************************
-      SUBROUTINE RAD_TAU_ATOM( &
-     &   P,W,LMAX_TAU,TAU)
+      FUNCTION IR_MATCH(PP,CHANNEL)
       USE prec
-      USE pseudo
+      USE pseudo 
       IMPLICIT NONE
-      TYPE (potcar) P
-      REAL(q) W(:,:)  
-      REAL(q) TAU(:,:,:)
-      INTEGER LMAX_TAU
+      TYPE(potcar), POINTER :: PP
+      INTEGER CHANNEL
+      INTEGER IR_MATCH
       ! local variables
-      OVERLAP, ALLOCATABLE :: COCC(:,:,:)
-      INTEGER Ch,LM,M,LMMAX_TAU
-
-      ! quick return if possible
-      IF (.NOT.LDO_METAGGA()) RETURN
-                  
-      ! check consistency
-      LMMAX_TAU=(LMAX_TAU+1)**2
-      IF (SIZE(TAU,2)<LMMAX_TAU) THEN
-         WRITE(*,*) 'RAD_TAU_ATOM: ERROR, size(TAU,2)<LMMAX_TAU',SIZE(TAU,2),LMMAX_TAU
-         STOP
-      ENDIF
-      
-      ALLOCATE(COCC(P%LMDIM,P%LMDIM,1))
-      COCC=0
-      
-      LM=1
-      DO Ch=1,P%LMAX
-         DO M=1,2*P%LPS(Ch)+1
-            COCC(LM,LM,1)=P%QATO(Ch,Ch)
-            LM=LM+1
-         ENDDO
+      INTEGER K
+      IR_MATCH=PP%R%NMAX
+      DO K=PP%R%NMAX,1,-1
+         IF (PP%WAE(K,CHANNEL)/=PP%WPS(K,CHANNEL)) EXIT
+         IR_MATCH=K
       ENDDO
-      
-      CALL RAD_KINEDEN(P,W,LMAX_TAU,1,COCC,TAU)
-      
-      DEALLOCATE(COCC)
-      
-      RETURN
-      END SUBROUTINE RAD_TAU_ATOM
+      END FUNCTION IR_MATCH
 
 
-!********************* SUBROUTINE RAD_POT_METAGGA **********************
-!
+!******************** FUNCTION IR_PSMAX ********************************
+!      
 !***********************************************************************
-      SUBROUTINE RAD_POT_METAGGA(&
-     &   R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHO,RHOPS,RHOC,POTC,TAU,POTH,POT,DOUBLEC,EXCG,MU,TAUC)
+      FUNCTION IR_PSMAX(PP)
       USE prec
-      USE constant
-      USE radial
+      USE pseudo
       IMPLICIT NONE
-      TYPE (rgrid) R            
-      INTEGER ISPIN
-      INTEGER LMAX_CALC,LMAX_TAU
-      REAL(q) RHO(:,:,:)     ! charge distribution see above (charge,magnetization)
-      REAL(q) RHOPS(:,:,:)   ! same as above (but possibly without augmentation)
-      REAL(q) RHOC(:)        ! core charge distribution
-      REAL(q) POTC(:)        ! frozen core potential (Hartree)
-      REAL(q) TAU(:,:,:)     ! kinetic energy density (up,down)
-      REAL(q) POTH(:,:,:)    ! Hartree potential (up,down)
-      REAL(q) POT(:,:,:)     ! Total potential (up,down)
-      REAL(q) EXCG           ! exchange energy only
-      REAL(q) DOUBLEC        ! double counting corrections      
-      REAL(q) MU(:,:,:)      ! d e_xc/d tau (up,down)
-      REAL(q), OPTIONAL :: TAUC(:) ! kinetic energy density of the core electrons
-      LOGICAL LASPH
+      TYPE(potcar), POINTER :: PP
+      INTEGER IR_PSMAX
       ! local variables
-      INTEGER N,L,M,LM,K
-      REAL(q) SCALE
-      REAL(q) SUM,DHARTREE
-      REAL(q) DEXC,DVXC
-
-      MU=0
-
-      ! quick return if possible
-      IF (.NOT.LDO_METAGGA()) RETURN
-
-      POT=0; POTH=0
-
-      SCALE=2*SQRT(PI)
-      N=R%NMAX
-
-      ! Hartree contributions 
-      DHARTREE=0
-      DO L=0,LMAX_CALC
-      DO M=0,2*L
-         LM=L*L+M+1
-         CALL RAD_POT_HAR(L,R,POTH(:,LM,1),RHO(:,LM,1),SUM)
-         IF (ISPIN==2) POTH(:,LM,2)=POTH(:,LM,1)
-         DHARTREE=DHARTREE+SUM
-      ENDDO
-      ENDDO
-      DO K=1,N
-         POTH(K,1,1)=POTH(K,1,1)+POTC(K)*SCALE
+      INTEGER K
+      IR_PSMAX=PP%R%NMAX
+      DO K=PP%R%NMAX,2,-1
+         IF ((PP%R%R(K)<PP%PSDMAX).OR.(PP%R%R(K)<PP%PSRMAX)) EXIT
+         IR_PSMAX=K
       ENDDO
-      IF (ISPIN==2) POTH(:,1,2)=POTH(:,1,1)
-
-      ! Exchange-correlation
-      DEXC=0
-      DVXC=0
+      END FUNCTION IR_PSMAX
 
-      POT=POTH
-      
-      IF (PRESENT(TAUC)) THEN
-         CALL RAD_METAGGA_XC(R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHOPS,RHOC,POTC,TAU,DEXC,DVXC,POT,MU,TAUC)
-      ELSE
-         CALL RAD_METAGGA_XC(R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHOPS,RHOC,POTC,TAU,DEXC,DVXC,POT,MU)
-      ENDIF
 
-      EXCG=DEXC
-      DOUBLEC=-DHARTREE/2+DEXC-DVXC
-#ifdef debug
-      WRITE(*,1)  DHARTREE/2+DEXC, DOUBLEC 
-1     FORMAT('  Hartree + exc, -Hartree + exc -vxc',6F14.7)
-#endif
-      
-      RETURN
-      END SUBROUTINE RAD_POT_METAGGA     
+!***********************************************************************
+!***********************************************************************
+  END MODULE meta
+!***********************************************************************
+!***********************************************************************
 
 
-!********************* SUBROUTINE RAD_METAGGA_XC ***********************
+!******************** SUBROUTINE FEXCGS_METAGGA_ ***********************
+!
+!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
+! Mind CWORK and DWORK point actually to the same storagelocation
+! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
+! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
+! so we can interchange both arrays arbitrarily
 !
 !***********************************************************************
-      SUBROUTINE RAD_METAGGA_XC(&
-     &   R,ISPIN,LMAX_CALC,LMAX_TAU,LASPH,RHO,RHOC,POTC,TAU,DEXC,DVXC,POT,MU,TAUC)
+
+      SUBROUTINE FEXCGS_METAGGA_(LPOT,LMU,&
+     &   ISPIN,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+     &   CWGRAD,CHTOT,CWORK,CKINEDEN,DWGRAD,DHTOT,DWORK,DKINEDEN, &
+     &   DENCOR,TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,DMUWORK &
+     &)
       USE prec
-      USE asa
-      USE radial
+      USE lattice
+      USE mpimy
+      USE mgrid
       USE constant
       USE metalib
+      USE setxcmeta
+
+      IMPLICIT COMPLEX(q) (C)
+
+      IMPLICIT REAL(q) (A-B,D-H,O-Z)
 
-      IMPLICIT NONE
-      TYPE (rgrid) :: R
-      INTEGER ISPIN
-      INTEGER LMAX_CALC,LMAX_TAU
-      REAL(q) RHOC(:)        ! core charge distribution
-      REAL(q) POTC(:)        ! frozen core potential (Hartree)
-      REAL(q) RHO(:,:,:)     ! charge distribution see above (charge,magnetization)
-      REAL(q) TAU(:,:,:)     ! kinetic energy density (up,down)
-      REAL(q) DEXC, DVXC
-      REAL(q) POT(:,:,:)     ! potential (up,down)
-      REAL(q) MU(:,:,:)      ! d e_xc/d tau (up,down)
-      REAL(q), OPTIONAL :: TAUC(:) ! kinetic energy density of the core electrons
-      LOGICAL LASPH
-      ! local variables
-      REAL(q) RHOT(R%NMAX,2),RHO_ANG(R%NMAX,2,3),T1(R%NMAX,2),T2(R%NMAX,2)
-      REAL(q) TAUU(R%NMAX),TAUD(R%NMAX)
-      INTEGER ISP,K,I,J,IFAIL
-      INTEGER LM,LMP,LLMAX,LMMAX,LMMAX_alloc,LMMAX_CALC,LLMAX_TAU,LMMAX_TAU
-      INTEGER NP,PHPTS,THPTS,NPTS
-      REAL(q) SCALE,SUM,DELTAPHI,EVTOH
+      TYPE (grid_3d)     GRIDC
+      TYPE (latt)        LATT_CUR
 
-      REAL(q) DVINI,DCMU
+      LOGICAL LPOT,LMU
 
-      REAL(q) SIM_FAKT
-      REAL(q) TEMP1
-      REAL(q), ALLOCATABLE :: RADPTS(:,:), XYZPTS(:,:)
-      REAL(q), ALLOCATABLE :: YLM(:,:),YLMD(:,:,:),YLMDD(:,:,:)
-      REAL(q), ALLOCATABLE :: YLM_NABLA_YLM(:,:,:),YLM_X_YLM(:,:,:)
-      REAL(q), ALLOCATABLE :: dFXC(:,:,:,:),dFXCdT(:,:,:)
-      REAL(q), ALLOCATABLE :: WEIGHT(:),ABSCIS(:)
-      REAL(q), ALLOCATABLE :: RHOLM(:,:,:), RHOLMD(:,:,:)
+      COMPLEX(q) CWGRAD(GRIDC%MPLWV,ISPIN),CHTOT(GRIDC%MPLWV,ISPIN), &
+     &   CKINEDEN(GRIDC%MPLWV,ISPIN),CWORK(GRIDC%MPLWV,ISPIN)
+      RGRID DWGRAD(DIMREAL(GRIDC%MPLWV),ISPIN),DHTOT(DIMREAL(GRIDC%MPLWV),ISPIN), &
+     &   DKINEDEN(DIMREAL(GRIDC%MPLWV),ISPIN),DWORK(DIMREAL(GRIDC%MPLWV),ISPIN)
+              
+      RGRID DENCOR(GRIDC%RL%NP),TAUC(GRIDC%RL%NP)
+      REAL(q) XCSIF(3,3)
+      REAL(q) DWORKG(GRIDC%RL%NP,ISPIN),DWORK1(GRIDC%RL%NP,ISPIN), &
+     &   DWORK2(GRIDC%RL%NP,ISPIN),DWORK3(GRIDC%RL%NP,ISPIN),DVC(GRIDC%RL%NP)
 
-      REAL(q) XU,YU,ZU,XD,YD,ZD
-      REAL(q) TG,LAPLUP,LAPLDW,MUUP,MUDW
-      REAL(q) EXT,DEXC1,DEXC2,DVXC1,DVXC2,DVC
-      REAL(q) TMP(ISPIN,3)
-      EXTERNAL GAUSSI2
+      RGRID  DMUWORK(DIMREAL(GRIDC%MPLWV),ISPIN)
 
-      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-10_q, LAPMIN=1E-10_q
+      REAL(q) LAPLUP,LAPLDW,LAPLACIAN(GRIDC%RL%NP,ISPIN)
+      REAL(q) MUUP,MUDW,EDCMU,MU1
+      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-9_q, LAPMIN=1E-10_q
 
-      ! initial double counting corrections
-      DVINI=0
-      IF (LCALCPOT()) THEN
-         CALL RAD_POT_IN_RHO(R,ISPIN,LMAX_CALC,RHO,POT,DVINI)
-      ENDIF
-      
-      SCALE=2*SQRT(PI) ! 1/Y00
-      
-      EVTOH=1._q/(2.*HSQDTM)*AUTOA5
-      
-      LMMAX_CALC=(LMAX_CALC+1)**2
-      ! restriction for the angular development of \rho
-      LLMAX=MIN(6,LMAX_CALC)
-      ! in GGA this needs to be increased by 1 (nabla-comment)
-      LLMAX=LLMAX+1; LMMAX=(LLMAX+1)**2
-      
-      ! restriction for the angular development of \tau and \mu
-      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
+#ifdef debug2
+      INTEGER, SAVE :: I_DBG=0
+      REAL(Q) MU_DBG,TAU_DBG
+#endif
+     
+! set to one for error-dumps
+#ifdef MPI
+      NODE_ME=GRIDC%COMM%NODE_ME
+      IONODE =GRIDC%COMM%IONODE
+      IDUMP=0
+#ifdef debug
+      IF (NODE_ME==IONODE) IDUMP=1
+#endif
+#else
+      IDUMP=0
+#ifdef debug
+      IDUMP=1
+#endif
+#endif
 
-      ! restrict everything to spherical contributions only (LASPH=.FALSE.)
-      IF (.NOT.LASPH) THEN
-         LLMAX=1; LMMAX=4; LLMAX_TAU=0; LMMAX_TAU=1; LMMAX_CALC=1
-      ENDIF
+      LAPLACIAN=0
 
-      LMMAX_alloc=(MAX(LLMAX,LLMAX_TAU)+1)**2
+      RINPL=1._q/GRIDC%NPLWV                    ! Scaling of Energy
+      EVTOH=1._q/(2.*HSQDTM)*AUTOA5             ! KinEDens eV to Hartree
 
-!========================================================================
-! number of theta and phi pivot points to perform angular integration
-! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically 
-! needed to integrate Yllmax,m. 
-! the factor 2 is the minium, 3 is more accurate
-!========================================================================
-      PHPTS=PHPTS_FACT*(MAX(LLMAX,LLMAX_TAU)+1)
-      THPTS=THPTS_FACT*FLOOR(REAL(MAX(LLMAX,LLMAX_TAU)/2+1,KIND=q))
-      NPTS=PHPTS*THPTS
-      DELTAPHI=REAL(2_q*PI/PHPTS,KIND=q)
-! allocate arrays
-      ALLOCATE(XYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), & 
-     &     YLM(NPTS,LMMAX_alloc),YLMD(NPTS,LMMAX_alloc,3),YLMDD(NPTS,LMMAX_alloc,6), &
-     &     YLM_NABLA_YLM(LMMAX,LMMAX,0:3),YLM_X_YLM(LMMAX,LMMAX,0:3), &
-     &     RHOLM(R%NMAX,LMMAX,2),RHOLMD(R%NMAX,LMMAX,2))
-      
-      IF (LCALCPOT()) THEN
-         ALLOCATE(dFXC(R%NMAX,LMMAX,0:3,2)); dFXC=0
-         CALL SETYLM_NABLA_YLM(LLMAX,YLM_NABLA_YLM,YLM_X_YLM)
-      ENDIF
-      IF (LCALCMU()) THEN
-         ALLOCATE(dFXCdT(R%NMAX,LMMAX_TAU,2)); dFXCdT=0
-      ENDIF
+!=======================================================================
+! First phase: Transform DENCOR (core charge) and
+!  CHTOT (pseudo chargedensity) to real space
+!=======================================================================
+    spin: DO ISP=1,ISPIN
+      ! set CWORK to total real charge in reciprocal space
+      DO I=1,GRIDC%RL%NP
+         DWORK(I,ISP)=(DENCOR(I)/ISPIN+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
-      ! set phi positions, equally spaced
-      RADPTS=0; WEIGHT=0; ABSCIS=0
-      DO I=1,PHPTS
-         DO J=1,THPTS
-            RADPTS((J-1)*PHPTS+I,2)=(I-1)*DELTAPHI
-         ENDDO
+!=======================================================================
+! now calculate the gradient of the chargedensity
+!=======================================================================
+      DO  I=1,GRIDC%RC%NP
+        CWGRAD(I,ISP)=CWORK(I,ISP)
       ENDDO
-      ! get theta positions (actually get cos(theta)) (Gauss integration)
-      CALL GAUSSI(GAUSSI2,-1._q,1._q,0,THPTS,WEIGHT,ABSCIS,IFAIL)
-      DO I=1,THPTS
-         RADPTS((I-1)*PHPTS+1:I*PHPTS,1)=ABSCIS(I)
+! x-component:
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
+       ENDDO
+! GRAD_x in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
       ENDDO
-      ! convert radial to cartesian coordinates
-      DO I=1,NPTS
-         XYZPTS(I,1)=COS(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! x
-         XYZPTS(I,2)=SIN(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! y
-         XYZPTS(I,3)=RADPTS(I,1)                                 ! z
+
+! y-component:
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
+      ENDDO
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
+      ENDDO
+! grad_y in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+      ENDDO
+
+! z-component:
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
+      ENDDO
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
+      ENDDO
+! grad_z in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+      ENDDO
+
+! Compute the laplacian of the density
+      DO IDIR=1,3  
+         DO I=1,GRIDC%RC%NP  ! loop over all grid points NP in the reciprocal (RC) grid
+            ! index of grid point along three reciprocal lattice vectors (N1, N2, N3)
+            N1= MOD((I-1),GRIDC%RC%NROW) +1
+            NC= (I-1)/GRIDC%RC%NROW+1
+            N2= GRIDC%RC%I2(NC)
+            N3= GRIDC%RC%I3(NC)
+            ! convert to lattice vector component in direction x, y or z (corresponding to index J)
+            GG=(GRIDC%LPCTX(N1)*LATT_CUR%B(IDIR,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(IDIR,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(IDIR,3))**2
+            CWORK(I,ISP)=(CWGRAD(I,ISP))*GG*CITPI*CITPI
+            !write(*,*)'xcgrad:cwgrad ', CWORK4(I), CWGRAD(I), G1, G2, CITPI
+         ENDDO
+         CALL SETUNB(CWORK(1,ISP),GRIDC)
+         CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+         CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+         DO I=1,GRIDC%RL%NP
+            LAPLACIAN(I,ISP)=LAPLACIAN(I,ISP)+REAL( DWORK(I,ISP) ,KIND=q)
+         ENDDO
       ENDDO
+    
+      ENDDO spin
       
-      ! get |r| Y_lm on a unit sphere and its derivatives
-      YLM=0; YLMD=0; YLMDD=0
-!     CALL SETYLM_GRAD2(LLMAX,NPTS,YLM,YLMD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
-      CALL SETYLM_GRAD3(MAX(LLMAX,LLMAX_TAU),NPTS,YLM,YLMD,YLMDD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
-!========================================================================
-! main loop over all grid points
-! prepare the charge density array RHOT
-!========================================================================
-      DEXC=0
 
-      ! loop over all points in the angular grid
-      points: DO NP=1,NPTS
-         ! weight of this points
-         SIM_FAKT=DELTAPHI*WEIGHT((INT((NP-1)/PHPTS)+1))
+!=======================================================================
+!  grad rho    d    f_xc
+! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
+! |grad rho|   d |grad rho|
+!
+!  MIND: the factor OMEGA is difficult to understand:
+!   1/N sum_r energy_density * rho *OMEGA = Energy
+!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
+!=======================================================================
+      EXC=0; EDCMU=0
+#ifdef debug2
+      OPEN(100+I_DBG)
+      TAU_DBG=0; MU_DBG=0
+#endif
+      DO I=1,GRIDC%RL%NP
+         IF (ISPIN==2) THEN
+         ! Spin-polarized case
+            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+
+            ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
+                          +DWORK3(I,1)*DWORK3(I,1))
 
-         RHOT=0
-         RHO_ANG=0
-         TAUU=0; TAUD=0
+            ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
+                          +DWORK3(I,2)*DWORK3(I,2))
 
-         ! calculate the total charge RHOT = RHO/r^2 (up and down)
-         ! and the gradient of the charge RHO_ANG
-         DO K=1,R%NMAX
-            DO LM=1,LMMAX_CALC
-               ! total charge
-               RHOT(K,1)=RHOT(K,1)+YLM(NP,LM)*RHO(K,LM,1) ! rho(r) Y_L(r)
-               RHO_ANG(K,1,:)=RHO_ANG(K,1,:)+YLMD(NP,LM,:)*RHO(K,LM,1) ! rho(r) nabla Y_L(r)
-               IF (ISPIN==1) THEN
-               ! LM resolved charge density (up,down)
-                  RHOLM(K,LM,1)=0.5_q*RHO(K,LM,1)/(R%R(K)*R%R(K))
-                  RHOLM(K,LM,2)=0.5_q*RHO(K,LM,1)/(R%R(K)*R%R(K))
-               ! magnetization
-                  RHOT(K,2)=0
-                  RHO_ANG(K,2,:)=0
-               ELSE
-               ! LM resolved charge density (up,down)
-                  RHOLM(K,LM,1)=0.5_q*(RHO(K,LM,1)+RHO(K,LM,2))/(R%R(K)*R%R(K))
-                  RHOLM(K,LM,2)=0.5_q*(RHO(K,LM,1)-RHO(K,LM,2))/(R%R(K)*R%R(K))               
-               ! magnetization
-                  RHOT(K,2)=RHOT(K,2)+YLM(NP,LM)*RHO(K,LM,2)
-                  RHO_ANG(K,2,:)=RHO_ANG(K,2,:)+YLMD(NP,LM,:)*RHO(K,LM,2)              
-               ENDIF
-            ENDDO
-            ! add core charge (spherical) and divide by 1/r^2
-            RHOT(K,1)=(RHOT(K,1)+RHOC(K)*YLM(NP,1))/(R%R(K)*R%R(K))
-!           RHOT(K,1)=(RHOT(K,1))/(R%R(K)*R%R(K))
-            RHOT(K,2)= RHOT(K,2)/(R%R(K)*R%R(K))
-            ! divide nabla Y_L through r^3 (1/r is missing in YLMD)
-            RHO_ANG(K,:,:)=RHO_ANG(K,:,:)/(R%R(K)*R%R(K))/R%R(K)
-            ! add core charge to RHOLM
-            RHOLM(K,1,1)=RHOLM(K,1,1)+0.5_q*RHOC(K)/(R%R(K)*R%R(K))
-            RHOLM(K,1,2)=RHOLM(K,1,2)+0.5_q*RHOC(K)/(R%R(K)*R%R(K))
+            ABSNAB= (DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
+                    (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
+                    (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2))
+            ABSNAB=SQRT(ABSNAB)
 
-            DO LM=1,LMMAX_TAU
-               IF (ISPIN==1) THEN
-               ! kinetic energy density
-                  TAUU(K)=TAUU(K)+0.5_q*TAU(K,LM,1)*YLM(NP,LM)/(R%R(K)*R%R(K))
-                  TAUD(K)=TAUU(K)
-               ELSE
-               ! kinetic energy density
-                  TAUU(K)=TAUU(K)+TAU(K,LM,1)*YLM(NP,LM)/(R%R(K)*R%R(K))
-                  TAUD(K)=TAUD(K)+TAU(K,LM,2)*YLM(NP,LM)/(R%R(K)*R%R(K))
-               ENDIF
-            ENDDO
-            ! kinetic energy density of the core electrons
-            IF (PRESENT(TAUC)) THEN
-               TAUU(K)=TAUU(K)+0.5_q*TAUC(K)*YLM(NP,1)/(R%R(K)*R%R(K))
-               TAUD(K)=TAUD(K)+0.5_q*TAUC(K)*YLM(NP,1)/(R%R(K)*R%R(K))
-            ENDIF
-            TAUU(K)=MAX(TAUU(K),TAUMIN)
-            TAUD(K)=MAX(TAUD(K),TAUMIN)
-         ENDDO
+            ABSNABUP=MAX(ABSNABUP,NABMIN)
+            ABSNABDW=MAX(ABSNABDW,NABMIN)
+            ABSNAB=MAX(ABSNAB,2*NABMIN)
+!#define  correlation_ABS_DRHOUP_ABS_DRHOD
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+            ABSNAB=ABSNABUP+ABSNABDW
+#endif
+            ! kinetic energy density
+            TAUU=MAX(REAL(DKINEDEN(I,1)+TAUC(I)/2._q,KIND=q), TAUMIN)
+            TAUD=MAX(REAL(DKINEDEN(I,2)+TAUC(I)/2._q,KIND=q), TAUMIN)
+            
+            ! Laplacian of the density
+            LAPLUP=REAL(LAPLACIAN(I,1),KIND=q)
+            LAPLDW=REAL(LAPLACIAN(I,2),KIND=q)
+         ELSE
+         ! nonspin-polarized case
+         ! up and down-spin variables get half of the total values
+            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I))/2._q/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+            RHO2= RHO1
 
-         ! d RHOLM / dr
-         DO LM=1,LMMAX_CALC
-            CALL GRAD(R,RHOLM(1:R%NMAX,LM,1),RHOLMD(1:R%NMAX,LM,1))
-            CALL GRAD(R,RHOLM(1:R%NMAX,LM,2),RHOLMD(1:R%NMAX,LM,2))
-         ENDDO         
+            ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
+                 +DWORK3(I,1)*DWORK3(I,1))
 
-         DO K=1,R%NMAX
-            TEMP1=RHOT(K,1)
-            RHOT(K,1)=(RHOT(K,1)+RHOT(K,2))/2    ! spin up
-            RHOT(K,2)=(TEMP1-RHOT(K,2))/2        ! spin down
-            
-            RHOT(K,1)=MAX(RHOT(K,1), CHGMIN)
-            RHOT(K,2)=MAX(RHOT(K,2), CHGMIN)
-         ENDDO
+            ABSNABUP= 0.5_q*ABSNAB
+            ABSNABDW= 0.5_q*ABSNAB
 
-         ! d rhot / dr (up,down)
-         CALL GRAD(R,RHOT,T1)
-         CALL GRAD(R,RHOT(1:R%NMAX,2),T1(1:R%NMAX,2))
-         ! d^2 rhot / dr^2 (up,down)
-         CALL GRAD(R,T1,T2)
-         CALL GRAD(R,T1(1:R%NMAX,2),T2(1:R%NMAX,2))
+            ABSNABUP=MAX(ABSNABUP,NABMIN)
+            ABSNABDW=MAX(ABSNABDW,NABMIN)
+            ABSNAB=MAX(ABSNAB,2*NABMIN)
 
-         DO K=1,R%NMAX
-            ! calculate the laplacian of the density
-            LAPLUP=0; LAPLDW=0
-            DO LM=1,LMMAX_CALC
-               LAPLUP=LAPLUP+ &
-              &    YLMDD(NP,LM,1)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,1)*XYZPTS(NP,1)+YLMD(NP,LM,1)*XYZPTS(NP,1))/R%R(K)*RHOLMD(K,LM,1) &
-              &   +YLMDD(NP,LM,4)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,2)*XYZPTS(NP,2)+YLMD(NP,LM,2)*XYZPTS(NP,2))/R%R(K)*RHOLMD(K,LM,1) &
-              &   +YLMDD(NP,LM,6)*RHOLM(K,LM,1)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,3)*XYZPTS(NP,3)+YLMD(NP,LM,3)*XYZPTS(NP,3))/R%R(K)*RHOLMD(K,LM,1)
-               LAPLDW=LAPLDW+ &
-              &    YLMDD(NP,LM,1)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,1)*XYZPTS(NP,1)+YLMD(NP,LM,1)*XYZPTS(NP,1))/R%R(K)*RHOLMD(K,LM,2) &
-              &   +YLMDD(NP,LM,4)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,2)*XYZPTS(NP,2)+YLMD(NP,LM,2)*XYZPTS(NP,2))/R%R(K)*RHOLMD(K,LM,2) &
-              &   +YLMDD(NP,LM,6)*RHOLM(K,LM,2)/(R%R(K)*R%R(K)) &
-              &   +(YLMD(NP,LM,3)*XYZPTS(NP,3)+YLMD(NP,LM,3)*XYZPTS(NP,3))/R%R(K)*RHOLMD(K,LM,2)
-            ENDDO
-            
-            LAPLUP=LAPLUP- &
-           &    XYZPTS(NP,1)*XYZPTS(NP,1)/(R%R(K))*T1(K,1)+XYZPTS(NP,1)*XYZPTS(NP,1)*T2(K,1) &
-           &   -XYZPTS(NP,2)*XYZPTS(NP,2)/(R%R(K))*T1(K,1)+XYZPTS(NP,2)*XYZPTS(NP,2)*T2(K,1) &
-           &   -XYZPTS(NP,3)*XYZPTS(NP,3)/(R%R(K))*T1(K,1)+XYZPTS(NP,3)*XYZPTS(NP,3)*T2(K,1) &
-           &   +3*T1(K,1)/R%R(K)
-           
-            LAPLDW=LAPLDW- &
-           &    XYZPTS(NP,1)*XYZPTS(NP,1)/(R%R(K))*T1(K,2)+XYZPTS(NP,1)*XYZPTS(NP,1)*T2(K,2) &
-           &   -XYZPTS(NP,2)*XYZPTS(NP,2)/(R%R(K))*T1(K,2)+XYZPTS(NP,2)*XYZPTS(NP,2)*T2(K,2) &
-           &   -XYZPTS(NP,3)*XYZPTS(NP,3)/(R%R(K))*T1(K,2)+XYZPTS(NP,3)*XYZPTS(NP,3)*T2(K,2) &
-           &   +3*T1(K,2)/R%R(K)
+            ! kinetic energy density
+            TAUU= MAX(0.5_q*REAL(DKINEDEN(I,1)+TAUC(I),KIND=q), TAUMIN)
+            TAUD= TAUU
 
-            ! norm of gradient for spin up
-            XU  =T1(K,1)*XYZPTS(NP,1)+(RHO_ANG(K,1,1)+RHO_ANG(K,2,1))/2
-            YU  =T1(K,1)*XYZPTS(NP,2)+(RHO_ANG(K,1,2)+RHO_ANG(K,2,2))/2
-            ZU  =T1(K,1)*XYZPTS(NP,3)+(RHO_ANG(K,1,3)+RHO_ANG(K,2,3))/2
-            T1(K,1)=SQRT(XU*XU+YU*YU+ZU*ZU)
-            ! norm of gradient for spin down
-            XD  =T1(K,2)*XYZPTS(NP,1)+(RHO_ANG(K,1,1)-RHO_ANG(K,2,1))/2
-            YD  =T1(K,2)*XYZPTS(NP,2)+(RHO_ANG(K,1,2)-RHO_ANG(K,2,2))/2
-            ZD  =T1(K,2)*XYZPTS(NP,3)+(RHO_ANG(K,1,3)-RHO_ANG(K,2,3))/2
+            ! Laplacian of the density
+            LAPLUP=0.5_q*REAL(LAPLACIAN(I,1),KIND=q)
+            LAPLDW=LAPLUP
+         ENDIF
 
-            T1(K,2)=SQRT(XD*XD+YD*YD+ZD*ZD)
-!           TG=T1(K,1)+T1(K,2) incorrect definition
-            TG=SQRT((XU+XD)**2+(YU+YD)**2+(ZU+ZD)**2)
-            
-            T1(K,1)=MAX(T1(K,1),NABMIN); T1(K,2)=MAX(T1(K,2),NABMIN); TG=MAX(TG,2*NABMIN)
+         ! The CMBJ parameter may depend on the spatial position,
+         ! if so, it is set here to the right entry in CMBJ_AUX
+         CALL SET_CMBJ_PW(I)
 
-            CALL METAGGASPIN(&
-           &   RHOT(K,1)*AUTOA3,RHOT(K,2)*AUTOA3,T1(K,1)*AUTOA4,T1(K,2)*AUTOA4,TG*AUTOA4, &
-           &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU(K)*EVTOH,TAUD(K)*EVTOH, &
-           &   EXT,DEXC1,DEXC2,DVXC1,DVXC2,DVC,MUUP,MUDW)
+         CALL METAGGASPIN(&
+        &   RHO1*AUTOA3,RHO2*AUTOA3,ABSNABUP*AUTOA4,ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
+        &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU*EVTOH,TAUD*EVTOH, &
+        &   EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW)
 
-            CALL SUM_GRHO_OVER_RHO_ONE_CENTER( &
-           &   (RHOT(K,1)+RHOT(K,2)),TG*R%R(K)**2*AUTOA*R%SI(K)*SIM_FAKT)
+         RHO=RHO1+RHO2
 
-            DEXC=DEXC+(EXT*RYTOEV)*(RHOT(K,1)+RHOT(K,2))*R%R(K)*R%R(K)*R%SI(K)*SIM_FAKT
+         IF (LscMBJ()) CALL SUM_GRHO_OVER_RHO_PW(RHO*AUTOA3,ABSNAB*AUTOA4)
+#ifdef debug2
+         IF (ABS(MUUP)>1._q) THEN
+            WRITE(100+I_DBG,'(A,I9,7F18.11)') 'in ',I,RHO1,RHO2,ABSNABUP,ABSNABDW,ABSNAB,TAUU,TAUD
+            WRITE(100+I_DBG,'(A,I9,8F18.11)') 'out',I,EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW
+         ENDIF
+#endif
 
-            ! develop
-            !             d    f_xc     grad rho
-            !             ------------  --------  = vec dFXC(r)
-            !             d |grad rho| |grad rho|
-            ! into spherical harmonics
-            ! afterwards vec dFXC can be reconstructed using
-            ! dFXC_i(r) =  \sum_L dFXC_Li(r) Y_L(r)
+         EXC=EXC+EXCL*RHO*RYTOEV*LATT_CUR%OMEGA
+         DVXC1=DVXC1*RYTOEV*AUTOA
+         DVXC2=DVXC2*RYTOEV*AUTOA
+         DVC_ =DVC_ *RYTOEV*AUTOA
 
-            IF (LCALCPOT()) THEN
-               DEXC1=DEXC1*RYTOEV
-               DEXC2=DEXC2*RYTOEV
-               DVXC1=DVXC1*RYTOEV*AUTOA
-               DVXC2=DVXC2*RYTOEV*AUTOA
-               DVC  =DVC  *RYTOEV*AUTOA
+         ! Double counting contribution stemming from dExc/d\mu
+         EDCMU=EDCMU+0.5_q*(MUUP*TAUU+MUDW*TAUD-(MUUP+MUDW)*TAUC(I)/2._q)*LATT_CUR%OMEGA
+#ifdef debug2
+         TAU_DBG=TAU_+(TAUU+TAUD)*LATT_CUR%OMEGA
+         MU_DBG=MU_DBG+MUUP
+#endif
+         MUUP=0.5_q*MUUP*RYTOEV*AUTOA2 ! HSQDTM = (plancks CONSTANT/(2*PI))**2/(2*ELECTRON MASS)
+         MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
 
-               DVXC1=DVXC1/ MAX(T1(K,1),NABMIN)
-               DVXC2=DVXC2/ MAX(T1(K,2),NABMIN)
-               DVC  =DVC  / MAX(TG,2*NABMIN)
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+         DVXC1=DVXC1+DVC_ 
+         DVXC2=DVXC2+DVC_ 
+         DVC_=0
+#endif
+
+         ! Store d f_xc / d \tau_up,down in DMUWORK if required
+         IF (LMU) THEN
+            DMUWORK(I,1)=MUUP
+            IF (ISPIN==2) DMUWORK(I,2)=MUDW
+         ENDIF
+
+         ! Store d f_x/ d (|\nabla \rho_up,down| ) / |\nabla \rho_up,down| in DWORK
+         ! and  d f_xc/ d \rho_up,down  in DWORKG
+         DWORK(I,1)  = DVXC1 / MAX(ABSNABUP, NABMIN)
+         DWORKG(I,1) = DEXC1*RYTOEV
+         IF (ISPIN==2) THEN
+            DWORK(I,2)  = DVXC2 / MAX(ABSNABDW, NABMIN)
+            DWORKG(I,2) = DEXC2*RYTOEV
+         ENDIF
+         ! Store d f_c/ d(|\nabla \rho|) / |\nabla \rho| in DVC
+         DVC(I)=DVC_/MAX(ABSNAB, NABMIN)
+      ENDDO
+#ifdef debug2
+      CLOSE(100+I_DBG)
+      I_DBG=I_DBG+1
+#endif
+
+#ifdef debug
+      REWIND(77)
+      REWIND(78)
+      REWIND(79)
+      I=1
+      DO NY=1,GRIDC%NGY
+         DO NX=1,GRIDC%NGX
+            ABSNAB= (DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
+                 (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
+                 (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2))
+            ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
+                   +DWORK3(I,1)*DWORK3(I,1))
+            ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
+                   +DWORK3(I,2)*DWORK3(I,2))
+            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
 
-               DO LM=1,LMMAX
-                  dFXC(K,LM,0,1) = dFXC(K,LM,0,1)+DEXC1*SIM_FAKT*YLM(NP,LM)
-                  dFXC(K,LM,0,2) = dFXC(K,LM,0,2)+DEXC2*SIM_FAKT*YLM(NP,LM)
+            WRITE(77,'(2I4,3F14.3)') NX,NY,DWORK(I,1)*ABSNABUP,RHO1
+            WRITE(78,'(3F14.3)') DWORK(I,2)*ABSNABDW
+            WRITE(79,'(3F14.3)') DVC(I)*ABSNAB
 
-                  dFXC(K,LM,1,1) = dFXC(K,LM,1,1)+(XU* DVXC1 + (XU+XD) * DVC)*SIM_FAKT*YLM(NP,LM)
-                  dFXC(K,LM,2,1) = dFXC(K,LM,2,1)+(YU* DVXC1 + (YU+YD) * DVC)*SIM_FAKT*YLM(NP,LM)
-                  dFXC(K,LM,3,1) = dFXC(K,LM,3,1)+(ZU* DVXC1 + (ZU+ZD) * DVC)*SIM_FAKT*YLM(NP,LM)
-                         
-                  dFXC(K,LM,1,2) = dFXC(K,LM,1,2)+(XD* DVXC2 + (XU+XD) * DVC)*SIM_FAKT*YLM(NP,LM)
-                  dFXC(K,LM,2,2) = dFXC(K,LM,2,2)+(YD* DVXC2 + (YU+YD) * DVC)*SIM_FAKT*YLM(NP,LM)
-                  dFXC(K,LM,3,2) = dFXC(K,LM,3,2)+(ZD* DVXC2 + (ZU+ZD) * DVC)*SIM_FAKT*YLM(NP,LM)
-               ENDDO
-            ENDIF
-            
-            IF (LCALCMU()) THEN
-               MUUP=0.5_q*MUUP*RYTOEV*AUTOA2
-               MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
-               DO LM=1,LMMAX_TAU
-                  dFXCdT(K,LM,1) = dFXCdT(K,LM,1)+MUUP*SIM_FAKT*YLM(NP,LM)
-                  dFXCdT(K,LM,2) = dFXCdT(K,LM,2)+MUDW*SIM_FAKT*YLM(NP,LM)
-               ENDDO
-            ENDIF
+            I=I+1
          ENDDO
-      ENDDO points
+      ENDDO
+#endif      
+#ifdef debug2
+      OPEN(I_DBG+500-1)
+      I=1
+      DO N3=0,GRIDC%NGZ-1
+         X3=MOD(N3*1._q/GRIDC%NGZ+10.5,1._q)-0.5
+      DO N2=0,GRIDC%NGY-1
+         X2=MOD(N2*1._q/GRIDC%NGY+10.5,1._q)-0.5
+      DO N1=0,GRIDC%NGX-1
+         X1=MOD(N1*1._q/GRIDC%NGX+10.5,1._q)-0.5
+         X=X1*LATT_CUR%A(1,1)+X2*LATT_CUR%A(1,2)+X3*LATT_CUR%A(1,3)
+         Y=X1*LATT_CUR%A(2,1)+X2*LATT_CUR%A(2,2)+X3*LATT_CUR%A(2,3)
+         Z=X1*LATT_CUR%A(3,1)+X2*LATT_CUR%A(3,2)+X3*LATT_CUR%A(3,3)
+         IF (ABS(REAL(DMUWORK(I,1),q)*2._q/RYTOEV/AUTOA2) > 1._q) THEN
+            WRITE(I_DBG+500-1,'(3F14.7,F18.11)') X,Y,Z,REAL(DMUWORK(I,1),q)*2._q/RYTOEV/AUTOA2
+         ENDIF
+         I=I+1
+      ENDDO
+      ENDDO
+      ENDDO               
+      CLOSE(I_DBG+500-1)
+#endif
 
-!========================================================================
-!
-! GGA part related to d e_XC / grad n
-!
-! add -\sum_i Y_L  d (dFXC_L'i(x) Y_L'(x))/ d x_i to the potential V_L(r)
-!
-!                          x_i d dFXC_L'i(|x|)
-! -\sum_L'i Y_L(x) Y_L'(x)  -  --------------- + dFXC_L'i(x) Y_L nabla_i Y_L'(x)
-!                          |x|   d |x|     
-!
-!========================================================================
-      IF (LCALCPOT()) THEN
+!=======================================================================
+! gradient terms in stress tensor
+!          d    f_xc     grad rho  x grad rho
+! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
+!         d |grad rho|        |grad rho|
+!=======================================================================
+      SIF11=0
+      SIF22=0
+      SIF33=0
+      SIF12=0
+      SIF23=0
+      SIF31=0
+      IF (ISPIN==2) THEN
          DO ISP=1,ISPIN
-            DO LM=1,LMMAX_CALC
-               DO K=1,R%NMAX
-                  POT(K,LM,ISP)=POT(K,LM,ISP)+dFXC(K,LM,0,ISP)
-               ENDDO
-            ENDDO
+         DO I=1,GRIDC%RL%NP
+            SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+            SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+            SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+            SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+            SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+            SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+ 
+            SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
+            SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+            SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+            SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+            SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+            SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
          ENDDO
-         ! nabla comment: 
-         ! the matrix elements < Y_L| nabla | Y_L'> are non zero
-         ! for L=L'+-1
-         DO ISP=1,ISPIN
-            DO I=1,3
-               DO LMP=1,LMMAX
-                  CALL GRAD(R,dFXC(1:R%NMAX,LMP,I,ISP),T1(1:R%NMAX,1))
-                  DO LM=1,LMMAX_CALC
-                     IF (ABS(YLM_NABLA_YLM(LM,LMP,I))>1E-4 .OR. ABS(YLM_X_YLM(LM,LMP,I))>1E-4) THEN
-                        DO K=1,R%NMAX
-                           POT(K,LM,ISP)=POT(K,LM,ISP)-( &
-                                dFXC(K,LMP,I,ISP)*YLM_NABLA_YLM(LM,LMP,I)/ R%R(K)+ & 
-                                T1(K,1)*YLM_X_YLM(LM,LMP,I) &
-                              )
-                        ENDDO
-                  ENDIF
-                  ENDDO
-               ENDDO
-            ENDDO
          ENDDO
-         DEALLOCATE(dFXC)
+      ELSE
+         DO I=1,GRIDC%RL%NP
+            SIF11=SIF11+DWORK1(I,1)*DWORK1(I,1)*DWORK(I,1)/2
+            SIF22=SIF22+DWORK2(I,1)*DWORK2(I,1)*DWORK(I,1)/2
+            SIF33=SIF33+DWORK3(I,1)*DWORK3(I,1)*DWORK(I,1)/2
+            SIF12=SIF12+DWORK1(I,1)*DWORK2(I,1)*DWORK(I,1)/2
+            SIF23=SIF23+DWORK2(I,1)*DWORK3(I,1)*DWORK(I,1)/2
+            SIF31=SIF31+DWORK3(I,1)*DWORK1(I,1)*DWORK(I,1)/2
+ 
+            SIF11=SIF11+DWORK1(I,1)*(DWORK1(I,1))*DVC(I)
+            SIF22=SIF22+DWORK2(I,1)*(DWORK2(I,1))*DVC(I)
+            SIF33=SIF33+DWORK3(I,1)*(DWORK3(I,1))*DVC(I)
+            SIF12=SIF12+DWORK1(I,1)*(DWORK2(I,1))*DVC(I)
+            SIF23=SIF23+DWORK2(I,1)*(DWORK3(I,1))*DVC(I)
+            SIF31=SIF31+DWORK3(I,1)*(DWORK1(I,1))*DVC(I)
+         ENDDO
       ENDIF
+      SIF11=SIF11*RINPL*LATT_CUR%OMEGA
+      SIF22=SIF22*RINPL*LATT_CUR%OMEGA
+      SIF33=SIF33*RINPL*LATT_CUR%OMEGA
+      SIF12=SIF12*RINPL*LATT_CUR%OMEGA
+      SIF23=SIF23*RINPL*LATT_CUR%OMEGA
+      SIF31=SIF31*RINPL*LATT_CUR%OMEGA
 
-      DCMU=0
-      IF (LCALCMU()) THEN
-         DO ISP=1,ISPIN
-            DO LM=1,LMMAX_TAU
-               DO K=1,R%NMAX
-                  MU(K,LM,ISP)=dFXCdT(K,LM,ISP)
-                  DCMU=DCMU+MU(K,LM,ISP)*TAU(K,LM,ISP)*R%SI(K)/HSQDTM
-               ENDDO
-            ENDDO
+!=======================================================================
+! calculate 
+!              d    f_xc     grad rho
+!        div  (------------  --------  ) 
+!              d |grad rho| |grad rho|
+!
+! in reciprocal space
+!=======================================================================
+
+      IF (ISPIN==2) THEN
+         DO I=1,GRIDC%RL%NP
+            ANAB1U= DWORK1(I,1)
+            ANAB2U= DWORK2(I,1)
+            ANAB3U= DWORK3(I,1)
+            ANAB1D= DWORK1(I,2)
+            ANAB2D= DWORK2(I,2)
+            ANAB3D= DWORK3(I,2)
+
+            DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
+            DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
+            DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
+
+            DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
+            DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
+            DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
          ENDDO
-         DEALLOCATE(dFXcdT)
-      ENDIF
+      ELSE
+         DO I=1,GRIDC%RL%NP
+            ANAB1U= DWORK1(I,1)/2
+            ANAB2U= DWORK2(I,1)/2
+            ANAB3U= DWORK3(I,1)/2
+            ANAB1D= ANAB1U
+            ANAB2D= ANAB2U
+            ANAB3D= ANAB3U
 
-      ! finally calculate the double counting corrections again
-      DVXC=0
-      IF (LCALCPOT()) THEN
-         CALL RAD_POT_IN_RHO(R,ISPIN,LMAX_CALC,RHO,POT,DVXC)
-         DVXC=DVXC-DVINI
+            DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
+            DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
+            DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
+         ENDDO
       ENDIF
 
-      IF (LCALCMU()) THEN
-         DVXC=DVXC+DCMU
-!        WRITE(*,'(A,F24.14)') 'dcmu =',DCMU
-      ENDIF
+      spin2: DO ISP=1,ISPIN
+! x-component:
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK1(I,ISP)
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
-      DEALLOCATE(YLM,YLMD,YLMDD,XYZPTS,RADPTS,YLM_NABLA_YLM,YLM_X_YLM,WEIGHT,ABSCIS,RHOLM,RHOLMD)
-      
-      RETURN
-      END SUBROUTINE RAD_METAGGA_XC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+
+         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
+         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
+      ENDDO
 
+! y-component:
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK2(I,ISP)
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
-!********************* SUBROUTINE RAD_PROJ_METAGGA *********************
-!
-!***********************************************************************
-      SUBROUTINE RAD_PROJ_METAGGA(&
-     &   P,W,LMAX_TAU,MU,A,DLLMM)
-      USE prec
-      USE asa
-      USE pseudo
-      USE radial
-      USE constant
-      USE paw
-      IMPLICIT NONE
-      TYPE (potcar) P
-      INTEGER LMAX_TAU
-      REAL(q) A
-      REAL(q) W(:,:)
-      REAL(q) MU(:,:,:)
-      OVERLAP DLLMM(:,:,:)
-      ! local variables
-      INTEGER ISP,I,K,Ch1,Ch2
-      INTEGER LLMAX_TAU,LMMAX_TAU,LM,LMP,LL,LLP,M,MP,MPLOW,INDYLM,INDYLMP
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
 
-      REAL(q) SUM
-      REAL(q) W1(P%R%NMAX),W2(P%R%NMAX),DW1(P%R%NMAX),DW2(P%R%NMAX)
-      REAL(q), ALLOCATABLE :: TAU(:,:)      
+         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
+      ENDDO
 
-      ! quick return if possible
-      IF ((.NOT.LDO_METAGGA()).OR.(.NOT.LCALCMU())) RETURN
+! z-component:
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK3(I,ISP)
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
-      ! non-collinear magnetism
-!     IF (SIZE(DLLMM,3)==4) THEN
-!        WRITE(*,*) 'RAD_PROJ_METAGGA: internal error; non-collinear case not supported (yet).'
-!        STOP
-!     ENDIF
-            
-      ! check consistency
-      LMMAX_TAU=(LMAX_TAU+1)**2
-      IF (SIZE(MU,2)<LMMAX_TAU) THEN
-         WRITE(*,*) 'RAD_PROJ_METAGGA: ERROR, size(MU,2)<LMMAX_TAU',SIZE(MU,2),LMMAX_TAU
-         STOP
-      ENDIF
-      
-      ! restriction for the angular development of \tau and \mu
-      LLMAX_TAU=MIN(LMAXTAU,LMAX_TAU); LMMAX_TAU=(LLMAX_TAU+1)**2
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
 
-      ALLOCATE(TAU(P%R%NMAX,LMMAX_TAU))
-      
-      ! loops over channels (l,epsilon)
-      LM=1; DO Ch1=1,P%LMAX
+         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
+      ENDDO
 
-      ! d(w1/r)/dr
-      W1(:)=W(:,Ch1)/P%R%R(:); CALL GRAD(P%R,W1,DW1)
-      
-      LMP=LM; DO Ch2=Ch1,P%LMAX
-      ! d(w2/r)/dr
-      W2(:)=W(:,Ch2)/P%R%R(:); CALL GRAD(P%R,W2,DW2)
-      
-         LL=P%LPS(Ch1); LLP=P%LPS(Ch2)
-         DO M=1,2*LL+1
-         MPLOW=1; IF(Ch1==Ch2) MPLOW=M
-         DO MP=MPLOW,2*LLP+1
-            INDYLM= LL**2 +M
-            INDYLMP=LLP**2+MP
+      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
+      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
+      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
 
-            TAU=0
-               
-            DO I=1,LMMAX_TAU
-               TAU(:,I)=TAU(:,I)+ &
-              &   (DW1(:)*X_YLM_X_YLM(INDYLM,INDYLMP,I)*DW2(:)*P%R%R(:)*P%R%R(:) + &
-              &    DW1(:)*X_YLM_YLMD(INDYLM,INDYLMP,I)*W2(:)*P%R%R(:) + &
-              &    W1(:)*X_YLM_YLMD(INDYLMP,INDYLM,I)*DW2(:)*P%R%R(:) + &
-              &    W1(:)*YLMD_YLMD(INDYLM,INDYLMP,I)*W2(:))
-            ENDDO
+      ENDDO spin2
+
+!=======================================================================
+! Now prepare the rest:
+! (store rho in DWORK3 and quantity of above in DWORK1)
+!=======================================================================
+      XCENC=0._q
+      CVZERO=0._q
+      XCENCC=0._q
+
+      IF (ISPIN==2) THEN
+         DO I=1,GRIDC%RL%NP
+         ! Spin-polarized case
+            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+
+            VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
+            VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
+            DWORK(I,1)=VXC1
+            DWORK(I,2)=VXC2
+            VXC = 0.5_q*(VXC1+VXC2)
+            CVZERO=CVZERO+VXC
+            XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
+            XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q) -VXC2* REAL( DHTOT(I,2) ,KIND=q)
+         ENDDO
+      ELSE
+         DO I=1,GRIDC%RL%NP      
+         ! nonspin-polarized case
+            RHO= MAX(REAL((DHTOT(I,1)+DENCOR(I))/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
             
-            DO ISP=1,SIZE(DLLMM,3)
-               SUM=0
-               DO I=1,LMMAX_TAU
-                  ! Integrate over r (Simpson integration)
-                  DO K=1,P%R%NMAX
-                     SUM=SUM+MU(K,I,ISP)*TAU(K,I)*P%R%SI(K)
-                  ENDDO
-               ENDDO
-               DLLMM(LM+M-1,LMP+MP-1,ISP)=DLLMM(LM+M-1,LMP+MP-1,ISP)+A*SUM
-               DLLMM(LMP+MP-1,LM+M-1,ISP)=DLLMM(LM+M-1,LMP+MP-1,ISP)
-            ENDDO
+            VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
             
+            DWORK(I,1)=VXC1
+            CVZERO=CVZERO+VXC1
+            XCENCC=XCENCC-VXC1*RHO*LATT_CUR%OMEGA
+            XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q)  
          ENDDO
-         ENDDO
-      LMP=LMP+2*LLP+1
-      ENDDO
-      LM =LM +2*LL +1
-      ENDDO
+      ENDIF
 
-!     CALL DUMP_DLLMM( "NABLA-MU-NABLA",DLLMM(:,:,1),P)
+      CVZERO=CVZERO*RINPL
+      XCENC =(XCENC+EXC-EDCMU)*RINPL
+      XCENCC=(XCENCC+EXC)*RINPL
+      EXC   =EXC*RINPL
+      EDCMU =EDCMU*RINPL
 
-      DEALLOCATE(TAU)
+      SIF11=SIF11-XCENCC
+      SIF22=SIF22-XCENCC
+      SIF33=SIF33-XCENCC
+      XCSIF(1,1)=SIF11
+      XCSIF(2,2)=SIF22
+      XCSIF(3,3)=SIF33
+      XCSIF(1,2)=SIF12
+      XCSIF(2,1)=SIF12
+      XCSIF(2,3)=SIF23
+      XCSIF(3,2)=SIF23
+      XCSIF(3,1)=SIF31
+      XCSIF(1,3)=SIF31
+
+      CALLMPI( M_sum_s(GRIDC%COMM, 3, EXC, XCENC, EDCMU, 0._q))
+      CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
+      CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+
+! Test dumps:
+      IF (IDUMP/=0) THEN
+         WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
+         WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
+         WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
+         WRITE(*,'(A,F24.14)') '    xcencc  =',XCENCC
+         WRITE(*,'(A,F24.14)') '     edcmu  =',EDCMU         
+#ifdef debug2
+         WRITE(*,'(A,F24.14)') '     tau    =',TAU_DBG*RINPL
+         WRITE(*,'(A,F24.14)') '     mu     =',MU_DBG*RINPL
+#endif
+      ENDIF
 
       RETURN
-      END SUBROUTINE RAD_PROJ_METAGGA
+      END SUBROUTINE FEXCGS_METAGGA_
 
 
-!********************* SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA ******
+!***************** SUBROUTINE FEXCGS_METAGGA_NONCOL ********************
+!
+!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
+! Mind CWORK and DWORK point actually to the same storagelocation
+! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
+! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
+! so we can interchange both arrays arbitrarily
 !
 !***********************************************************************
-      SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA(LLMAX)
+
+      SUBROUTINE FEXCGS_METAGGA_NONCOL(LPOT,LMU,&
+     &   NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+     &   CWGRAD,CHTOT,CWORK,CKINEDEN,DWGRAD,DHTOT,DWORK,DKINEDEN, &
+     &   DENCOR,TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC, &
+     &   DMUWORK &
+     &)
       USE prec
-      USE asa
-      USE radial
+      USE lattice
+      USE mpimy
+      USE mgrid
       USE constant
-      USE pseudo
-      IMPLICIT NONE
-      INTEGER LLMAX
-      ! local variables
-      INTEGER I,J,Ch1,Ch2
-      INTEGER IFAIL,PHPTS,THPTS,NPTS,NP
-      INTEGER LMMAX,LLMAX_TAU,LMMAX_TAU
-      INTEGER LM,LMP,LL,LLP,M,MP,INDYLM,INDYLMP
-
-      REAL(q), ALLOCATABLE :: RADPTS(:,:), XYZPTS(:,:)
-      REAL(q), ALLOCATABLE :: YLM(:,:),YLMD(:,:,:)
-      REAL(q), ALLOCATABLE :: WEIGHT(:),ABSCIS(:)
-
-      REAL(q) DELTAPHI,SIM_FAKT
-      EXTERNAL GAUSSI2
-
-      ! quick return if possible
-      IF (.NOT.LDO_METAGGA()) RETURN
-     
-      IF (ALLOCATED(X_YLM_X_YLM).AND.ALLOCATED(YLMD_YLMD).AND.ALLOCATED(X_YLM_YLMD)) RETURN
-
-      LMMAX=(LLMAX+1)**2
-      LLMAX_TAU=MIN(2*LLMAX+2,LMAXTAU); LMMAX_TAU=(LLMAX_TAU+1)**2
-      
-      IF (ALLOCATED(X_YLM_X_YLM)) DEALLOCATE(X_YLM_X_YLM)
-      ALLOCATE(X_YLM_X_YLM(LMMAX,LMMAX,LMMAX_TAU)); X_YLM_X_YLM=0
-
-      IF (ALLOCATED(YLMD_YLMD)) DEALLOCATE(YLMD_YLMD)
-      ALLOCATE(YLMD_YLMD(LMMAX,LMMAX,LMMAX_TAU)); YLMD_YLMD=0
-
-      IF (ALLOCATED(X_YLM_YLMD)) DEALLOCATE(X_YLM_YLMD)
-      ALLOCATE(X_YLM_YLMD(LMMAX,LMMAX,LMMAX_TAU)); X_YLM_YLMD=0
-
+      USE metalib
+      USE setxcmeta
 
-!========================================================================
-! number of theta and phi pivot points to perform angular integration
-! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically 
-! needed to integrate Yllmax,m. 
-! the factor 2 is the minium, 3 is more accurate
-!========================================================================
-      PHPTS=PHPTS_FACT*(MAX(LLMAX,LLMAX_TAU)+1)
-      THPTS=THPTS_FACT*FLOOR(REAL(MAX(LLMAX,LLMAX_TAU)/2+1,KIND=q))
-      NPTS=PHPTS*THPTS
-      DELTAPHI=REAL(2_q*PI/PHPTS,KIND=q)
-! allocate arrays
-      ALLOCATE(XYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), & 
-     &     YLM(NPTS,MAX(LMMAX,LMMAX_TAU)),YLMD(NPTS,MAX(LMMAX,LMMAX_TAU),3))
-      
-      ! set phi positions, equally spaced
-      RADPTS=0; WEIGHT=0; ABSCIS=0
-      DO I=1,PHPTS
-         DO J=1,THPTS
-            RADPTS((J-1)*PHPTS+I,2)=(I-1)*DELTAPHI
-         ENDDO
-      ENDDO
-     ! get theta positions (actually get cos(theta)) (Gauss integration)
-      CALL GAUSSI(GAUSSI2,-1._q,1._q,0,THPTS,WEIGHT,ABSCIS,IFAIL)
-      DO I=1,THPTS
-         RADPTS((I-1)*PHPTS+1:I*PHPTS,1)=ABSCIS(I)
-      ENDDO
-      ! convert radial to cartesian coordinates
-      DO I=1,NPTS
-         XYZPTS(I,1)=COS(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! x
-         XYZPTS(I,2)=SIN(RADPTS(I,2))*SQRT(1_q-RADPTS(I,1)**2_q) ! y
-         XYZPTS(I,3)=RADPTS(I,1)                                 ! z
-      ENDDO
+      IMPLICIT COMPLEX(q) (C)
 
-      ! get |r| Y_lm on a unit sphere and its derivatives
-      YLM=0; YLMD=0
-      CALL SETYLM_GRAD2(MAX(LLMAX,LLMAX_TAU),NPTS,YLM,YLMD,XYZPTS(:,1),XYZPTS(:,2),XYZPTS(:,3))
+      IMPLICIT REAL(q) (A-B,D-H,O-Z)
 
-      ! loop over all points in the angular grid
-      points: DO NP=1,NPTS
+      TYPE (grid_3d)     GRIDC
+      TYPE (latt)        LATT_CUR
 
-         ! weight of this points
-         SIM_FAKT=DELTAPHI*WEIGHT((INT((NP-1)/PHPTS)+1))
+      LOGICAL LPOT,LMU
 
-         ! loops over channels (l,epsilon)
-         DO LL =0,LLMAX
-         DO LLP=0,LLMAX
+      COMPLEX(q) CWGRAD(GRIDC%MPLWV,NCDIJ),CHTOT(GRIDC%MPLWV,NCDIJ), &
+     &   CKINEDEN(GRIDC%MPLWV,NCDIJ),CWORK(GRIDC%MPLWV,NCDIJ)
+      RGRID DWGRAD(DIMREAL(GRIDC%MPLWV),NCDIJ),DHTOT(DIMREAL(GRIDC%MPLWV),NCDIJ), &
+     &   DKINEDEN(DIMREAL(GRIDC%MPLWV),NCDIJ),DWORK(DIMREAL(GRIDC%MPLWV),NCDIJ)
 
-            DO M=1,2*LL+1
-            DO MP=1,2*LLP+1
-               INDYLM= LL**2 +M
-               INDYLMP=LLP**2+MP
-               DO I=1,LMMAX_TAU
-                  X_YLM_X_YLM(INDYLM,INDYLMP,I)=X_YLM_X_YLM(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
-                 &   (XYZPTS(NP,1)*XYZPTS(NP,1)+XYZPTS(NP,2)*XYZPTS(NP,2)+XYZPTS(NP,3)*XYZPTS(NP,3))* & 
-                 &   YLM(NP,INDYLM)*YLM(NP,INDYLMP)
-                  X_YLM_YLMD(INDYLM,INDYLMP,I)=X_YLM_YLMD(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
-                 &   (XYZPTS(NP,1)*YLMD(NP,INDYLMP,1)+XYZPTS(NP,2)*YLMD(NP,INDYLMP,2)+XYZPTS(NP,3)*YLMD(NP,INDYLMP,3))* &
-                 &   YLM(NP,INDYLM)
-                  YLMD_YLMD(INDYLM,INDYLMP,I)=YLMD_YLMD(INDYLM,INDYLMP,I)+ SIM_FAKT*YLM(NP,I)* &
-                 &   (YLMD(NP,INDYLM,1)*YLMD(NP,INDYLMP,1)+YLMD(NP,INDYLM,2)*YLMD(NP,INDYLMP,2)+YLMD(NP,INDYLM,3)*YLMD(NP,INDYLMP,3))
-               ENDDO
-            ENDDO
-            ENDDO
-         ENDDO
-         ENDDO
+      RGRID DENCOR(GRIDC%RL%NP),TAUC(GRIDC%RL%NP)
+      REAL(q) XCSIF(3,3)
+      REAL(q) DWORKG(GRIDC%RL%NP,NCDIJ/2),DWORK1(GRIDC%RL%NP,NCDIJ), &
+     &   DWORK2(GRIDC%RL%NP,NCDIJ),DWORK3(GRIDC%RL%NP,NCDIJ),DVC(GRIDC%RL%NP)
+      REAL(q) MAG_NORM,NABMAG(3),TAU_NORM,TAU_DOT_MDIR,LAP_NORM,LAP_DOT_MDIR
 
-      ENDDO points
+      RGRID  DMUWORK(DIMREAL(GRIDC%MPLWV),NCDIJ)
 
-      DEALLOCATE(XYZPTS,RADPTS,WEIGHT,ABSCIS,YLM,YLMD)
+      REAL(q) LAPLUP,LAPLDW,LAPLACIAN(GRIDC%RL%NP,NCDIJ)
+      REAL(q) MUUP,MUDW,EDCMU
+      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-10_q
       
-      RETURN
-      END SUBROUTINE RAD_AUXILIARY_FUNCTIONS_METAGGA
+! set to one for error-dumps
+#ifdef MPI
+      NODE_ME=GRIDC%COMM%NODE_ME
+      IONODE =GRIDC%COMM%IONODE
+      IDUMP=0
+#ifdef debug
+      IF (NODE_ME==IONODE) IDUMP=1
+#endif
+#else
+      IDUMP=0
+#ifdef debug
+      IDUMP=1
+#endif
+#endif
 
+      LAPLACIAN=0
 
-!******************** FUNCTION IR_MATCH ********************************
-!        
-!***********************************************************************
-      FUNCTION IR_MATCH(PP,CHANNEL)
-      USE prec
-      USE pseudo 
-      IMPLICIT NONE
-      TYPE(potcar), POINTER :: PP
-      INTEGER CHANNEL
-      INTEGER IR_MATCH
-      ! local variables
-      INTEGER K
-      IR_MATCH=PP%R%NMAX
-      DO K=PP%R%NMAX,1,-1
-         IF (PP%WAE(K,CHANNEL)/=PP%WPS(K,CHANNEL)) EXIT
-         IR_MATCH=K
-      ENDDO
-      END FUNCTION IR_MATCH
+      RINPL=1._q/GRIDC%NPLWV                    ! Scaling of Energy
+      EVTOH=1._q/(2.*HSQDTM)*AUTOA5             ! KinEDens eV to Hartree
 
+!=======================================================================
+! First phase: Transform DENCOR (core charge) and
+!  CHTOT (pseudo chargedensity) to real space
+!=======================================================================
+    spin: DO ISP=1,NCDIJ
+      IF (ISP==1) THEN
+      ! Add core charge density to pseudo charge density
+         DO I=1,GRIDC%RL%NP
+            DWORK(I,ISP)=(DENCOR(I)+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
+         ENDDO
+      ELSE
+         DO I=1,GRIDC%RL%NP
+            DWORK(I,ISP)=DHTOT(I,ISP)*RINPL/LATT_CUR%OMEGA
+         ENDDO
+      ENDIF
 
-!******************** FUNCTION IR_PSMAX ********************************
-!      
-!***********************************************************************
-      FUNCTION IR_PSMAX(PP)
-      USE prec
-      USE pseudo
-      IMPLICIT NONE
-      TYPE(potcar), POINTER :: PP
-      INTEGER IR_PSMAX
-      ! local variables
-      INTEGER K
-      IR_PSMAX=PP%R%NMAX
-      DO K=PP%R%NMAX,2,-1
-         IF ((PP%R%R(K)<PP%PSDMAX).OR.(PP%R%R(K)<PP%PSRMAX)) EXIT
-         IR_PSMAX=K
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+
+!=======================================================================
+! now calculate the gradient of the chargedensity
+!=======================================================================
+      DO  I=1,GRIDC%RC%NP
+        CWGRAD(I,ISP)=CWORK(I,ISP)
+      ENDDO
+! x-component:
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
+       ENDDO
+! grad_x in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
       ENDDO
-      END FUNCTION IR_PSMAX
 
+! y-component:
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
+      ENDDO
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
+      ENDDO
+! grad_y in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+      ENDDO
 
-!***********************************************************************
-!***********************************************************************
-  END MODULE meta
-!***********************************************************************
-!***********************************************************************
+! z-component:
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
+      ENDDO
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
+      DO I=1,GRIDC%RC%NP
+         N1= MOD((I-1),GRIDC%RC%NROW) +1
+         NC= (I-1)/GRIDC%RC%NROW+1
+         N2= GRIDC%RC%I2(NC)
+         N3= GRIDC%RC%I3(NC)
+         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
+         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
+      ENDDO
+! grad_z in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+      ENDDO
 
+! Compute the laplacian of the density
+      DO IDIR=1,3  
+         DO I=1,GRIDC%RC%NP  ! loop over all grid points NP in the reciprocal (RC) grid
+            ! index of grid point along three reciprocal lattice vectors (N1, N2, N3)
+            N1= MOD((I-1),GRIDC%RC%NROW) +1
+            NC= (I-1)/GRIDC%RC%NROW+1
+            N2= GRIDC%RC%I2(NC)
+            N3= GRIDC%RC%I3(NC)
+            ! convert to lattice vector component in direction x, y or z (corresponding to index J)
+            GG=(GRIDC%LPCTX(N1)*LATT_CUR%B(IDIR,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(IDIR,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(IDIR,3))**2
+            !write(*,*)'xcgrad:cwgrad ', CWORK4(I), CWGRAD(I), G1, G2, CITPI
+            CWORK(I,ISP)=(CWGRAD(I,ISP))*GG*CITPI*CITPI
+         ENDDO
+         CALL SETUNB(CWORK(1,ISP),GRIDC)
+         CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+         CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+         DO I=1,GRIDC%RL%NP
+            LAPLACIAN(I,ISP)=LAPLACIAN(I,ISP)+REAL( DWORK(I,ISP) ,KIND=q)
+         ENDDO
+      ENDDO
+      
+      ENDDO spin
 
-!******************** SUBROUTINE FEXCGS_METAGGA_ ***********************
+!=======================================================================
+!  grad rho    d    f_xc
+! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
+! |grad rho|   d |grad rho|
+!
+!  MIND: the factor OMEGA is difficult to understand:
+!   1/N sum_r energy_density * rho *OMEGA = Energy
+!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
+!=======================================================================
+      EXC=0; EDCMU=0
+      DO I=1,GRIDC%RL%NP
+!     
+! | m |
+!
+         MAG_NORM=MAX(SQRT(ABS( &
+        &    DHTOT(I,2)*DHTOT(I,2)+DHTOT(I,3)*DHTOT(I,3)+DHTOT(I,4)*DHTOT(I,4))), CHGMIN)        
+!       
+! RHO1: \rho_up   = ( \rho_tot + | m | )/2
+! RHO2: \rho_down = ( \rho_tot - | m | )/2
+!
+         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)+MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+         RHO2= MAX(REAL((DHTOT(I,1)+DENCOR(I)-MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+!        
+! \nabla | m |
+!
+         NABMAG(1)=(DWORK1(I,2)*DHTOT(I,2)+DWORK1(I,3)*DHTOT(I,3)+DWORK1(I,4)*DHTOT(I,4))/MAG_NORM
+         NABMAG(2)=(DWORK2(I,2)*DHTOT(I,2)+DWORK2(I,3)*DHTOT(I,3)+DWORK2(I,4)*DHTOT(I,4))/MAG_NORM
+         NABMAG(3)=(DWORK3(I,2)*DHTOT(I,2)+DWORK3(I,3)*DHTOT(I,3)+DWORK3(I,4)*DHTOT(I,4))/MAG_NORM
+!        
+! | ( \nabla \rho + \nabla | m | )/2 |
+!
+         ABSNABUP=SQRT( &
+        &            (DWORK1(I,1)+NABMAG(1))*(DWORK1(I,1)+NABMAG(1)) + &
+        &             (DWORK2(I,1)+NABMAG(2))*(DWORK2(I,1)+NABMAG(2)) + &
+        &              (DWORK3(I,1)+NABMAG(3))*(DWORK3(I,1)+NABMAG(3)) ) / 2
+!
+! | ( \nabla \rho - \nabla | m | )/2 |
+!
+         ABSNABDW=SQRT( &
+        &            (DWORK1(I,1)-NABMAG(1))*(DWORK1(I,1)-NABMAG(1)) + &
+        &             (DWORK2(I,1)-NABMAG(2))*(DWORK2(I,1)-NABMAG(2)) + &
+        &              (DWORK3(I,1)-NABMAG(3))*(DWORK3(I,1)-NABMAG(3)) ) / 2
+!
+! | \nabla \rho |
+!
+         ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1)+DWORK3(I,1)*DWORK3(I,1))
+!
+! Refill DWORK[1..3](:,2) with ( \nabla \rho - \nabla | m | )/2
 !
-!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
-! Mind CWORK and DWORK point actually to the same storagelocation
-! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
-! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
-! so we can interchange both arrays arbitrarily
+         DWORK1(I,2)=(DWORK1(I,1)-NABMAG(1))/2
+         DWORK2(I,2)=(DWORK2(I,1)-NABMAG(2))/2
+         DWORK3(I,2)=(DWORK3(I,1)-NABMAG(3))/2
 !
-!***********************************************************************
+! Refill DWORK[1..3](:,1) with ( \nabla \rho + \nabla | m | )/2
+!
+         DWORK1(I,1)=(DWORK1(I,1)+NABMAG(1))/2
+         DWORK2(I,1)=(DWORK2(I,1)+NABMAG(2))/2
+         DWORK3(I,1)=(DWORK3(I,1)+NABMAG(3))/2
 
-      SUBROUTINE FEXCGS_METAGGA_(LPOT,LMU,&
-     &   ISPIN,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-     &   CWGRAD,CHTOT,CWORK,CKINEDEN,DWGRAD,DHTOT,DWORK,DKINEDEN, &
-     &   DENCOR,TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC,DMUWORK &
-     &)
-      USE prec
-      USE lattice
-      USE mpimy
-      USE mgrid
-      USE constant
-      USE metalib
-      USE setxcmeta
+!#define  correlation_ABS_DRHOUP_ABS_DRHOD
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+         ABSNAB=ABSNABUP+ABSNABDW
+#endif
+         !     
+         ! | m |
+         !
+         TAU_NORM=MAX(SQRT(ABS( &
+        &    DKINEDEN(I,2)*DKINEDEN(I,2)+DKINEDEN(I,3)*DKINEDEN(I,3)+DKINEDEN(I,4)*DKINEDEN(I,4))), TAUMIN)        
+         TAU_DOT_MDIR=(DHTOT(I,2)*DKINEDEN(I,2)+DHTOT(I,3)*DKINEDEN(I,3)+DHTOT(I,4)*DKINEDEN(I,4))/MAG_NORM
+         !       
+         ! kinetic energy density
+         ! TAUU: \tau_up   = ( \tau_tot + | m | )/2
+         ! TAUD: \tau_down = ( \tau_tot - | m | )/2
+         !
+!        TAUU=MAX(REAL((DKINEDEN(I,1)+TAU_NORM)/2,KIND=q), TAUMIN)
+!        TAUD=MAX(REAL((DKINEDEN(I,1)-TAU_NORM)/2,KIND=q), TAUMIN)
+         TAUU=MAX(REAL((DKINEDEN(I,1)+TAU_DOT_MDIR)/2._q+TAUC(I)/2._q,KIND=q), TAUMIN)
+         TAUD=MAX(REAL((DKINEDEN(I,1)-TAU_DOT_MDIR)/2._q+TAUC(I)/2._q,KIND=q), TAUMIN)
+            
+         !     
+         ! | m |
+         !
+         LAP_NORM=MAX(SQRT(ABS( &
+        &    LAPLACIAN(I,2)*LAPLACIAN(I,2)+LAPLACIAN(I,3)*LAPLACIAN(I,3)+LAPLACIAN(I,4)*LAPLACIAN(I,4))), TAUMIN)
+         LAP_DOT_MDIR=(DHTOT(I,2)*LAPLACIAN(I,2)+DHTOT(I,3)*LAPLACIAN(I,3)+DHTOT(I,4)*LAPLACIAN(I,4))/MAG_NORM
+         !       
+         ! Laplacian of the density
+!        LAPLUP=REAL((LAPLACIAN(I,1)+LAP_NORM)/2,KIND=q)
+!        LAPLDW=REAL((LAPLACIAN(I,1)-LAP_NORM)/2,KIND=q)
+         LAPLUP=REAL((LAPLACIAN(I,1)+LAP_DOT_MDIR)/2,KIND=q)
+         LAPLDW=REAL((LAPLACIAN(I,1)-LAP_DOT_MDIR)/2,KIND=q)
 
-      IMPLICIT COMPLEX(q) (C)
+         ! The CMBJ parameter may depend on the spatial position,
+         ! if so, it is set here to the right entry in CMBJ_AUX
+         CALL SET_CMBJ_PW(I)
 
-      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+         CALL METAGGASPIN(&
+        &   RHO1*AUTOA3,RHO2*AUTOA3,ABSNABUP*AUTOA4,ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
+        &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU*EVTOH,TAUD*EVTOH, &
+        &   EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW)
 
-      TYPE (grid_3d)     GRIDC
-      TYPE (latt)        LATT_CUR
+         RHO=RHO1+RHO2
 
-      LOGICAL LPOT,LMU
+         IF (LscMBJ()) CALL SUM_GRHO_OVER_RHO_PW(RHO*AUTOA3,ABSNAB*AUTOA4)
 
-      COMPLEX(q) CWGRAD(GRIDC%MPLWV,ISPIN),CHTOT(GRIDC%MPLWV,ISPIN), &
-     &   CKINEDEN(GRIDC%MPLWV,ISPIN),CWORK(GRIDC%MPLWV,ISPIN)
-      RGRID DWGRAD(DIMREAL(GRIDC%MPLWV),ISPIN),DHTOT(DIMREAL(GRIDC%MPLWV),ISPIN), &
-     &   DKINEDEN(DIMREAL(GRIDC%MPLWV),ISPIN),DWORK(DIMREAL(GRIDC%MPLWV),ISPIN)
-              
-      RGRID DENCOR(GRIDC%RL%NP),TAUC(GRIDC%RL%NP)
-      REAL(q) XCSIF(3,3)
-      REAL(q) DWORKG(GRIDC%RL%NP,ISPIN),DWORK1(GRIDC%RL%NP,ISPIN), &
-     &   DWORK2(GRIDC%RL%NP,ISPIN),DWORK3(GRIDC%RL%NP,ISPIN),DVC(GRIDC%RL%NP)
+         EXC=EXC+EXCL*RHO*RYTOEV*LATT_CUR%OMEGA
+         DVXC1=DVXC1*RYTOEV*AUTOA
+         DVXC2=DVXC2*RYTOEV*AUTOA
+         DVC_ =DVC_ *RYTOEV*AUTOA
 
-      RGRID  DMUWORK(DIMREAL(GRIDC%MPLWV),ISPIN)
+         ! Double counting contribution stemming from dExc/d\mu
+         EDCMU=EDCMU+0.5_q*(MUUP*TAUU+MUDW*TAUD-(MUUP+MUDW)*TAUC(I)/2._q)*LATT_CUR%OMEGA
 
-      REAL(q) LAPLUP,LAPLDW,LAPLACIAN(GRIDC%RL%NP,ISPIN)
-      REAL(q) MUUP,MUDW,EDCMU,MU1
-      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-9_q, LAPMIN=1E-10_q
+         MUUP=0.5_q*MUUP*RYTOEV*AUTOA2 ! HSQDTM = (plancks CONSTANT/(2*PI))**2/(2*ELECTRON MASS)
+         MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
 
-#ifdef debug2
-      INTEGER, SAVE :: I_DBG=0
-      REAL(Q) MU_DBG,TAU_DBG
-#endif
-     
-! set to one for error-dumps
-#ifdef MPI
-      NODE_ME=GRIDC%COMM%NODE_ME
-      IONODE =GRIDC%COMM%IONODE
-      IDUMP=0
-#ifdef debug
-      IF (NODE_ME==IONODE) IDUMP=1
-#endif
-#else
-      IDUMP=0
-#ifdef debug
-      IDUMP=1
-#endif
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+         DVXC1=DVXC1+DVC_ 
+         DVXC2=DVXC2+DVC_ 
+         DVC_=0
 #endif
 
-      LAPLACIAN=0
+!test
+!         DVXC1=0
+!         DVXC2=0
+!         DVC_ =0
+!test
+         ! Store d f_xc / d \tau_up,down in DMUWORK if required
+         IF (LMU) THEN
+            DMUWORK(I,1)=MUUP
+            DMUWORK(I,2)=MUDW
+         ENDIF
 
-      RINPL=1._q/GRIDC%NPLWV                    ! Scaling of Energy
-      EVTOH=1._q/(2.*HSQDTM)*AUTOA5             ! KinEDens eV to Hartree
+!
+!   store d f/ d (|d rho| ) / |d rho|  in DWORK
+!
+         DWORK(I,1)  = DVXC1 / MAX(ABSNABUP,NABMIN)
+         DWORK(I,2)  = DVXC2 / MAX(ABSNABDW,NABMIN)
+         DVC(I)      = DVC_  / MAX(ABSNAB,NABMIN)
+!
+!   store d f/ d rho  in DWORKG
+!
+         DWORKG(I,1) = DEXC1*RYTOEV
+         DWORKG(I,2) = DEXC2*RYTOEV
+
+      ENDDO
 
 !=======================================================================
-! First phase: Transform DENCOR (core charge) and
-!  CHTOT (pseudo chargedensity) to real space
+! gradient terms in stress tensor
+!          d    f_xc     grad rho  x grad rho
+! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
+!         d |grad rho|        |grad rho|
 !=======================================================================
-    spin: DO ISP=1,ISPIN
-      ! set CWORK to total real charge in reciprocal space
+      SIF11=0
+      SIF22=0
+      SIF33=0
+      SIF12=0
+      SIF23=0
+      SIF31=0
+      DO ISP=1,2
       DO I=1,GRIDC%RL%NP
-         DWORK(I,ISP)=(DENCOR(I)/ISPIN+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
+         SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+         SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+         SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+         SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+         SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+         SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+
+         SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
+         SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+         SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+         SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+         SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+         SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
       ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+      ENDDO
+      SIF11=SIF11*RINPL*LATT_CUR%OMEGA
+      SIF22=SIF22*RINPL*LATT_CUR%OMEGA
+      SIF33=SIF33*RINPL*LATT_CUR%OMEGA
+      SIF12=SIF12*RINPL*LATT_CUR%OMEGA
+      SIF23=SIF23*RINPL*LATT_CUR%OMEGA
+      SIF31=SIF31*RINPL*LATT_CUR%OMEGA
 
 !=======================================================================
-! now calculate the gradient of the chargedensity
+! calculate 
+!              d    f_xc     grad rho
+!        div  (------------  --------  ) 
+!              d |grad rho| |grad rho|
+!
+! in reciprocal space
 !=======================================================================
-      DO  I=1,GRIDC%RC%NP
-        CWGRAD(I,ISP)=CWORK(I,ISP)
+
+      DO I=1,GRIDC%RL%NP
+         ANAB1U= DWORK1(I,1)
+         ANAB2U= DWORK2(I,1)
+         ANAB3U= DWORK3(I,1)
+         ANAB1D= DWORK1(I,2)
+         ANAB2D= DWORK2(I,2)
+         ANAB3D= DWORK3(I,2)
+
+         DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
+         DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
+         DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
+
+         DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
+         DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
+         DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
       ENDDO
+
+      spin2: DO ISP=1,2
 ! x-component:
 !DIR$ IVDEP
 !$DIR FORCE_VECTOR
 !OCL NOVREC
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK1(I,ISP)
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
-       ENDDO
-! GRAD_x in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
       ENDDO
 
 ! y-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK2(I,ISP)
       ENDDO
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
-      ENDDO
-! grad_y in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
       ENDDO
 
 ! z-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK3(I,ISP)
       ENDDO
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
       ENDDO
-! grad_z in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+
+      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
+      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
+      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
+
+      ENDDO spin2
+
+
+!=======================================================================
+! Now prepare the rest:
+! (store rho in DWORK3 and quantity of above in DWORK1)
+!=======================================================================
+      XCENC=0._q
+      CVZERO=0._q
+      XCENCC=0._q
+
       DO I=1,GRIDC%RL%NP
-        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+!
+! | m |
+!
+         MAG_NORM=SQRT(ABS(DHTOT(I,2)*DHTOT(I,2)+ DHTOT(I,3)*DHTOT(I,3) + DHTOT(I,4)*DHTOT(I,4)))
+!
+! RHO1: \rho_up   = ( \rho_tot + | m | )/2
+! RHO2: \rho_down = ( \rho_tot - | m | )/2
+!
+         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)+MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+         RHO2= MAX(REAL((DHTOT(I,1)+DENCOR(I)-MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+
+         VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
+         VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
+         DWORK(I,1)=VXC1
+         DWORK(I,2)=VXC2
+         VXC = 0.5_q*(VXC1+VXC2)
+         CVZERO=CVZERO+VXC
+         XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
+         XCENC=XCENC  -VXC1* REAL( (DHTOT(I,1)+MAG_NORM)/2 ,KIND=q) &
+        &             -VXC2* REAL( (DHTOT(I,1)-MAG_NORM)/2 ,KIND=q)
       ENDDO
 
-! Compute the laplacian of the density
-      DO IDIR=1,3  
-         DO I=1,GRIDC%RC%NP  ! loop over all grid points NP in the reciprocal (RC) grid
-            ! index of grid point along three reciprocal lattice vectors (N1, N2, N3)
-            N1= MOD((I-1),GRIDC%RC%NROW) +1
-            NC= (I-1)/GRIDC%RC%NROW+1
-            N2= GRIDC%RC%I2(NC)
-            N3= GRIDC%RC%I3(NC)
-            ! convert to lattice vector component in direction x, y or z (corresponding to index J)
-            GG=(GRIDC%LPCTX(N1)*LATT_CUR%B(IDIR,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(IDIR,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(IDIR,3))**2
-            CWORK(I,ISP)=(CWGRAD(I,ISP))*GG*CITPI*CITPI
-            !write(*,*)'xcgrad:cwgrad ', CWORK4(I), CWGRAD(I), G1, G2, CITPI
+      CVZERO=CVZERO*RINPL
+      XCENC =(XCENC+EXC-EDCMU)*RINPL
+      XCENCC=(XCENCC+EXC)*RINPL
+      EXC   =EXC*RINPL
+      EDCMU =EDCMU*RINPL
+
+      SIF11=SIF11-XCENCC
+      SIF22=SIF22-XCENCC
+      SIF33=SIF33-XCENCC
+      XCSIF(1,1)=SIF11
+      XCSIF(2,2)=SIF22
+      XCSIF(3,3)=SIF33
+      XCSIF(1,2)=SIF12
+      XCSIF(2,1)=SIF12
+      XCSIF(2,3)=SIF23
+      XCSIF(3,2)=SIF23
+      XCSIF(3,1)=SIF31
+      XCSIF(1,3)=SIF31
+
+      CALLMPI( M_sum_s(GRIDC%COMM, 3, EXC, XCENC, EDCMU, 0._q ))
+      CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
+      CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+
+! Test dumps:
+      IF (IDUMP/=0) THEN
+         WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
+         WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
+         WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
+         WRITE(*,'(A,F24.14)') '    xcencc  =',XCENCC
+         WRITE(*,'(A,F24.14)') '     edcmu  =',EDCMU         
+      ENDIF
+
+      RETURN
+      END SUBROUTINE FEXCGS_METAGGA_NONCOL
+
+
+      SUBROUTINE MUxTAU(GRIDC,NCDIJ,LATT_CUR,DMUTOT,DKINEDEN,TAUC,DE)
+      USE prec
+      USE constant
+      USE lattice
+      USE mgrid
+      
+      IMPLICIT COMPLEX(q) (C)
+      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+
+      TYPE(grid_3d) GRIDC
+      TYPE(latt) LATT_CUR
+      INTEGER NCDIJ      
+      RGRID DMUTOT(DIMREAL(GRIDC%MPLWV),NCDIJ)
+      RGRID DKINEDEN(DIMREAL(GRIDC%MPLWV),NCDIJ),TAUC(GRIDC%RL%NP)
+      REAL(q) DE
+      ! local variables
+      INTEGER I
+
+      DE=0
+      RINPL=1._q/GRIDC%NPLWV
+
+      IF (NCDIJ==1) THEN
+         DO I=1,GRIDC%RL%NP
+            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I))
          ENDDO
-         CALL SETUNB(CWORK(1,ISP),GRIDC)
-         CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-         CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      ELSEIF (NCDIJ==2) THEN
          DO I=1,GRIDC%RL%NP
-            LAPLACIAN(I,ISP)=LAPLACIAN(I,ISP)+REAL( DWORK(I,ISP) ,KIND=q)
+            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I)/2._q)+ &
+           &       DMUTOT(I,2)*CHGCONJG(DKINEDEN(I,2)+TAUC(I)/2._q)
          ENDDO
-      ENDDO
-    
-      ENDDO spin
-      
+      ELSEIF (NCDIJ==4) THEN
+         DO I=1,GRIDC%RL%NP
+            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I)/2._q)+ &
+           &       DMUTOT(I,2)*CHGCONJG(DKINEDEN(I,2))+DMUTOT(I,3)*CHGCONJG(DKINEDEN(I,3))+ &
+           &        DMUTOT(I,4)*CHGCONJG((DKINEDEN(I,4)+TAUC(I)/2._q))
+         ENDDO
+      ELSE
+         WRITE(*,*) 'MUxTAU: internal error, NCDIJ=',NCDIJ
+         STOP
+      ENDIF
 
-!=======================================================================
-!  grad rho    d    f_xc
-! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
-! |grad rho|   d |grad rho|
+      DE=DE*RINPL*LATT_CUR%OMEGA/(RYTOEV*AUTOA2)
+
+      CALLMPI( M_sum_d(GRIDC%COMM,DE,1))
+
+      RETURN
+      END SUBROUTINE MUxTAU
+
+
+!************************** M E T A G G A . F ******************************
+! Implementation of the METAGGA according to 
+! Perdew, Kurth, Zupan and Blaha (PRL 82, 2544)
 !
-!  MIND: the factor OMEGA is difficult to understand:
-!   1/N sum_r energy_density * rho *OMEGA = Energy
-!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
-!=======================================================================
-      EXC=0; EDCMU=0
-#ifdef debug2
-      OPEN(100+I_DBG)
-      TAU_DBG=0; MU_DBG=0
-#endif
-      DO I=1,GRIDC%RL%NP
-         IF (ISPIN==2) THEN
-         ! Spin-polarized case
-            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+! All subroutines in this File were written by Robin Hirschl in Dec. 2000
+! using templates supplied by Georg Kresse
+! Thanks to Georg for his encouragement and support
+!
+!***************************************************************************
 
-            ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
-                          +DWORK3(I,1)*DWORK3(I,1))
 
-            ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
-                          +DWORK3(I,2)*DWORK3(I,2))
+!************************ SUBROUTINE METAEXC_PW ****************************
+!
+! this subroutine calculates  the total local potential CVTOT
+! which is the sum of the hartree potential, the exchange-correlation
+! potential and the ionic local potential
+! the routine also calculates the total local potential SV on the small
+! grid
+! on entry: 
+!  CHTOT(:,1) density
+!  CHTOT(:,2) respectively CHTOT(:,2:4) contain the magnetization
+! on return (LNONCOLLINEAR=.FALSE.):
+!  CVTOT(:,1) potential for up
+!  CVTOT(:,2) potential for down
+! on return (LNONCOLLINEAR=.TRUE.):
+!  CVTOT(:,1) 
+!
+! Robin Hirschl 20001220 (template: POTLOK from pot.F)
+!***************************************************************************
 
-            ABSNAB= (DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
-                    (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
-                    (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2))
-            ABSNAB=SQRT(ABSNAB)
+      SUBROUTINE METAEXC_PW(GRIDC,WDES,INFO,E,LATT_CUR,CHTOT,TAU,TAUW,DENCOR)
+      USE prec
+      USE mpimy
+      USE mgrid
+      USE pseudo
+      USE lattice
+      USE poscar
+      USE setexm
+      USE base
+      USE xcgrad
+      USE wave
+!#define robdeb
+      IMPLICIT NONE
 
-            ABSNABUP=MAX(ABSNABUP,NABMIN)
-            ABSNABDW=MAX(ABSNABDW,NABMIN)
-            ABSNAB=MAX(ABSNAB,2*NABMIN)
-!#define  correlation_ABS_DRHOUP_ABS_DRHOD
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-            ABSNAB=ABSNABUP+ABSNABDW
-#endif
-            ! kinetic energy density
-            TAUU=MAX(REAL(DKINEDEN(I,1)+TAUC(I)/2._q,KIND=q), TAUMIN)
-            TAUD=MAX(REAL(DKINEDEN(I,2)+TAUC(I)/2._q,KIND=q), TAUMIN)
-            
-            ! Laplacian of the density
-            LAPLUP=REAL(LAPLACIAN(I,1),KIND=q)
-            LAPLDW=REAL(LAPLACIAN(I,2),KIND=q)
-         ELSE
-         ! nonspin-polarized case
-         ! up and down-spin variables get half of the total values
-            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I))/2._q/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-            RHO2= RHO1
+      TYPE (grid_3d)     GRIDC
+      TYPE (wavedes)     WDES
+      TYPE (info_struct) INFO
+      TYPE (energy)      E
+      TYPE (latt)        LATT_CUR
+
+      COMPLEX(q) CHTOT(GRIDC%MPLWV, WDES%NCDIJ)
+      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)   ! kinetic energy density
+      RGRID ::  TAUW(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! Weizsaecker kinetic energy density
+      RGRID      DENCOR(GRIDC%RL%NP)
+      REAL(q)    TMPSIF(3,3)
+! work arrays 
+      COMPLEX(q), ALLOCATABLE::  CWORK(:,:),TMPWORK(:,:)
+      REAL(q) EXC,TMP1,TMP2
+      INTEGER ISP,I
+#ifdef robdeb
+      REAL(q) TOTKINE,TOTKINESP
+#endif  
+      
+      ALLOCATE(CWORK(GRIDC%MPLWV,WDES%NCDIJ),TMPWORK(GRIDC%MPLWV,WDES%ISPIN))
+!-----------------------------------------------------------------------
+!
+!  calculate the exchange correlation energy
+!
+!-----------------------------------------------------------------------
+      EXC     =0._q
+      E%EXCM =0._q
 
-            ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
-                 +DWORK3(I,1)*DWORK3(I,1))
+      xc: IF (ISLDAXC()) THEN
+     ! transform the charge density to real space
+         TMPSIF=0
 
-            ABSNABUP= 0.5_q*ABSNAB
-            ABSNABDW= 0.5_q*ABSNAB
+         DO ISP=1,WDES%NCDIJ
+            CALL FFT3D(CHTOT(1,ISP),GRIDC,1)
+         ENDDO
+         IF (WDES%ISPIN==2 .OR. WDES%LNONCOLLINEAR) THEN
 
-            ABSNABUP=MAX(ABSNABUP,NABMIN)
-            ABSNABDW=MAX(ABSNABDW,NABMIN)
-            ABSNAB=MAX(ABSNAB,2*NABMIN)
+            ! get the charge and the total magnetization
+            CALL MAG_DENSITY(CHTOT, CWORK, GRIDC, WDES%NCDIJ)
 
-            ! kinetic energy density
-            TAUU= MAX(0.5_q*REAL(DKINEDEN(I,1)+TAUC(I),KIND=q), TAUMIN)
-            TAUD= TAUU
+            IF (ISGGA()) THEN
+               ! unfortunately METAGGA_PW requires (up,down) density
+               ! instead of (rho,mag)
+               CALL RL_FLIP(CWORK, GRIDC, 2, .TRUE.)
+               ! GGA potential
+               CALL METAGGA_PW(2, GRIDC, LATT_CUR, CWORK, TMPWORK, TAU, TAUW, &
+                    DENCOR, TMP1, EXC, TMP2, TMPSIF)
+               CALL RL_FLIP(CWORK, GRIDC, 2, .FALSE.)
+            ENDIF
 
-            ! Laplacian of the density
-            LAPLUP=0.5_q*REAL(LAPLACIAN(I,1),KIND=q)
-            LAPLDW=LAPLUP
+         ELSE
+            IF (ISGGA()) THEN
+               CALL METAGGA_PW(1, GRIDC, LATT_CUR, CHTOT, TMPWORK, TAU, TAUW, &
+                    DENCOR, TMP1, EXC, TMP2, TMPSIF)
+            ENDIF
+                
          ENDIF
 
-         ! The CMBJ parameter may depend on the spatial position,
-         ! if so, it is set here to the right entry in CMBJ_AUX
-         CALL SET_CMBJ_PW(I)
+         E%EXCM=EXC
+         
+#ifdef robdeb         
+         TOTKINE=0;
+         DO ISP=1,WDES%NCDIJ
+            TOTKINESP=0.
+            DO I=1,GRIDC%RL%NP
+               TOTKINESP=TOTKINESP+TAU(I,ISP)
+            ENDDO
+            TOTKINESP=TOTKINESP*LATT_CUR%OMEGA/GRIDC%RL%NP
+            TOTKINE=TOTKINE+TOTKINESP
+            WRITE(*,*) 'ISP: ',ISP,' TotKinE PW grid: ',TOTKINESP
+         ENDDO
+         WRITE(*,*) 'TotKinEW PW grid: ',TOTKINE
+         WRITE(*,*) '--------------------------------------------------------'
+         WRITE(*,*) 'Exc PW grid:     ',E%EXCM
+         WRITE(*,*) '--------------------------------------------------------'
+#endif
 
-         CALL METAGGASPIN(&
-        &   RHO1*AUTOA3,RHO2*AUTOA3,ABSNABUP*AUTOA4,ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
-        &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU*EVTOH,TAUD*EVTOH, &
-        &   EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW)
+      ELSE xc
+         DO ISP=1,WDES%NCDIJ
+            CALL FFT3D(CHTOT(1,ISP),GRIDC,1)
+         ENDDO
+      ENDIF xc
 
-         RHO=RHO1+RHO2
+      ! CHTOT back to reciprocal space
+      DO ISP=1,WDES%NCDIJ
+         CALL FFT_RC_SCALE(CHTOT(1,ISP),CHTOT(1,ISP),GRIDC)
+         CALL SETUNB_COMPAT(CHTOT(1,ISP),GRIDC)
+      ENDDO 
+      
+      DEALLOCATE(CWORK,TMPWORK)
+#undef robdeb
+      RETURN
+    END SUBROUTINE METAEXC_PW
 
-         IF (LscMBJ()) CALL SUM_GRHO_OVER_RHO_PW(RHO*AUTOA3,ABSNAB*AUTOA4)
-#ifdef debug2
-         IF (ABS(MUUP)>1._q) THEN
-            WRITE(100+I_DBG,'(A,I9,7F18.11)') 'in ',I,RHO1,RHO2,ABSNABUP,ABSNABDW,ABSNAB,TAUU,TAUD
-            WRITE(100+I_DBG,'(A,I9,8F18.11)') 'out',I,EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW
-         ENDIF
-#endif
 
-         EXC=EXC+EXCL*RHO*RYTOEV*LATT_CUR%OMEGA
-         DVXC1=DVXC1*RYTOEV*AUTOA
-         DVXC2=DVXC2*RYTOEV*AUTOA
-         DVC_ =DVC_ *RYTOEV*AUTOA
+!************************ SUBROUTINE METAGGA_PW *****************************
+! RCS:  $Id: metagga.F,v 1.9 2003/06/27 13:22:19 kresse Exp kresse $
+!
+!  This routine calculates the meta GGA according to 
+!  Perdew, Kurth, Zupan and Blaha (PRL 82, 2544)
+!
+! the charge density must be passed in real 
+!  
+!
+! ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
+! We use a quite dangerous construction
+! to support  REAL(q) <-> COMPLEX(q)   fft s
+! several arrays are passed twice to the routine FEXCG_
+! on some compilers this makes troubles,
+! we call an external subroutine OPSYNC to avoid that compilers
+! move DO Loops around violating our assumption that
+! DWORK and CWORK point ot the same location
+! (the OPSYNC subroutine actually does nothing at all)
+! ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
+!***********************************************************************
 
-         ! Double counting contribution stemming from dExc/d\mu
-         EDCMU=EDCMU+0.5_q*(MUUP*TAUU+MUDW*TAUD-(MUUP+MUDW)*TAUC(I)/2._q)*LATT_CUR%OMEGA
-#ifdef debug2
-         TAU_DBG=TAU_+(TAUU+TAUD)*LATT_CUR%OMEGA
-         MU_DBG=MU_DBG+MUUP
-#endif
-         MUUP=0.5_q*MUUP*RYTOEV*AUTOA2 ! HSQDTM = (plancks CONSTANT/(2*PI))**2/(2*ELECTRON MASS)
-         MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
+!************************************************************************
+!
+! calculate the meta exchange correlation on a plane wave grid
+!
+!************************************************************************
 
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-         DVXC1=DVXC1+DVC_ 
-         DVXC2=DVXC2+DVC_ 
-         DVC_=0
-#endif
 
-         ! Store d f_xc / d \tau_up,down in DMUWORK if required
-         IF (LMU) THEN
-            DMUWORK(I,1)=MUUP
-            IF (ISPIN==2) DMUWORK(I,2)=MUDW
-         ENDIF
 
-         ! Store d f_x/ d (|\nabla \rho_up,down| ) / |\nabla \rho_up,down| in DWORK
-         ! and  d f_xc/ d \rho_up,down  in DWORKG
-         DWORK(I,1)  = DVXC1 / MAX(ABSNABUP, NABMIN)
-         DWORKG(I,1) = DEXC1*RYTOEV
-         IF (ISPIN==2) THEN
-            DWORK(I,2)  = DVXC2 / MAX(ABSNABDW, NABMIN)
-            DWORKG(I,2) = DEXC2*RYTOEV
-         ENDIF
-         ! Store d f_c/ d(|\nabla \rho|) / |\nabla \rho| in DVC
-         DVC(I)=DVC_/MAX(ABSNAB, NABMIN)
-      ENDDO
-#ifdef debug2
-      CLOSE(100+I_DBG)
-      I_DBG=I_DBG+1
-#endif
+ SUBROUTINE METAGGA_PW(ISPIN, GRIDC, LATT_CUR, CHTOT, CPOT, TAU, TAUW, DENCOR, &
+               XCENC, EXC, CVZERO, XCSIF)
+   USE prec
+   USE lattice
+   USE mpimy
+   USE mgrid
 
-#ifdef debug
-      REWIND(77)
-      REWIND(78)
-      REWIND(79)
-      I=1
-      DO NY=1,GRIDC%NGY
-         DO NX=1,GRIDC%NGX
-            ABSNAB= (DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
-                 (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
-                 (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2))
-            ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
-                   +DWORK3(I,1)*DWORK3(I,1))
-            ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
-                   +DWORK3(I,2)*DWORK3(I,2))
-            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
+   IMPLICIT COMPLEX(q) (C)
 
-            WRITE(77,'(2I4,3F14.3)') NX,NY,DWORK(I,1)*ABSNABUP,RHO1
-            WRITE(78,'(3F14.3)') DWORK(I,2)*ABSNABDW
-            WRITE(79,'(3F14.3)') DVC(I)*ABSNAB
+   IMPLICIT REAL(q) (A-B,D-H,O-Z)
 
-            I=I+1
-         ENDDO
-      ENDDO
-#endif      
-#ifdef debug2
-      OPEN(I_DBG+500-1)
-      I=1
-      DO N3=0,GRIDC%NGZ-1
-         X3=MOD(N3*1._q/GRIDC%NGZ+10.5,1._q)-0.5
-      DO N2=0,GRIDC%NGY-1
-         X2=MOD(N2*1._q/GRIDC%NGY+10.5,1._q)-0.5
-      DO N1=0,GRIDC%NGX-1
-         X1=MOD(N1*1._q/GRIDC%NGX+10.5,1._q)-0.5
-         X=X1*LATT_CUR%A(1,1)+X2*LATT_CUR%A(1,2)+X3*LATT_CUR%A(1,3)
-         Y=X1*LATT_CUR%A(2,1)+X2*LATT_CUR%A(2,2)+X3*LATT_CUR%A(2,3)
-         Z=X1*LATT_CUR%A(3,1)+X2*LATT_CUR%A(3,2)+X3*LATT_CUR%A(3,3)
-         IF (ABS(REAL(DMUWORK(I,1),q)*2._q/RYTOEV/AUTOA2) > 1._q) THEN
-            WRITE(I_DBG+500-1,'(3F14.7,F18.11)') X,Y,Z,REAL(DMUWORK(I,1),q)*2._q/RYTOEV/AUTOA2
-         ENDIF
-         I=I+1
-      ENDDO
-      ENDDO
-      ENDDO               
-      CLOSE(I_DBG+500-1)
-#endif
 
-!=======================================================================
-! gradient terms in stress tensor
-!          d    f_xc     grad rho  x grad rho
-! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
-!         d |grad rho|        |grad rho|
-!=======================================================================
-      SIF11=0
-      SIF22=0
-      SIF33=0
-      SIF12=0
-      SIF23=0
-      SIF31=0
-      IF (ISPIN==2) THEN
-         DO ISP=1,ISPIN
-         DO I=1,GRIDC%RL%NP
-            SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
-            SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-            SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-            SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-            SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-            SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
- 
-            SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-            SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-            SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-            SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-            SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-            SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-         ENDDO
-         ENDDO
-      ELSE
-         DO I=1,GRIDC%RL%NP
-            SIF11=SIF11+DWORK1(I,1)*DWORK1(I,1)*DWORK(I,1)/2
-            SIF22=SIF22+DWORK2(I,1)*DWORK2(I,1)*DWORK(I,1)/2
-            SIF33=SIF33+DWORK3(I,1)*DWORK3(I,1)*DWORK(I,1)/2
-            SIF12=SIF12+DWORK1(I,1)*DWORK2(I,1)*DWORK(I,1)/2
-            SIF23=SIF23+DWORK2(I,1)*DWORK3(I,1)*DWORK(I,1)/2
-            SIF31=SIF31+DWORK3(I,1)*DWORK1(I,1)*DWORK(I,1)/2
- 
-            SIF11=SIF11+DWORK1(I,1)*(DWORK1(I,1))*DVC(I)
-            SIF22=SIF22+DWORK2(I,1)*(DWORK2(I,1))*DVC(I)
-            SIF33=SIF33+DWORK3(I,1)*(DWORK3(I,1))*DVC(I)
-            SIF12=SIF12+DWORK1(I,1)*(DWORK2(I,1))*DVC(I)
-            SIF23=SIF23+DWORK2(I,1)*(DWORK3(I,1))*DVC(I)
-            SIF31=SIF31+DWORK3(I,1)*(DWORK1(I,1))*DVC(I)
-         ENDDO
-      ENDIF
-      SIF11=SIF11*RINPL*LATT_CUR%OMEGA
-      SIF22=SIF22*RINPL*LATT_CUR%OMEGA
-      SIF33=SIF33*RINPL*LATT_CUR%OMEGA
-      SIF12=SIF12*RINPL*LATT_CUR%OMEGA
-      SIF23=SIF23*RINPL*LATT_CUR%OMEGA
-      SIF31=SIF31*RINPL*LATT_CUR%OMEGA
+   INTEGER    ISPIN                     ! ISPIN 1 or 2
+   TYPE (grid_3d)     GRIDC             ! descriptor for grid
+   TYPE (latt)        LATT_CUR          ! lattice descriptor
+   COMPLEX(q) CHTOT(GRIDC%MPLWV,ISPIN)  ! charge density in real space
+   COMPLEX(q) TAU(GRIDC%MPLWV,ISPIN)    ! kinetic energy density
+   COMPLEX(q) TAUW(GRIDC%MPLWV,ISPIN)   ! Weizsaecker kinetic energy density
+   COMPLEX(q) CPOT(GRIDC%MPLWV,ISPIN)   ! exhcange correlation potential
+   COMPLEX(q) CMU (GRIDC%MPLWV,ISPIN)   ! exhcange correlation kinetic energy density
+   RGRID      DENCOR(GRIDC%RL%NP)       ! pseudo core charge density in real sp
 
-!=======================================================================
-! calculate 
-!              d    f_xc     grad rho
-!        div  (------------  --------  ) 
-!              d |grad rho| |grad rho|
-!
-! in reciprocal space
-!=======================================================================
+   REAL(q) :: XCENC                     ! double counting correction (unsupported)
+   REAL(q) :: EX,EC,EXC                 ! exchange correlation energy
+   REAL(q) :: CVZERO                    ! average xc potential
+   REAL(q) :: XCSIF(3,3)                ! stress tensor (unsupported)
+      
+! work arrays
+   COMPLEX(q),ALLOCATABLE:: CWGRAD(:,:)
+   REAL(q),ALLOCATABLE   :: DWORKG(:,:),DWORK1(:,:),DWORK2(:,:),DWORK3(:,:),DVC(:)
 
-      IF (ISPIN==2) THEN
-         DO I=1,GRIDC%RL%NP
-            ANAB1U= DWORK1(I,1)
-            ANAB2U= DWORK2(I,1)
-            ANAB3U= DWORK3(I,1)
-            ANAB1D= DWORK1(I,2)
-            ANAB2D= DWORK2(I,2)
-            ANAB3D= DWORK3(I,2)
+   NP1=GRIDC%RL%NP
+   ALLOCATE(CWGRAD(GRIDC%MPLWV,ISPIN), DWORKG(NP1,ISPIN), &
+        DWORK1(NP1,ISPIN),DWORK2(NP1,ISPIN),DWORK3(NP1,ISPIN),DVC(NP1))
+   
+   CALL METAGGA_PW_(ISPIN,GRIDC,LATT_CUR, XCENC,EXC,CVZERO,XCSIF, &
+        CWGRAD,CHTOT,CPOT,TAU,TAUW, &
+        CWGRAD,CHTOT,CPOT,TAU,TAUW, &
+        DENCOR,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
+   DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
+ RETURN
+ END SUBROUTINE METAGGA_PW
 
-            DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
-            DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
-            DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
 
-            DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
-            DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
-            DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
-         ENDDO
-      ELSE
-         DO I=1,GRIDC%RL%NP
-            ANAB1U= DWORK1(I,1)/2
-            ANAB2U= DWORK2(I,1)/2
-            ANAB3U= DWORK3(I,1)/2
-            ANAB1D= ANAB1U
-            ANAB2D= ANAB2U
-            ANAB3D= ANAB3U
+!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
+! Mind CWORK and DWORK point actually to the same storagelocation
+! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
+! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
+! so we can interchange both arrays arbitrarily
 
-            DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
-            DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
-            DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
-         ENDDO
-      ENDIF
+ SUBROUTINE METAGGA_PW_(ISPIN,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
+      CWGRAD,CHTOT,CWORK,CKE,CWKE, &
+      DWGRAD,DHTOT,DWORK,DKE,DWKE, &
+      DENCOR,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
 
-      spin2: DO ISP=1,ISPIN
-! x-component:
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
+   USE prec
+   USE lattice
+   USE mpimy
+   USE mgrid
+   USE constant
+
+   IMPLICIT COMPLEX(q) (C)
+   IMPLICIT REAL(q) (A-B,D-H,O-Z)
+
+   INTEGER    ISPIN                     ! ISPIN 1 or 2
+   TYPE (grid_3d)     GRIDC             ! descriptor for grid
+   TYPE (latt)        LATT_CUR          ! lattice descriptor
+
+   
+   RGRID      DENCOR(GRIDC%RL%NP)       ! pseudo core charge density in real sp
+   REAL(q) :: XCENC                     ! double counting correction (unsupported)
+   REAL(q) :: EXC                       ! exchange correlation energy
+   REAL(q) :: CVZERO                    ! average xc potential
+   REAL(q) :: XCSIF(3,3)                ! stress tensor (unsupported)
+
+   COMPLEX(q) CHTOT (GRIDC%MPLWV,ISPIN),CWORK(GRIDC%MPLWV,ISPIN), &
+              CWGRAD(GRIDC%MPLWV,ISPIN),CKE(GRIDC%MPLWV,ISPIN),CWKE(GRIDC%MPLWV,ISPIN)
+   RGRID      DHTOT (DIMREAL(GRIDC%MPLWV),ISPIN),DWORK(DIMREAL(GRIDC%MPLWV),ISPIN), &
+              DWGRAD(DIMREAL(GRIDC%MPLWV),ISPIN),DKE(DIMREAL(GRIDC%MPLWV),ISPIN), &
+              DWKE(DIMREAL(GRIDC%MPLWV),ISPIN)
+   REAL(q)    DWORKG(GRIDC%RL%NP,ISPIN),DWORK1(GRIDC%RL%NP,ISPIN), &
+              DWORK2(GRIDC%RL%NP,ISPIN),DWORK3(GRIDC%RL%NP,ISPIN), &
+              DVC(GRIDC%RL%NP)
+   ! set to one for error-dumps
+#ifdef MPI
+   NODE_ME=GRIDC%COMM%NODE_ME
+   IONODE =GRIDC%COMM%IONODE
+   IDUMP=0
+#ifdef debug
+       IF (NODE_ME==IONODE) IDUMP=1
+#endif
+#else
+   IDUMP=0
+#ifdef debug
+     IDUMP=1
+#endif
+#endif
+
+! important constants
+   RINPL=1._q/GRIDC%NPLWV                       ! Scaling of Energy
+   EVTOH=1._q/(2.*HSQDTM)*AUTOA5                ! KinEDens eV to Hartree
+!=======================================================================
+! First phase: Transform DENCOR (core charge) and
+!  CHTOT (pseudo chargedensity) to reciprocal space space
+!=======================================================================
+   spin: DO ISP=1,ISPIN
+      ! set CWORK to total real charge in reciprocal space
       DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK1(I,ISP)
+         DWORK(I,ISP)=(DENCOR(I)/ISPIN+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
       ENDDO
       CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
       CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
-
+!=======================================================================
+! now calculate the gradient of the chargedensity
+!=======================================================================
+      DO  I=1,GRIDC%RC%NP
+        CWGRAD(I,ISP)=CWORK(I,ISP)
+      ENDDO
+! x-component:
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
-
          GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
+         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
+       ENDDO
+! grad_x in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
       ENDDO
-
+!
 ! y-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK2(I,ISP)
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
       ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
-
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
-
          GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
+         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
+      ENDDO
+! grad_y in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
       ENDDO
 
+
 ! z-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK3(I,ISP)
+      DO  I=1,GRIDC%RC%NP
+        CWORK(I,ISP)=CWGRAD(I,ISP)
       ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
+!DIR$ IVDEP
+!$DIR FORCE_VECTOR
+!OCL NOVREC
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
-
          GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
+         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
       ENDDO
-
-      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
-      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
-      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
-
-      ENDDO spin2
+! grad_z in real space:
+      CALL SETUNB(CWORK(1,ISP),GRIDC)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      DO I=1,GRIDC%RL%NP
+        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+      ENDDO
+   ENDDO spin
 
 !=======================================================================
-! Now prepare the rest:
-! (store rho in DWORK3 and quantity of above in DWORK1)
+!  grad rho    d    f_xc
+! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
+! |grad rho|   d |grad rho|
+!
+!  MIND: the factor OMEGA is difficult to understand:
+!   1/N sum_r energy_density * rho *OMEGA = Energy
+!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
 !=======================================================================
-      XCENC=0._q
-      CVZERO=0._q
-      XCENCC=0._q
-
+   EX=0; EC=0
+   DO I=1,GRIDC%RL%NP
       IF (ISPIN==2) THEN
-         DO I=1,GRIDC%RL%NP
-         ! Spin-polarized case
-            RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-            RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-
-            VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
-            VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
-            DWORK(I,1)=VXC1
-            DWORK(I,2)=VXC2
-            VXC = 0.5_q*(VXC1+VXC2)
-            CVZERO=CVZERO+VXC
-            XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
-            XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q) -VXC2* REAL( DHTOT(I,2) ,KIND=q)
-         ENDDO
+! spin polarized calculation
+         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
+         RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
+         
+         ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
+              +DWORK3(I,1)*DWORK3(I,1))
+         
+         ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
+              +DWORK3(I,2)*DWORK3(I,2))
+         
+         ABSNAB= SQRT((DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
+              (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
+              (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2)))
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+         ABSNAB=ABSNABUP+ABSNABDW
+#endif
+! kinetic energy density
+         TAUU=MAX(REAL(DKE(I,1),KIND=q),1.E-10_q)
+         TAUD=MAX(REAL(DKE(I,2),KIND=q),1.E-10_q)
+! Weizsaecker kinetic energy density 
+         TAUWU=MAX(REAL(DWKE(I,1),KIND=q),1.E-10_q)
+         TAUWD=MAX(REAL(DWKE(I,2),KIND=q),1.E-10_q)
+! correct kinetic energy densities
+! charge density is not the same as the one for which kinetic energy was
+! calculated (e.g. augmentation charge)
+! use difference in Weizsaecker kinetic energy density for correction
+!!$         IF (RHO1>0) THEN
+!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABUP**2/RHO1,1E-10_q)
+!!$            TAUDIFF=TAUWTOT-TAUWU
+!!$            TAUWU=TAUWU+TAUDIFF
+!!$            TAUU=TAUU+TAUDIFF
+!!$         ENDIF
+!!$         IF (RHO2>0) THEN
+!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABDW**2/RHO2,1E-10_q)
+!!$            TAUDIFF=TAUWTOT-TAUWD
+!!$            TAUWD=TAUWD+TAUDIFF
+!!$            TAUD=TAUD+TAUDIFF
+!!$         ENDIF
       ELSE
-         DO I=1,GRIDC%RL%NP      
-         ! nonspin-polarized case
-            RHO= MAX(REAL((DHTOT(I,1)+DENCOR(I))/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-            
-            VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
-            
-            DWORK(I,1)=VXC1
-            CVZERO=CVZERO+VXC1
-            XCENCC=XCENCC-VXC1*RHO*LATT_CUR%OMEGA
-            XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q)  
-         ENDDO
+! non spin polarized calculation
+! up and down-spin variables get half of the total values
+         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I))/2._q/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
+         RHO2= RHO1
+         ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
+              +DWORK3(I,1)*DWORK3(I,1))
+         ABSNABUP= 0.5_q*ABSNAB
+         ABSNABDW= 0.5_q*ABSNAB
+! kinetic energy density
+         TAUU= MAX(0.5_q*REAL(DKE(I,1),KIND=q),1.E-10_q)
+! Weizsaecker kinetic energy density 
+         TAUWU= MAX(0.5_q*REAL(DWKE(I,1),KIND=q),1.E-10_q)
+! correct kinetic energy densities
+! charge density is not the same as the one for which kinetic energy was
+! calculated (e.g. augmentation charge)
+! use difference in Weizsaecker kinetic energy density for correction
+!!$         IF (RHO1>0) THEN
+!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABUP**2/RHO1,1E-10_q)
+!!$            TAUDIFF=TAUWTOT-TAUWU
+!!$            TAUWU=TAUWU+TAUDIFF
+!!$            TAUU=TAUU+TAUDIFF
+!!$         ENDIF
+         TAUD= TAUU
+         TAUWD=TAUWU        
       ENDIF
 
-      CVZERO=CVZERO*RINPL
-      XCENC =(XCENC+EXC-EDCMU)*RINPL
-      XCENCC=(XCENCC+EXC)*RINPL
-      EXC   =EXC*RINPL
-      EDCMU =EDCMU*RINPL
 
-      SIF11=SIF11-XCENCC
-      SIF22=SIF22-XCENCC
-      SIF33=SIF33-XCENCC
-      XCSIF(1,1)=SIF11
-      XCSIF(2,2)=SIF22
-      XCSIF(3,3)=SIF33
-      XCSIF(1,2)=SIF12
-      XCSIF(2,1)=SIF12
-      XCSIF(2,3)=SIF23
-      XCSIF(3,2)=SIF23
-      XCSIF(3,1)=SIF31
-      XCSIF(1,3)=SIF31
+! All parameters for subroutine Metagga must be passed in Hartree
+!      WRITE(77,'(I6,9E14.4)') I,RHO1*AUTOA3, &
+!           TAUU*EVTOH,TAUD*EVTOH,TAUWU,TAUWD,TAUWU/(TAUU*EVTOH), &
+!           TAUWD/(TAUD*EVTOH),ECL*LATT_CUR%OMEGA/AUTOA3,DENCOR(I)/(2*LATT_CUR%OMEGA)    
 
-      CALLMPI( M_sum_s(GRIDC%COMM, 3, EXC, XCENC, EDCMU, 0._q))
-      CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
-      CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+      CALL METAGGA(RHO1*AUTOA3,RHO2*AUTOA3, &
+     &               ABSNABUP*AUTOA4, ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
+     &           TAUU*EVTOH,TAUD*EVTOH, &
+     &           TAUWU*EVTOH,TAUWD*EVTOH,EXL,ECL,I)
 
-! Test dumps:
-      IF (IDUMP/=0) THEN
-         WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
-         WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
-         WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
-         WRITE(*,'(A,F24.14)') '    xcencc  =',XCENCC
-         WRITE(*,'(A,F24.14)') '     edcmu  =',EDCMU         
-#ifdef debug2
-         WRITE(*,'(A,F24.14)') '     tau    =',TAU_DBG*RINPL
-         WRITE(*,'(A,F24.14)') '     mu     =',MU_DBG*RINPL
-#endif
-      ENDIF
+      DEXC1=0; DEXC2=0; DVXC1=0; DVXC2=0; DVC_=0
+!     RHO=RHO1+RHO2
 
-      RETURN
-      END SUBROUTINE FEXCGS_METAGGA_
+! Conversion back to eV
+      EX=EX+2*EXL*RYTOEV*LATT_CUR%OMEGA/AUTOA3
+      EC=EC+2*ECL*RYTOEV*LATT_CUR%OMEGA/AUTOA3
 
+! ATTENTION ATTENTION ATTENTION
+! DWORKG is   N O T   properly defined in this function
+! should be |nabla rho|
 
-!***************** SUBROUTINE FEXCGS_METAGGA_NONCOL ********************
+      DVXC1=DVXC1*RYTOEV*AUTOA
+      DVXC2=DVXC2*RYTOEV*AUTOA
+      DVC_ =DVC_ *RYTOEV*AUTOA
+#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
+      DVXC1=DVXC1+DVC_ 
+      DVXC2=DVXC2+DVC_ 
+      DVC_=0
+#endif
 !
-!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
-! Mind CWORK and DWORK point actually to the same storagelocation
-! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
-! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
-! so we can interchange both arrays arbitrarily
+!   store d f/ d (|d rho| ) / |d rho|  in DWORK
 !
-!***********************************************************************
-
-      SUBROUTINE FEXCGS_METAGGA_NONCOL(LPOT,LMU,&
-     &   NCDIJ,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-     &   CWGRAD,CHTOT,CWORK,CKINEDEN,DWGRAD,DHTOT,DWORK,DKINEDEN, &
-     &   DENCOR,TAUC,DWORKG,DWORK1,DWORK2,DWORK3,DVC, &
-     &   DMUWORK &
-     &)
-      USE prec
-      USE lattice
-      USE mpimy
-      USE mgrid
-      USE constant
-      USE metalib
-      USE setxcmeta
-
-      IMPLICIT COMPLEX(q) (C)
-
-      IMPLICIT REAL(q) (A-B,D-H,O-Z)
-
-      TYPE (grid_3d)     GRIDC
-      TYPE (latt)        LATT_CUR
-
-      LOGICAL LPOT,LMU
-
-      COMPLEX(q) CWGRAD(GRIDC%MPLWV,NCDIJ),CHTOT(GRIDC%MPLWV,NCDIJ), &
-     &   CKINEDEN(GRIDC%MPLWV,NCDIJ),CWORK(GRIDC%MPLWV,NCDIJ)
-      RGRID DWGRAD(DIMREAL(GRIDC%MPLWV),NCDIJ),DHTOT(DIMREAL(GRIDC%MPLWV),NCDIJ), &
-     &   DKINEDEN(DIMREAL(GRIDC%MPLWV),NCDIJ),DWORK(DIMREAL(GRIDC%MPLWV),NCDIJ)
-
-      RGRID DENCOR(GRIDC%RL%NP),TAUC(GRIDC%RL%NP)
-      REAL(q) XCSIF(3,3)
-      REAL(q) DWORKG(GRIDC%RL%NP,NCDIJ/2),DWORK1(GRIDC%RL%NP,NCDIJ), &
-     &   DWORK2(GRIDC%RL%NP,NCDIJ),DWORK3(GRIDC%RL%NP,NCDIJ),DVC(GRIDC%RL%NP)
-      REAL(q) MAG_NORM,NABMAG(3),TAU_NORM,TAU_DOT_MDIR,LAP_NORM,LAP_DOT_MDIR
+!      DWORK(I,1)  = DVXC1 / MAX(DWORKG(I,1),1.E-10_q)
+!      DWORK(I,2)  = DVXC2 / MAX(DWORKG(I,2),1.E-10_q)
+!      DVC(I)      = DVC_  / MAX(ABSNAB,1.E-10_q)
+!
+!   store d f/ d rho  in DWORKG
+!
+!      DWORKG(I,1) = DEXC1*RYTOEV
+!      DWORKG(I,2) = DEXC2*RYTOEV
+   ENDDO
+   
+   ! OUTPUT OF MEGGA EXCHANGE AND CORRELATION
+!   WRITE(*,*)
+!   WRITE(*,'(2(A,F14.6))') 'Exchange energy    eV:',EX*RINPL,'  Hartree:',EX*RINPL/(2*RYTOEV)
+!   WRITE(*,'(2(A,F14.6))') 'Correlation energy eV:',EC*RINPL,'  Hartree:',EC*RINPL/(2*RYTOEV)
+!   WRITE(*,*)
 
-      RGRID  DMUWORK(DIMREAL(GRIDC%MPLWV),NCDIJ)
+! collect results from all nodes. Can be deleted as soon as the
+! return command is shifted further down.   
+   CALLMPI( M_sum_s(GRIDC%COMM, 2, EX, EC, 0._q , 0._q ))
 
-      REAL(q) LAPLUP,LAPLDW,LAPLACIAN(GRIDC%RL%NP,NCDIJ)
-      REAL(q) MUUP,MUDW,EDCMU
-      REAL(q) :: CHGMIN=1E-10_q, NABMIN=1E-10_q, TAUMIN=1E-10_q
-      
-! set to one for error-dumps
-#ifdef MPI
-      NODE_ME=GRIDC%COMM%NODE_ME
-      IONODE =GRIDC%COMM%IONODE
-      IDUMP=0
-#ifdef debug
-      IF (NODE_ME==IONODE) IDUMP=1
-#endif
-#else
-      IDUMP=0
-#ifdef debug
-      IDUMP=1
-#endif
-#endif
+   EXC=(EX+EC)*RINPL
+   RETURN
+!
+! FOR LATER USE WE HAVE INCLUDED THE RELEVANT ROUTINES FOR THE
+! EVALUATION OF THE POTENTIALS AND OF THE STRESS-TENSOR
+!
 
-      LAPLACIAN=0
+!=======================================================================
+! gradient terms in stress tensor
+!          d    f_xc     grad rho  x grad rho
+! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
+!         d |grad rho|        |grad rho|
+!=======================================================================
+!
+!    verify that this sum is correct also when ISPIN=2
+!
+   SIF11=0
+   SIF22=0
+   SIF33=0
+   SIF12=0
+   SIF23=0
+   SIF31=0
+   DO ISP=1,ISPIN
+      DO I=1,GRIDC%RL%NP
+        SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+        SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+        SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+        SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
+        SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
+        SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
 
-      RINPL=1._q/GRIDC%NPLWV                    ! Scaling of Energy
-      EVTOH=1._q/(2.*HSQDTM)*AUTOA5             ! KinEDens eV to Hartree
+        SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
+        SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+        SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+        SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
+        SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
+        SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
+      ENDDO
+   ENDDO
+   SIF11=SIF11*RINPL*LATT_CUR%OMEGA
+   SIF22=SIF22*RINPL*LATT_CUR%OMEGA
+   SIF33=SIF33*RINPL*LATT_CUR%OMEGA
+   SIF12=SIF12*RINPL*LATT_CUR%OMEGA
+   SIF23=SIF23*RINPL*LATT_CUR%OMEGA
+   SIF31=SIF31*RINPL*LATT_CUR%OMEGA
 
 !=======================================================================
-! First phase: Transform DENCOR (core charge) and
-!  CHTOT (pseudo chargedensity) to real space
+! calculate 
+!              d    f_xc     grad rho
+!        div  (------------  --------  ) 
+!              d |grad rho| |grad rho|
+!
+! in reciprocal space
 !=======================================================================
-    spin: DO ISP=1,NCDIJ
-      IF (ISP==1) THEN
-      ! Add core charge density to pseudo charge density
-         DO I=1,GRIDC%RL%NP
-            DWORK(I,ISP)=(DENCOR(I)+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
-         ENDDO
-      ELSE
-         DO I=1,GRIDC%RL%NP
-            DWORK(I,ISP)=DHTOT(I,ISP)*RINPL/LATT_CUR%OMEGA
-         ENDDO
-      ENDIF
+   
+   DO I=1,GRIDC%RL%NP
+      ANAB1U= DWORK1(I,1)
+      ANAB2U= DWORK2(I,1)
+      ANAB3U= DWORK3(I,1)
+      ANAB1D= DWORK1(I,2)
+      ANAB2D= DWORK2(I,2)
+      ANAB3D= DWORK3(I,2)
 
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+      DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
+      DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
+      DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
 
-!=======================================================================
-! now calculate the gradient of the chargedensity
-!=======================================================================
-      DO  I=1,GRIDC%RC%NP
-        CWGRAD(I,ISP)=CWORK(I,ISP)
-      ENDDO
+      DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
+      DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
+      DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
+   ENDDO
+
+   spin2: DO ISP=1,ISPIN
 ! x-component:
 !DIR$ IVDEP
 !$DIR FORCE_VECTOR
 !OCL NOVREC
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK1(I,ISP)
+      ENDDO
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
-       ENDDO
-! grad_x in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
       ENDDO
 
 ! y-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK2(I,ISP)
       ENDDO
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
-      ENDDO
-! grad_y in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
       ENDDO
 
 ! z-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
+      DO I=1,GRIDC%RL%NP
+        DWORK(I,ISP) = DWORK3(I,ISP)
       ENDDO
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
+      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
+      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+
       DO I=1,GRIDC%RC%NP
          N1= MOD((I-1),GRIDC%RC%NROW) +1
          NC= (I-1)/GRIDC%RC%NROW+1
          N2= GRIDC%RC%I2(NC)
          N3= GRIDC%RC%I3(NC)
+
          GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
-      ENDDO
-! grad_z in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
+         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
       ENDDO
 
-! Compute the laplacian of the density
-      DO IDIR=1,3  
-         DO I=1,GRIDC%RC%NP  ! loop over all grid points NP in the reciprocal (RC) grid
-            ! index of grid point along three reciprocal lattice vectors (N1, N2, N3)
-            N1= MOD((I-1),GRIDC%RC%NROW) +1
-            NC= (I-1)/GRIDC%RC%NROW+1
-            N2= GRIDC%RC%I2(NC)
-            N3= GRIDC%RC%I3(NC)
-            ! convert to lattice vector component in direction x, y or z (corresponding to index J)
-            GG=(GRIDC%LPCTX(N1)*LATT_CUR%B(IDIR,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(IDIR,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(IDIR,3))**2
-            !write(*,*)'xcgrad:cwgrad ', CWORK4(I), CWGRAD(I), G1, G2, CITPI
-            CWORK(I,ISP)=(CWGRAD(I,ISP))*GG*CITPI*CITPI
-         ENDDO
-         CALL SETUNB(CWORK(1,ISP),GRIDC)
-         CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-         CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-         DO I=1,GRIDC%RL%NP
-            LAPLACIAN(I,ISP)=LAPLACIAN(I,ISP)+REAL( DWORK(I,ISP) ,KIND=q)
-         ENDDO
-      ENDDO
-      
-      ENDDO spin
+      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
+      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
+      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
+!
+   ENDDO spin2
 
-!=======================================================================
-!  grad rho    d    f_xc
-! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
-! |grad rho|   d |grad rho|
 !
-!  MIND: the factor OMEGA is difficult to understand:
-!   1/N sum_r energy_density * rho *OMEGA = Energy
-!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
 !=======================================================================
-      EXC=0; EDCMU=0
-      DO I=1,GRIDC%RL%NP
-!     
-! | m |
-!
-         MAG_NORM=MAX(SQRT(ABS( &
-        &    DHTOT(I,2)*DHTOT(I,2)+DHTOT(I,3)*DHTOT(I,3)+DHTOT(I,4)*DHTOT(I,4))), CHGMIN)        
-!       
-! RHO1: \rho_up   = ( \rho_tot + | m | )/2
-! RHO2: \rho_down = ( \rho_tot - | m | )/2
-!
-         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)+MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-         RHO2= MAX(REAL((DHTOT(I,1)+DENCOR(I)-MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-!        
-! \nabla | m |
-!
-         NABMAG(1)=(DWORK1(I,2)*DHTOT(I,2)+DWORK1(I,3)*DHTOT(I,3)+DWORK1(I,4)*DHTOT(I,4))/MAG_NORM
-         NABMAG(2)=(DWORK2(I,2)*DHTOT(I,2)+DWORK2(I,3)*DHTOT(I,3)+DWORK2(I,4)*DHTOT(I,4))/MAG_NORM
-         NABMAG(3)=(DWORK3(I,2)*DHTOT(I,2)+DWORK3(I,3)*DHTOT(I,3)+DWORK3(I,4)*DHTOT(I,4))/MAG_NORM
-!        
-! | ( \nabla \rho + \nabla | m | )/2 |
-!
-         ABSNABUP=SQRT( &
-        &            (DWORK1(I,1)+NABMAG(1))*(DWORK1(I,1)+NABMAG(1)) + &
-        &             (DWORK2(I,1)+NABMAG(2))*(DWORK2(I,1)+NABMAG(2)) + &
-        &              (DWORK3(I,1)+NABMAG(3))*(DWORK3(I,1)+NABMAG(3)) ) / 2
-!
-! | ( \nabla \rho - \nabla | m | )/2 |
-!
-         ABSNABDW=SQRT( &
-        &            (DWORK1(I,1)-NABMAG(1))*(DWORK1(I,1)-NABMAG(1)) + &
-        &             (DWORK2(I,1)-NABMAG(2))*(DWORK2(I,1)-NABMAG(2)) + &
-        &              (DWORK3(I,1)-NABMAG(3))*(DWORK3(I,1)-NABMAG(3)) ) / 2
-!
-! | \nabla \rho |
-!
-         ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1)+DWORK3(I,1)*DWORK3(I,1))
-!
-! Refill DWORK[1..3](:,2) with ( \nabla \rho - \nabla | m | )/2
-!
-         DWORK1(I,2)=(DWORK1(I,1)-NABMAG(1))/2
-         DWORK2(I,2)=(DWORK2(I,1)-NABMAG(2))/2
-         DWORK3(I,2)=(DWORK3(I,1)-NABMAG(3))/2
+! Now prepare the rest:
+! (store rho in DWORK3 and quantity of above in DWORK1)
+!=======================================================================
+   XCENC=0._q
+   CVZERO=0._q
+   XCENCC=0._q
+
+   DO I=1,GRIDC%RL%NP
+      RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), 1E-10_q)
+      RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), 1E-10_q)
+
+      VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
+      VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
+      DWORK(I,1)=VXC1
+      DWORK(I,2)=VXC2
+      VXC = 0.5_q*(VXC1+VXC2)
+      CVZERO=CVZERO+VXC
+      XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
+      XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q) -VXC2* REAL( DHTOT(I,2) ,KIND=q)
+   ENDDO
+
+   EXC   =EXC
+   CVZERO=CVZERO*RINPL
+   XCENC =(XCENC+EXC)*RINPL
+   XCENCC=(XCENCC+EXC)*RINPL
+   EXC=EXC*RINPL
+
+   SIF11=SIF11-XCENCC
+   SIF22=SIF22-XCENCC
+   SIF33=SIF33-XCENCC
+   XCSIF(1,1)=SIF11
+   XCSIF(2,2)=SIF22
+   XCSIF(3,3)=SIF33
+   XCSIF(1,2)=SIF12
+   XCSIF(2,1)=SIF12
+   XCSIF(2,3)=SIF23
+   XCSIF(3,2)=SIF23
+   XCSIF(3,1)=SIF31
+   XCSIF(1,3)=SIF31
+
+   CALLMPI( M_sum_s(GRIDC%COMM, 2, EXC, XCENC, 0._q , 0._q ))
+   CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
+   CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+
+! Test dumps:
+   IF (IDUMP/=0) THEN
+      WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
+      WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
+      WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
+   ENDIF
+   RETURN
+ END SUBROUTINE METAGGA_PW_
+
+
+
+!************************ SUBROUTINE GGASPINCOR ************************
 !
-! Refill DWORK[1..3](:,1) with ( \nabla \rho + \nabla | m | )/2
+!  calculate the correlation energy density according to the
+!  Perdew, Burke and Ernzerhof functional
 !
-         DWORK1(I,1)=(DWORK1(I,1)+NABMAG(1))/2
-         DWORK2(I,1)=(DWORK2(I,1)+NABMAG(2))/2
-         DWORK3(I,1)=(DWORK3(I,1)+NABMAG(3))/2
-
-!#define  correlation_ABS_DRHOUP_ABS_DRHOD
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-         ABSNAB=ABSNABUP+ABSNABDW
-#endif
-         !     
-         ! | m |
-         !
-         TAU_NORM=MAX(SQRT(ABS( &
-        &    DKINEDEN(I,2)*DKINEDEN(I,2)+DKINEDEN(I,3)*DKINEDEN(I,3)+DKINEDEN(I,4)*DKINEDEN(I,4))), TAUMIN)        
-         TAU_DOT_MDIR=(DHTOT(I,2)*DKINEDEN(I,2)+DHTOT(I,3)*DKINEDEN(I,3)+DHTOT(I,4)*DKINEDEN(I,4))/MAG_NORM
-         !       
-         ! kinetic energy density
-         ! TAUU: \tau_up   = ( \tau_tot + | m | )/2
-         ! TAUD: \tau_down = ( \tau_tot - | m | )/2
-         !
-!        TAUU=MAX(REAL((DKINEDEN(I,1)+TAU_NORM)/2,KIND=q), TAUMIN)
-!        TAUD=MAX(REAL((DKINEDEN(I,1)-TAU_NORM)/2,KIND=q), TAUMIN)
-         TAUU=MAX(REAL((DKINEDEN(I,1)+TAU_DOT_MDIR)/2._q+TAUC(I)/2._q,KIND=q), TAUMIN)
-         TAUD=MAX(REAL((DKINEDEN(I,1)-TAU_DOT_MDIR)/2._q+TAUC(I)/2._q,KIND=q), TAUMIN)
-            
-         !     
-         ! | m |
-         !
-         LAP_NORM=MAX(SQRT(ABS( &
-        &    LAPLACIAN(I,2)*LAPLACIAN(I,2)+LAPLACIAN(I,3)*LAPLACIAN(I,3)+LAPLACIAN(I,4)*LAPLACIAN(I,4))), TAUMIN)
-         LAP_DOT_MDIR=(DHTOT(I,2)*LAPLACIAN(I,2)+DHTOT(I,3)*LAPLACIAN(I,3)+DHTOT(I,4)*LAPLACIAN(I,4))/MAG_NORM
-         !       
-         ! Laplacian of the density
-!        LAPLUP=REAL((LAPLACIAN(I,1)+LAP_NORM)/2,KIND=q)
-!        LAPLDW=REAL((LAPLACIAN(I,1)-LAP_NORM)/2,KIND=q)
-         LAPLUP=REAL((LAPLACIAN(I,1)+LAP_DOT_MDIR)/2,KIND=q)
-         LAPLDW=REAL((LAPLACIAN(I,1)-LAP_DOT_MDIR)/2,KIND=q)
+!***********************************************************************
 
-         ! The CMBJ parameter may depend on the spatial position,
-         ! if so, it is set here to the right entry in CMBJ_AUX
-         CALL SET_CMBJ_PW(I)
+    SUBROUTINE GGASPINCOR(D1,D2,DDA, EC)
 
-         CALL METAGGASPIN(&
-        &   RHO1*AUTOA3,RHO2*AUTOA3,ABSNABUP*AUTOA4,ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
-        &   LAPLUP*AUTOA5,LAPLDW*AUTOA5,TAUU*EVTOH,TAUD*EVTOH, &
-        &   EXCL,DEXC1,DEXC2,DVXC1,DVXC2,DVC_,MUUP,MUDW)
+!     D1   density up
+!     D2   density down
+!     DDA  |gradient of the total density|
 
-         RHO=RHO1+RHO2
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
+      PARAMETER (THRD=1._q/3._q)
 
-         IF (LscMBJ()) CALL SUM_GRHO_OVER_RHO_PW(RHO*AUTOA3,ABSNAB*AUTOA4)
+      D=D1+D2
+      DTHRD=exp(log(D)*THRD)
+      RS=(0.75_q/PI)**THRD/DTHRD
 
-         EXC=EXC+EXCL*RHO*RYTOEV*LATT_CUR%OMEGA
-         DVXC1=DVXC1*RYTOEV*AUTOA
-         DVXC2=DVXC2*RYTOEV*AUTOA
-         DVC_ =DVC_ *RYTOEV*AUTOA
+      ZETA=(D1-D2)/D
+      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
 
-         ! Double counting contribution stemming from dExc/d\mu
-         EDCMU=EDCMU+0.5_q*(MUUP*TAUU+MUDW*TAUD-(MUUP+MUDW)*TAUC(I)/2._q)*LATT_CUR%OMEGA
+      FK=(3._q*PI*PI)**THRD*DTHRD
+      SK = SQRT(4.0_q*FK/PI)
+      G = (exp((2*THRD)*log(1._q+ZETA)) &
+                +exp((2*THRD)*log(1._q-ZETA)))/2._q
+      T = DDA/(D*2._q*SK*G)
 
-         MUUP=0.5_q*MUUP*RYTOEV*AUTOA2 ! HSQDTM = (plancks CONSTANT/(2*PI))**2/(2*ELECTRON MASS)
-         MUDW=0.5_q*MUDW*RYTOEV*AUTOA2
+      CALL corpbe(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
+           T,EC,ECD1,ECD2,ECQ,.TRUE.)
 
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-         DVXC1=DVXC1+DVC_ 
-         DVXC2=DVXC2+DVC_ 
-         DVC_=0
-#endif
+      EC  =(EC  +ECLDA)
 
-!test
-!         DVXC1=0
-!         DVXC2=0
-!         DVC_ =0
-!test
-         ! Store d f_xc / d \tau_up,down in DMUWORK if required
-         IF (LMU) THEN
-            DMUWORK(I,1)=MUUP
-            DMUWORK(I,2)=MUDW
-         ENDIF
+      RETURN
+    END SUBROUTINE GGASPINCOR
 
+!************************ SUBROUTINE GGACOR *****************************
 !
-!   store d f/ d (|d rho| ) / |d rho|  in DWORK
-!
-         DWORK(I,1)  = DVXC1 / MAX(ABSNABUP,NABMIN)
-         DWORK(I,2)  = DVXC2 / MAX(ABSNABDW,NABMIN)
-         DVC(I)      = DVC_  / MAX(ABSNAB,NABMIN)
-!
-!   store d f/ d rho  in DWORKG
+!  calculate the correlation energy density according to the
+!  Perdew, Burke and Ernzerhof functional
 !
-         DWORKG(I,1) = DEXC1*RYTOEV
-         DWORKG(I,2) = DEXC2*RYTOEV
+!***********************************************************************
 
-      ENDDO
+    SUBROUTINE GGACOR(D, DD, EC)
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
+      PARAMETER (THRD=1._q/3._q)
 
-!=======================================================================
-! gradient terms in stress tensor
-!          d    f_xc     grad rho  x grad rho
-! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
-!         d |grad rho|        |grad rho|
-!=======================================================================
-      SIF11=0
-      SIF22=0
-      SIF33=0
-      SIF12=0
-      SIF23=0
-      SIF31=0
-      DO ISP=1,2
-      DO I=1,GRIDC%RL%NP
-         SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
-         SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-         SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-         SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-         SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-         SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+      IF (D<0) THEN
+         EC   = 0._q
+         RETURN
+      ENDIF
+
+      DTHRD=exp(log(D)*THRD)
+      RS=(0.75_q/PI)**THRD/DTHRD
+      FK=(3._q*PI*PI)**THRD*DTHRD
+      SK = SQRT(4.0_q*FK/PI)
+
+      IF(D>1.E-10_q)THEN
+         T=DD/(D*SK*2._q)
+      ELSE
+         T=0.0_q
+      ENDIF
+
+      CALL CORunspPBE(RS,ECLDA,ECDLDA,SK, &
+           T,EC,ECD,ECDD,.TRUE.)
+
+      EC = (EC+ECLDA)
+
+      RETURN
+    END SUBROUTINE GGACOR
 
-         SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-         SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-         SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-         SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-         SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-         SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-      ENDDO
-      ENDDO
-      SIF11=SIF11*RINPL*LATT_CUR%OMEGA
-      SIF22=SIF22*RINPL*LATT_CUR%OMEGA
-      SIF33=SIF33*RINPL*LATT_CUR%OMEGA
-      SIF12=SIF12*RINPL*LATT_CUR%OMEGA
-      SIF23=SIF23*RINPL*LATT_CUR%OMEGA
-      SIF31=SIF31*RINPL*LATT_CUR%OMEGA
 
 !=======================================================================
-! calculate 
-!              d    f_xc     grad rho
-!        div  (------------  --------  ) 
-!              d |grad rho| |grad rho|
+! 
+! SUBROUTINE TAU_PW_DIRECT
 !
-! in reciprocal space
+! This subroutine calculates the kinetic energy of the PW part of the
+! wavefunctions (0.5*|grad psi|**2) 
+! and the Weizsaecker kinetic energy density, output on GRIDC
+! INPUT: GRIDC,  LATT_CUR, SYMM, NIOND, W, WDES
+! OUTPUT: TAU(GRIDC%MPLWC, WDES%NCDIJ)
+!         TAUW(GRIDC%MPLWC, WDES%NCDIJ)
+! evaluation should be more accurate than TAU_PW due to avoidance of 
+! wrap arounf errors
+!
+! Robin Hirschl 20001221 
 !=======================================================================
 
-      DO I=1,GRIDC%RL%NP
-         ANAB1U= DWORK1(I,1)
-         ANAB2U= DWORK2(I,1)
-         ANAB3U= DWORK3(I,1)
-         ANAB1D= DWORK1(I,2)
-         ANAB2D= DWORK2(I,2)
-         ANAB3D= DWORK3(I,2)
+SUBROUTINE TAU_PW_DIRECT(GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND, &
+        W,WDES,TAU,TAUW)
+      USE prec
+      USE lattice
+      USE mgrid
+      USE msymmetry
+      USE base
+      USE wave
+      USE mpimy
+      USE constant
+      
+      IMPLICIT NONE
 
-         DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
-         DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
-         DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
+      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
+      TYPE (latt)        LATT_CUR
+      TYPE (transit)     SOFT_TO_C
+      TYPE (symmetry)    SYMM
+      TYPE (wavespin)    W
+      TYPE (wavedes)     WDES
+! result
+      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! kinetic energy density
+      RGRID ::  TAUW(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ) ! weiz kin edens
+! dynamic work array
+      COMPLEX(q),ALLOCATABLE :: CW(:),CW3(:)
+      RGRID,ALLOCATABLE :: CW2(:),CW4(:),CW5(:)
+      COMPLEX(q) :: CF(WDES%NRPLWV,3)
+      
+      INTEGER :: MPLWV,ISP,N,NK,NPL,IDIR,I,NIOND
+      REAL(q) :: WEIGHT,G1,G2,G3
+      COMPLEX(q) :: GC
 
-         DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
-         DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
-         DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
-      ENDDO
+      MPLWV=MAX(GRID%MPLWV, GRID_SOFT%MPLWV)
+      ALLOCATE(CW(MPLWV),CW2(DIMREAL(MPLWV)),CW3(MPLWV),CW4(DIMREAL(MPLWV)), &
+           CW5(DIMREAL(MPLWV)))
+      
+      TAU=0; TAUW=0
 
-      spin2: DO ISP=1,2
-! x-component:
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK1(I,ISP)
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+#ifdef MPI
+      IF (WDES%COMM_KINTER%NCPU.NE.1) THEN
+         CALLMPI( M_stop('TAU_PW_DIRECT: KPAR>1 not implemented, sorry.') )
+         STOP
+      END IF
+#endif
+      
+      IF (WDES%NCDIJ==4) THEN
+         WRITE(*,*) 'WARNING: kinetic energy density not implemented for non collinear case.'
+         WRITE(*,*) 'exiting TAU_PW_DIRECT; sorry for the inconveniences.'
+         RETURN
+      ENDIF
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
+spin: DO ISP=1,WDES%NCDIJ
 
-         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
-      ENDDO
+      CW2=0; CW3=0; CW4=0; CW5=0
+      band: DO N=1,WDES%NBANDS
+         kpoints: DO NK=1,WDES%NKPTS
+            WEIGHT=WDES%RSPIN*WDES%WTKPT(NK)*W%FERWE(N,NK,ISP)/LATT_CUR%OMEGA
+            NPL=WDES%NPLWKP(NK)
+            CF=0
+! loop over plane wave coefficients            
+            DO I=1,NPL
+! get k-vector of respective k-point and coefficient
+               G1=WDES%IGX(I,NK)+WDES%VKPT(1,NK)
+               G2=WDES%IGY(I,NK)+WDES%VKPT(2,NK)
+               G3=WDES%IGZ(I,NK)+WDES%VKPT(3,NK)
+! loop over cartesian directions
+               DO IDIR=1,3
+                  GC=(G1*LATT_CUR%B(IDIR,1)+G2*LATT_CUR%B(IDIR,2)+G3*LATT_CUR%B(IDIR,3))
+                  CF(I,IDIR)=GC*W%CPTWFP(I,N,NK,ISP)*CITPI
+               ENDDO
+            ENDDO
 
-! y-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK2(I,ISP)
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
+! fourier trafo of wave-function (result in CW3)
+            CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CW3(1),W%CPTWFP(1,N,NK,ISP),GRID)
+
+! fourier trafo of gradient of wave-function 
+! loop over cartesian directions
+            DO IDIR=1,3
+               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CW(1),CF(1,IDIR),GRID)
+! update kinetic energy density (in CW2) and grad rho^2 (in CW4)
+               DO I=1,GRID%RL%NP
+                  CW2(I)=CW2(I)+HSQDTM*REAL(CW(I)*CONJG(CW(I)),KIND=q)*WEIGHT
+                  CW4(I)=CW4(I)+HSQDTM*REAL(CW(I)*CW3(I)*CONJG(CW(I)*CW3(I)),KIND=q)* &
+                       WEIGHT*WEIGHT/WDES%WTKPT(NK)
+               ENDDO
+            ENDDO
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
+! update Weizsaecker KinEDens Denominator (charge density) (in CW5)           
+           DO I=1,GRID%RL%NP
+              CW5(I)=CW5(I)+REAL(CW3(I)*CONJG(CW3(I)),KIND=q)*WEIGHT
+           ENDDO
+        ENDDO kpoints
+      ENDDO band
 
-         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
-      ENDDO
 
-! z-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK3(I,ISP)
+#ifdef realmode
+      CALLMPI( M_sum_d(WDES%COMM_INTER, CW5(1), GRID%RL%NP))
+#else
+      CALLMPI( M_sum_z(WDES%COMM_INTER, CW5(1), GRID%RL%NP))
+#endif
+
+! calculate Weizsaecker KinEdens
+      DO I=1,GRID%RL%NP
+         IF (CW5(I)==0._q) THEN
+            CW4(I)=0._q
+         ELSE
+            CW4(I)=CW4(I)/CW5(I)
+         ENDIF
       ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-      CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, CWORK(1,ISP))
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
+! merge results from nodes
+#ifdef realmode
+      CALLMPI( M_sum_d(WDES%COMM_INTER, CW2(1), GRID%RL%NP))
+      CALLMPI( M_sum_d(WDES%COMM_INTER, CW4(1), GRID%RL%NP))
+#else
+      CALLMPI( M_sum_z(WDES%COMM_INTER, CW2(1), GRID%RL%NP))
+      CALLMPI( M_sum_z(WDES%COMM_INTER, CW4(1), GRID%RL%NP))
+#endif
 
-         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
+! rescaling
+      DO I=1,GRID_SOFT%RL%NP
+         CW2(I)=CW2(I)/GRID_SOFT%NPLWV
+         CW4(I)=CW4(I)/GRID_SOFT%NPLWV         
       ENDDO
+    
+! to rec space
+      CALL FFT3D(CW2(1),GRID_SOFT,-1)
+      CALL FFT3D(CW4(1),GRID_SOFT,-1)
+      
+! transition to finer grid
+      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CW2(1),TAU(1,ISP))
+      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CW4(1),TAUW(1,ISP))
 
-      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
-      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
-      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
+   ENDDO spin
 
-      ENDDO spin2
+! symmetrization of result TAU(:,ISP)
+! needs (total,mag) instead of up,dw
+   IF (SYMM%ISYM>0) THEN
+      IF (WDES%NCDIJ==2) THEN
+         CALL RC_FLIP(TAU,GRIDC,2,.FALSE.)
+         CALL RC_FLIP(TAUW,GRIDC,2,.FALSE.)
+      ENDIF
+      ! symmetrization
+      CALL RHOSYM(TAU(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
+      CALL RHOSYM(TAUW(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
+      IF (WDES%NCDIJ==2) THEN
+         CALL RHOSYM(TAU(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,2)
+         CALL RHOSYM(TAUW(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,2)
+         CALL RC_FLIP(TAU,GRIDC,2,.TRUE.)
+         CALL RC_FLIP(TAUW,GRIDC,2,.TRUE.)
+      ENDIF
+   ENDIF
+   
+   DO ISP=1,WDES%NCDIJ
+! back to real space
+      CALL FFT3D(TAU(1,ISP),GRIDC,1)
+      CALL FFT3D(TAUW(1,ISP),GRIDC,1)
+
+! ATTENTION:
+! the transition to finer grid may cause instabilities with tauw being larger than tau
+! this has to be corrected !
+      TAUW(:,ISP)=MIN(REAL(TAUW(:,ISP),q),REAL(TAU(:,ISP),q))
+   ENDDO
+   DEALLOCATE(CW,CW2,CW3,CW4,CW5)
+   
+   RETURN
+END SUBROUTINE TAU_PW_DIRECT
 
 
 !=======================================================================
-! Now prepare the rest:
-! (store rho in DWORK3 and quantity of above in DWORK1)
-!=======================================================================
-      XCENC=0._q
-      CVZERO=0._q
-      XCENCC=0._q
-
-      DO I=1,GRIDC%RL%NP
-!
-! | m |
+! 
+! SUBROUTINE TAU_PW
 !
-         MAG_NORM=SQRT(ABS(DHTOT(I,2)*DHTOT(I,2)+ DHTOT(I,3)*DHTOT(I,3) + DHTOT(I,4)*DHTOT(I,4)))
+! This subroutine calculates the kinetic energy of the PW part of the
+! wavefunctions (0.5*|grad psi|**2) 
+! and the Weizsaecker kinetic energy density, output on GRIDC
 !
-! RHO1: \rho_up   = ( \rho_tot + | m | )/2
-! RHO2: \rho_down = ( \rho_tot - | m | )/2
+! INPUT: GRIDC,  LATT_CUR, SYMM, NIOND, W, WDES
+! OUTPUT: TAU(GRIDC%MPLWC, WDES%NCDIJ)
 !
-         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)+MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-         RHO2= MAX(REAL((DHTOT(I,1)+DENCOR(I)-MAG_NORM)/2/LATT_CUR%OMEGA ,KIND=q), CHGMIN)
-
-         VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
-         VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
-         DWORK(I,1)=VXC1
-         DWORK(I,2)=VXC2
-         VXC = 0.5_q*(VXC1+VXC2)
-         CVZERO=CVZERO+VXC
-         XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
-         XCENC=XCENC  -VXC1* REAL( (DHTOT(I,1)+MAG_NORM)/2 ,KIND=q) &
-        &             -VXC2* REAL( (DHTOT(I,1)-MAG_NORM)/2 ,KIND=q)
-      ENDDO
-
-      CVZERO=CVZERO*RINPL
-      XCENC =(XCENC+EXC-EDCMU)*RINPL
-      XCENCC=(XCENCC+EXC)*RINPL
-      EXC   =EXC*RINPL
-      EDCMU =EDCMU*RINPL
-
-      SIF11=SIF11-XCENCC
-      SIF22=SIF22-XCENCC
-      SIF33=SIF33-XCENCC
-      XCSIF(1,1)=SIF11
-      XCSIF(2,2)=SIF22
-      XCSIF(3,3)=SIF33
-      XCSIF(1,2)=SIF12
-      XCSIF(2,1)=SIF12
-      XCSIF(2,3)=SIF23
-      XCSIF(3,2)=SIF23
-      XCSIF(3,1)=SIF31
-      XCSIF(1,3)=SIF31
+! Robin Hirschl 20001221 
+!=======================================================================
 
-      CALLMPI( M_sum_s(GRIDC%COMM, 3, EXC, XCENC, EDCMU, 0._q ))
-      CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
-      CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+SUBROUTINE TAU_PW(GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND, &
+        W,WDES,TAU)
+      USE prec
+      USE lattice
+      USE mgrid
+      USE msymmetry
+      USE base
+      USE wave
+      USE mpimy
+      USE constant
+      
+      IMPLICIT NONE
 
-! Test dumps:
-      IF (IDUMP/=0) THEN
-         WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
-         WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
-         WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
-         WRITE(*,'(A,F24.14)') '    xcencc  =',XCENCC
-         WRITE(*,'(A,F24.14)') '     edcmu  =',EDCMU         
-      ENDIF
+      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
+      TYPE (latt)        LATT_CUR
+      TYPE (transit)     SOFT_TO_C
+      TYPE (symmetry)    SYMM
+      TYPE (wavespin)    W
+      TYPE (wavedes)     WDES
+! result
+      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! kinetic energy density
+! dynamic work array
+      RGRID,ALLOCATABLE :: CKIN(:)
 
-      RETURN
-      END SUBROUTINE FEXCGS_METAGGA_NONCOL
+      COMPLEX(q),ALLOCATABLE :: CFAR(:),CFBR(:)
+      COMPLEX(q) :: CFA(WDES%NRPLWV,3),CFB(WDES%NRPLWV,3)
+      
+      INTEGER :: ISPINOR,ISPINOR_
+      INTEGER :: MPLWV,ISP,N,NK,NPL,IDIR,I,NIOND
+      REAL(q) :: WEIGHT,G1,G2,G3
+      COMPLEX(q) :: GC
 
+      MPLWV=MAX(GRID%MPLWV, GRID_SOFT%MPLWV)
+      ALLOCATE(CFAR(MPLWV),CFBR(MPLWV))
+      ALLOCATE(CKIN(DIMREAL(MPLWV)))
+      
+      TAU=0
+      
+spin: DO ISP=1,WDES%ISPIN
 
-      SUBROUTINE MUxTAU(GRIDC,NCDIJ,LATT_CUR,DMUTOT,DKINEDEN,TAUC,DE)
-      USE prec
-      USE constant
-      USE lattice
-      USE mgrid
+      DO ISPINOR=0,WDES%NRSPINORS-1
+      DO ISPINOR_=0,WDES%NRSPINORS-1
       
-      IMPLICIT COMPLEX(q) (C)
-      IMPLICIT REAL(q) (A-B,D-H,O-Z)
+      CFAR=0 ; CFBR=0; CKIN=0
+      
+      band: DO N=1,WDES%NBANDS
+         kpoints: DO NK=1,WDES%NKPTS
+#ifdef MPI
+            IF (MOD(NK-1,WDES%COMM_KINTER%NCPU).NE.WDES%COMM_KINTER%NODE_ME-1) CYCLE
+#endif
+            WEIGHT=WDES%RSPIN*WDES%WTKPT(NK)*W%FERWE(N,NK,ISP)/LATT_CUR%OMEGA
+            NPL=WDES%NGVECTOR(NK)
+            CFA=0; CFB=0
+! loop over plane wave coefficients            
+            DO I=1,NPL
+! get k-vector of respective k-point and coefficient
+               G1=WDES%IGX(I,NK)+WDES%VKPT(1,NK)
+               G2=WDES%IGY(I,NK)+WDES%VKPT(2,NK)
+               G3=WDES%IGZ(I,NK)+WDES%VKPT(3,NK)
+! loop over cartesian directions
+               DO IDIR=1,3
+                  GC=(G1*LATT_CUR%B(IDIR,1)+G2*LATT_CUR%B(IDIR,2)+G3*LATT_CUR%B(IDIR,3))
+                  CFA(I,IDIR)=GC*W%CPTWFP(I+ISPINOR *NPL,N,NK,ISP)*CITPI
+                  CFB(I,IDIR)=GC*W%CPTWFP(I+ISPINOR_*NPL,N,NK,ISP)*CITPI
+               ENDDO
+            ENDDO
 
-      TYPE(grid_3d) GRIDC
-      TYPE(latt) LATT_CUR
-      INTEGER NCDIJ      
-      RGRID DMUTOT(DIMREAL(GRIDC%MPLWV),NCDIJ)
-      RGRID DKINEDEN(DIMREAL(GRIDC%MPLWV),NCDIJ),TAUC(GRIDC%RL%NP)
-      REAL(q) DE
-      ! local variables
-      INTEGER I
+! fourier trafo of gradient of wave-function 
+! loop over cartesian directions
+            DO IDIR=1,3
+               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CFAR(1),CFA(1,IDIR),GRID)
+               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CFBR(1),CFB(1,IDIR),GRID)
+! update kinetic energy density (in CW2) and grad rho^2 (in CW4)
+               DO I=1,GRID%RL%NP
+#ifdef realmode
+                  CKIN(I)=CKIN(I)+HSQDTM*REAL(CONJG(CFBR(I))*CFAR(I),KIND=q)*WEIGHT
+#else
+                  CKIN(I)=CKIN(I)+HSQDTM*(CONJG(CFBR(I))*CFAR(I))*WEIGHT
+#endif            
+               ENDDO
+            ENDDO
 
-      DE=0
-      RINPL=1._q/GRIDC%NPLWV
+        ENDDO kpoints
+      ENDDO band
 
-      IF (NCDIJ==1) THEN
-         DO I=1,GRIDC%RL%NP
-            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I))
-         ENDDO
-      ELSEIF (NCDIJ==2) THEN
-         DO I=1,GRIDC%RL%NP
-            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I)/2._q)+ &
-           &       DMUTOT(I,2)*CHGCONJG(DKINEDEN(I,2)+TAUC(I)/2._q)
-         ENDDO
-      ELSEIF (NCDIJ==4) THEN
-         DO I=1,GRIDC%RL%NP
-            DE=DE+DMUTOT(I,1)*CHGCONJG(DKINEDEN(I,1)+TAUC(I)/2._q)+ &
-           &       DMUTOT(I,2)*CHGCONJG(DKINEDEN(I,2))+DMUTOT(I,3)*CHGCONJG(DKINEDEN(I,3))+ &
-           &        DMUTOT(I,4)*CHGCONJG((DKINEDEN(I,4)+TAUC(I)/2._q))
-         ENDDO
-      ELSE
-         WRITE(*,*) 'MUxTAU: internal error, NCDIJ=',NCDIJ
-         STOP
-      ENDIF
+! merge results from nodes
+#ifdef realmode
+      CALLMPI( M_sum_d(WDES%COMM_INTER, CKIN(1), GRID%RL%NP))
+      CALLMPI( M_sum_d(WDES%COMM_KINTER, CKIN(1), GRID%RL%NP))
+#else
+      CALLMPI( M_sum_z(WDES%COMM_INTER, CKIN(1), GRID%RL%NP))
+      CALLMPI( M_sum_z(WDES%COMM_KINTER, CKIN(1), GRID%RL%NP))
+#endif
 
-      DE=DE*RINPL*LATT_CUR%OMEGA/(RYTOEV*AUTOA2)
+! rescaling
+      CKIN=CKIN/GRID_SOFT%NPLWV
+    
+! to rec space
+      CALL FFT3D(CKIN(1),GRID_SOFT,-1)
+      
+! transition to finer grid
+      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CKIN(1),TAU(1,ISP+ISPINOR_+2*ISPINOR))
+!     CALL SETUNB_COMPAT(TAU(1,ISP+ISPINOR_+2*ISPINOR),GRIDC)
+      ENDDO ! ispinor_
+      ENDDO ! ispinor
+      ENDDO spin
 
-      CALLMPI( M_sum_d(GRIDC%COMM,DE,1))
 
+      IF (WDES%LNONCOLLINEAR) THEN
+         ! needs (total,mag) instead of up,dw
+         CALL RC_FLIP(TAU,GRIDC,WDES%NCDIJ,.FALSE.)
+         IF (SYMM%ISYM>0) THEN
+            CALL RHOSYM(TAU(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
+            IF (.NOT.WDES%LSPIRAL) THEN
+               CALL SYMFIELD(TAU(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,WDES%SAXIS,LATT_CUR)
+            ENDIF
+         ENDIF
+      ELSE
+         IF (SYMM%ISYM>0) THEN
+            ! symmetrization of result TAU(:,ISP)
+            ! needs (total,mag) instead of up,dw
+            CALL RC_FLIP(TAU, GRIDC,WDES%NCDIJ,.FALSE.)
+            DO ISP=1,WDES%ISPIN
+               CALL RHOSYM(TAU(1,ISP),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,ISP)
+            ENDDO
+            ! in the collinear case we go back to up,dw
+            CALL RC_FLIP(TAU,GRIDC,WDES%NCDIJ,.TRUE.)
+         ENDIF      
+      ENDIF
+ 
+! back to real space
+      DO ISP=1,WDES%NCDIJ
+         CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, TAU(1,ISP))
+         CALL FFT3D(TAU(1,ISP),GRIDC,1)
+      ENDDO
+      TAU=REAL(TAU,KIND=q)
+   
+      DEALLOCATE(CFAR,CFBR,CKIN)
+   
       RETURN
-      END SUBROUTINE MUxTAU
-
-
-!************************** M E T A G G A . F ******************************
-! Implementation of the METAGGA according to 
-! Perdew, Kurth, Zupan and Blaha (PRL 82, 2544)
-!
-! All subroutines in this File were written by Robin Hirschl in Dec. 2000
-! using templates supplied by Georg Kresse
-! Thanks to Georg for his encouragement and support
-!
-!***************************************************************************
+END SUBROUTINE TAU_PW
 
 
-!************************ SUBROUTINE METAEXC_PW ****************************
+!************************ SUBROUTINE METAGGA ***************************
 !
-! this subroutine calculates  the total local potential CVTOT
-! which is the sum of the hartree potential, the exchange-correlation
-! potential and the ionic local potential
-! the routine also calculates the total local potential SV on the small
-! grid
-! on entry: 
-!  CHTOT(:,1) density
-!  CHTOT(:,2) respectively CHTOT(:,2:4) contain the magnetization
-! on return (LNONCOLLINEAR=.FALSE.):
-!  CVTOT(:,1) potential for up
-!  CVTOT(:,2) potential for down
-! on return (LNONCOLLINEAR=.TRUE.):
-!  CVTOT(:,1) 
+! calculates local contribution to metagga Exc according to 
+! Perdew et. al. PRL 82, 12 (1999)
 !
-! Robin Hirschl 20001220 (template: POTLOK from pot.F)
-!***************************************************************************
-
-      SUBROUTINE METAEXC_PW(GRIDC,WDES,INFO,E,LATT_CUR,CHTOT,TAU,TAUW,DENCOR)
-      USE prec
-      USE mpimy
-      USE mgrid
-      USE pseudo
-      USE lattice
-      USE poscar
-      USE setexm
-      USE base
-      USE xcgrad
-      USE wave
-!#define robdeb
-      IMPLICIT NONE
-
-      TYPE (grid_3d)     GRIDC
-      TYPE (wavedes)     WDES
-      TYPE (info_struct) INFO
-      TYPE (energy)      E
-      TYPE (latt)        LATT_CUR
-
-      COMPLEX(q) CHTOT(GRIDC%MPLWV, WDES%NCDIJ)
-      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)   ! kinetic energy density
-      RGRID ::  TAUW(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! Weizsaecker kinetic energy density
-      RGRID      DENCOR(GRIDC%RL%NP)
-      REAL(q)    TMPSIF(3,3)
-! work arrays 
-      COMPLEX(q), ALLOCATABLE::  CWORK(:,:),TMPWORK(:,:)
-      REAL(q) EXC,TMP1,TMP2
-      INTEGER ISP,I
-#ifdef robdeb
-      REAL(q) TOTKINE,TOTKINESP
-#endif  
-      
-      ALLOCATE(CWORK(GRIDC%MPLWV,WDES%NCDIJ),TMPWORK(GRIDC%MPLWV,WDES%ISPIN))
-!-----------------------------------------------------------------------
+! RH 20001119
 !
-!  calculate the exchange correlation energy
+! everything in Hartree units
 !
-!-----------------------------------------------------------------------
-      EXC     =0._q
-      E%EXCM =0._q
+! ATTANTION: Every values are passed "as they are", i.e. including
+! possibly unphysical numerical errors (e.g. negative charge densities)
+! values need to be checked accordingly
+!***********************************************************************
 
-      xc: IF (ISLDAXC()) THEN
-     ! transform the charge density to real space
-         TMPSIF=0
+SUBROUTINE METAGGA(RU,RD,DRU,DRD,DRT,TAUU,TAUD,TAUWU,TAUWD,EX,EC,I)
 
-         DO ISP=1,WDES%NCDIJ
-            CALL FFT3D(CHTOT(1,ISP),GRIDC,1)
-         ENDDO
-         IF (WDES%ISPIN==2 .OR. WDES%LNONCOLLINEAR) THEN
+! RU,RD      density up,down
+! DRU, DRD   abs. val. gradient of density up/down
+! DRT        abs. val. gradient of total density
+! TAUU,TAUD  kinetic energy density up/down
+! TAUWU,TAUWD Weizsaecker kinetic energy density up/down
+! EXC        return value
 
-            ! get the charge and the total magnetization
-            CALL MAG_DENSITY(CHTOT, CWORK, GRIDC, WDES%NCDIJ)
+  USE prec
+  USE constant
+  IMPLICIT REAL(q) (A-H,O-Z)
 
-            IF (ISGGA()) THEN
-               ! unfortunately METAGGA_PW requires (up,down) density
-               ! instead of (rho,mag)
-               CALL RL_FLIP(CWORK, GRIDC, 2, .TRUE.)
-               ! GGA potential
-               CALL METAGGA_PW(2, GRIDC, LATT_CUR, CWORK, TMPWORK, TAU, TAUW, &
-                    DENCOR, TMP1, EXC, TMP2, TMPSIF)
-               CALL RL_FLIP(CWORK, GRIDC, 2, .FALSE.)
-            ENDIF
+  INTEGER I
+! the following parameters are given by Perdew et.al.
+  PARAMETER (RKAPPA=0.804_q)
+  PARAMETER (D=0.113_q)
+  PARAMETER (C=0.53_q)
+! other parameters
+  PARAMETER (THRD=1._q/3._q)
+  PARAMETER (TTHRD=2._q*THRD)
+  PARAMETER (FTHRD=1._q+TTHRD)
+  PARAMETER (ETHRD=1._q+FTHRD)
+  PARAMETER (PISQ=PI*PI)
 
-         ELSE
-            IF (ISGGA()) THEN
-               CALL METAGGA_PW(1, GRIDC, LATT_CUR, CHTOT, TMPWORK, TAU, TAUW, &
-                    DENCOR, TMP1, EXC, TMP2, TMPSIF)
-            ENDIF
-                
-         ENDIF
 
-         E%EXCM=EXC
-         
-#ifdef robdeb         
-         TOTKINE=0;
-         DO ISP=1,WDES%NCDIJ
-            TOTKINESP=0.
-            DO I=1,GRIDC%RL%NP
-               TOTKINESP=TOTKINESP+TAU(I,ISP)
-            ENDDO
-            TOTKINESP=TOTKINESP*LATT_CUR%OMEGA/GRIDC%RL%NP
-            TOTKINE=TOTKINE+TOTKINESP
-            WRITE(*,*) 'ISP: ',ISP,' TotKinE PW grid: ',TOTKINESP
-         ENDDO
-         WRITE(*,*) 'TotKinEW PW grid: ',TOTKINE
-         WRITE(*,*) '--------------------------------------------------------'
-         WRITE(*,*) 'Exc PW grid:     ',E%EXCM
-         WRITE(*,*) '--------------------------------------------------------'
-#endif
+  EX=0._q;EC=0._q
+! exchange energy
+! spin up
+     P=(2._q*DRU)**2._q/(4._q*(3._q*PISQ)**TTHRD*(2._q*RU)**ETHRD)
+     QQS=6._q*TAUU/(2._q*(3._q*PISQ)**TTHRD*(2._q*RU)**FTHRD)-9._q/20._q-P/12._q
+     X=10._q/81._q*P+146._q/2025._q*QQS*QQS-73._q/405._q*QQS*P
+     X=X+(D+1._q/RKAPPA*(10._q/81._q)**2._q)*P*P
+     FX=1._q+RKAPPA-RKAPPA/(1._q+(X/RKAPPA))
+     EX=EX-RU*(3._q/(4._q*PI))*(3._q*PISQ*2._q*RU)**THRD*FX
+! spin down
+     P=(2._q*DRD)**2._q/(4._q*(3._q*PISQ)**TTHRD*(2._q*RD)**ETHRD)
+     QQS=6._q*TAUD/(2._q*(3._q*PISQ)**TTHRD*(2._q*RD)**FTHRD)-9._q/20._q-P/12._q
+     X=10._q/81._q*P+146._q/2025._q*QQS*QQS-73._q/405._q*QQS*P
+     X=X+(D+1._q/RKAPPA*(10._q/81._q)**2._q)*P*P
+     FX=1._q+RKAPPA-RKAPPA/(1._q+(X/RKAPPA))
+     EX=EX-RD*(3._q/(4._q*PI))*(3._q*PISQ*2._q*RD)**THRD*FX
 
-      ELSE xc
-         DO ISP=1,WDES%NCDIJ
-            CALL FFT3D(CHTOT(1,ISP),GRIDC,1)
-         ENDDO
-      ENDIF xc
+! correlation energy
+     CALL GGASPINCOR(RU,RD,DRT,ECT)
+     TAUK=(TAUWU+TAUWD)/(TAUU+TAUD)
+     ECM1=(RU+RD)*ECT*(1._q+C*TAUK**2._q)
 
-      ! CHTOT back to reciprocal space
-      DO ISP=1,WDES%NCDIJ
-         CALL FFT_RC_SCALE(CHTOT(1,ISP),CHTOT(1,ISP),GRIDC)
-         CALL SETUNB_COMPAT(CHTOT(1,ISP),GRIDC)
-      ENDDO 
-      
-      DEALLOCATE(CWORK,TMPWORK)
-#undef robdeb
-      RETURN
-    END SUBROUTINE METAEXC_PW
+!     CALL GGACOR(RU,DRU,ECU)
+     CALL GGASPINCOR(RU,0.0_q,DRU,ECU)
+     TAUK=TAUWU/TAUU
+     ECM2=TAUK**2._q*RU*ECU
 
+!     CALL GGACOR(RD,DRD,ECD)
+     CALL GGASPINCOR(RD,0.0_q,DRD,ECD)
+     TAUK=TAUWD/TAUD
+     ECM3=TAUK**2._q*RD*ECD
+     EC=ECM1-(1._q+C)*(ECM2+ECM3)
 
-!************************ SUBROUTINE METAGGA_PW *****************************
-! RCS:  $Id: metagga.F,v 1.9 2003/06/27 13:22:19 kresse Exp kresse $
+  RETURN
+END SUBROUTINE METAGGA
+!************************ SUBROUTINE VrevTPSSx *****************************
 !
-!  This routine calculates the meta GGA according to 
-!  Perdew, Kurth, Zupan and Blaha (PRL 82, 2544)
+! calculates the first order derivatives of Ex wrt n and |grad(n)|
+! Perdew et. al. PRL (2009)
 !
-! the charge density must be passed in real 
-!  
+! Written by Jianwei Sun and Yoon-Suk Kim 06/18/2009
 !
-! ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
-! We use a quite dangerous construction
-! to support  REAL(q) <-> COMPLEX(q)   fft s
-! several arrays are passed twice to the routine FEXCG_
-! on some compilers this makes troubles,
-! we call an external subroutine OPSYNC to avoid that compilers
-! move DO Loops around violating our assumption that
-! DWORK and CWORK point ot the same location
-! (the OPSYNC subroutine actually does nothing at all)
-! ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
-!***********************************************************************
-
-!************************************************************************
+! everything in Hartree units
 !
-! calculate the meta exchange correlation on a plane wave grid
+! ATTANTION: Every values are passed "as they are", i.e. including
+! possibly unphysical numerical errors (e.g. negative charge densities)
+! values need to be checked accordingly
 !
-!************************************************************************
-
+! RU,RD                        density up,down
+! DRU, DRD                     abs. val. gradient of density up/down
+! DRT                          abs. val. gradient of total density
+! TAUU,TAUD                    kinetic energy density up/down
+! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
+! VXD1 VXD2                    THE DERIVATIVES OF EX WRT n 
+! VXDD1,VXDD2                  THE DERIVATIVES OF EX WRT |grad n| 
+! AMUXD1, AMUXD2               THE DERIVATIVES OF EX WRT TAU
+!
+!***********************************************************************
 
+      SUBROUTINE VrevTPSSx(&
+     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
+     &   Ex_revTPSS,VXD1,VXDD1,VXD2,VXDD2,AMUXD1,AMUXD2)
 
- SUBROUTINE METAGGA_PW(ISPIN, GRIDC, LATT_CUR, CHTOT, CPOT, TAU, TAUW, DENCOR, &
-               XCENC, EXC, CVZERO, XCSIF)
-   USE prec
-   USE lattice
-   USE mpimy
-   USE mgrid
+      USE prec
+      USE constant
+      IMPLICIT REAL(q) (A-H,O-Z)
 
-   IMPLICIT COMPLEX(q) (C)
+      PARAMETER (CFC1X=0.667_q)
+      PARAMETER (CFC2X=0.800_q)
+      PARAMETER (CFD1X=1.240_q)
+      PARAMETER (CFK1=0.065_q)
+! other parameters
+      PARAMETER (ONE=1._q)
+      PARAMETER (TWO=2._q)
+      PARAMETER (THREE=3._q)
+      PARAMETER (FOUR=4._q)
+      PARAMETER (THRD=1._q/3._q)
+      PARAMETER (THRD2=2._q*THRD)
+      PARAMETER (THRD4=4._q*THRD)
+      PARAMETER (THRD5=1._q+THRD2)
+      PARAMETER (THRD8=1._q+THRD5)
+      PARAMETER (PISQ=PI*PI)
+      PARAMETER (AX=-0.738558766382022405884230032680836_q)
 
-   IMPLICIT REAL(q) (A-B,D-H,O-Z)
+      VXD1=0._q;VXD2=0._q;
+      VXDD1=0._q;VXDD2=0._q;
+      AMUXD1=0._q;AMUXD2=0._q;
 
 
-   INTEGER    ISPIN                     ! ISPIN 1 or 2
-   TYPE (grid_3d)     GRIDC             ! descriptor for grid
-   TYPE (latt)        LATT_CUR          ! lattice descriptor
-   COMPLEX(q) CHTOT(GRIDC%MPLWV,ISPIN)  ! charge density in real space
-   COMPLEX(q) TAU(GRIDC%MPLWV,ISPIN)    ! kinetic energy density
-   COMPLEX(q) TAUW(GRIDC%MPLWV,ISPIN)   ! Weizsaecker kinetic energy density
-   COMPLEX(q) CPOT(GRIDC%MPLWV,ISPIN)   ! exhcange correlation potential
-   COMPLEX(q) CMU (GRIDC%MPLWV,ISPIN)   ! exhcange correlation kinetic energy density
-   RGRID      DENCOR(GRIDC%RL%NP)       ! pseudo core charge density in real sp
+      CX1=10._q/81._q
+      CX2=146._q/2025._q
+      CX3=73._q/405._q
+      CFE12=SQRT(CFE)
 
-   REAL(q) :: XCENC                     ! double counting correction (unsupported)
-   REAL(q) :: EX,EC,EXC                 ! exchange correlation energy
-   REAL(q) :: CVZERO                    ! average xc potential
-   REAL(q) :: XCSIF(3,3)                ! stress tensor (unsupported)
+! Suspect that TAUWU and TAUWD are not well described. Use TAUW_TEMP=0.125_q*DRT**2/RT
+! IF WANT TO TEST TAUW, SIMPLY OVERWRITE TAUW_TEMP BY TAUW
+      TAUWU_TEMP=0.125_q*DRU**2._q/RU
+!     TAUWU_TEMP=MIN(TAUWU_TEMP,TAUU)
       
-! work arrays
-   COMPLEX(q),ALLOCATABLE:: CWGRAD(:,:)
-   REAL(q),ALLOCATABLE   :: DWORKG(:,:),DWORK1(:,:),DWORK2(:,:),DWORK3(:,:),DVC(:)
+      TAUWD_TEMP=0.125_q*DRD**2._q/RD
+!     TAUWD_TEMP=MIN(TAUWD_TEMP,TAUD)
 
-   NP1=GRIDC%RL%NP
-   ALLOCATE(CWGRAD(GRIDC%MPLWV,ISPIN), DWORKG(NP1,ISPIN), &
-        DWORK1(NP1,ISPIN),DWORK2(NP1,ISPIN),DWORK3(NP1,ISPIN),DVC(NP1))
-   
-   CALL METAGGA_PW_(ISPIN,GRIDC,LATT_CUR, XCENC,EXC,CVZERO,XCSIF, &
-        CWGRAD,CHTOT,CPOT,TAU,TAUW, &
-        CWGRAD,CHTOT,CPOT,TAU,TAUW, &
-        DENCOR,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
-   DEALLOCATE(CWGRAD,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
- RETURN
- END SUBROUTINE METAGGA_PW
+! spin up
+! IN EXD1(2*RU), TAUWU AND TAUU SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
+      RHO=TWO*RU
+      DRHO=TWO*DRU
+      TAUW_RHO=TWO*TAUWU_TEMP
+      TAU_RHO=TWO*TAUU
 
+!----------------------------------------------------------------------
+! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
+      EXUNIF=AX*RHO**THRD
+      EXLDA=EXUNIF*RHO
+      EXDLDA=EXUNIF*THRD4
 
-!  ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION ATTENTION
-! Mind CWORK and DWORK point actually to the same storagelocation
-! similar to an EQUIVALENCE (CWORK(1),DWORK(1))
-! the same for  (CWGRAD,DWGRAD) and   (CHTOT,DHTOT)
-! so we can interchange both arrays arbitrarily
 
- SUBROUTINE METAGGA_PW_(ISPIN,GRIDC,LATT_CUR,XCENC,EXC,CVZERO,XCSIF, &
-      CWGRAD,CHTOT,CWORK,CKE,CWKE, &
-      DWGRAD,DHTOT,DWORK,DKE,DWKE, &
-      DENCOR,DWORKG,DWORK1,DWORK2,DWORK3,DVC)
+! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
+      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
+      P2=P*P
 
-   USE prec
-   USE lattice
-   USE mpimy
-   USE mgrid
-   USE constant
+      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
+      ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
+      DPD=-THRD8*P/RHO
+      DPDD=TWO*P/DRHO
+      DPDTAU=0._q
+      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
+     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   &  
+    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
+     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
+     DALPHADTAU=ONE/TAU_UNIF
 
-   IMPLICIT COMPLEX(q) (C)
-   IMPLICIT REAL(q) (A-B,D-H,O-Z)
 
-   INTEGER    ISPIN                     ! ISPIN 1 or 2
-   TYPE (grid_3d)     GRIDC             ! descriptor for grid
-   TYPE (latt)        LATT_CUR          ! lattice descriptor
+! calculate the exchange enhancement factor and its derivatives wrt p
+! and alpha
+       call metaggafx(cfc1x,cfc2x,cfd1x,cfk1, &
+     & p, alpha, Fx, fx1p, fx1a, fx2p2, fx2pa, fx2a2)
+
+! Calculate fx DERIVATIVES WRT n, |grad n|, and tau
+      DFX_D=fx1p*DPD+fx1a*DALPHAD
+      DFX_DD=fx1p*DPDD+fx1a*DALPHADD
+      DFX_DTAU=fx1a*DALPHADTAU
 
-   
-   RGRID      DENCOR(GRIDC%RL%NP)       ! pseudo core charge density in real sp
-   REAL(q) :: XCENC                     ! double counting correction (unsupported)
-   REAL(q) :: EXC                       ! exchange correlation energy
-   REAL(q) :: CVZERO                    ! average xc potential
-   REAL(q) :: XCSIF(3,3)                ! stress tensor (unsupported)
 
-   COMPLEX(q) CHTOT (GRIDC%MPLWV,ISPIN),CWORK(GRIDC%MPLWV,ISPIN), &
-              CWGRAD(GRIDC%MPLWV,ISPIN),CKE(GRIDC%MPLWV,ISPIN),CWKE(GRIDC%MPLWV,ISPIN)
-   RGRID      DHTOT (DIMREAL(GRIDC%MPLWV),ISPIN),DWORK(DIMREAL(GRIDC%MPLWV),ISPIN), &
-              DWGRAD(DIMREAL(GRIDC%MPLWV),ISPIN),DKE(DIMREAL(GRIDC%MPLWV),ISPIN), &
-              DWKE(DIMREAL(GRIDC%MPLWV),ISPIN)
-   REAL(q)    DWORKG(GRIDC%RL%NP,ISPIN),DWORK1(GRIDC%RL%NP,ISPIN), &
-              DWORK2(GRIDC%RL%NP,ISPIN),DWORK3(GRIDC%RL%NP,ISPIN), &
-              DVC(GRIDC%RL%NP)
-   ! set to one for error-dumps
-#ifdef MPI
-   NODE_ME=GRIDC%COMM%NODE_ME
-   IONODE =GRIDC%COMM%IONODE
-   IDUMP=0
-#ifdef debug
-       IF (NODE_ME==IONODE) IDUMP=1
-#endif
-#else
-   IDUMP=0
-#ifdef debug
-     IDUMP=1
-#endif
-#endif
 
-! important constants
-   RINPL=1._q/GRIDC%NPLWV                       ! Scaling of Energy
-   EVTOH=1._q/(2.*HSQDTM)*AUTOA5                ! KinEDens eV to Hartree
-!=======================================================================
-! First phase: Transform DENCOR (core charge) and
-!  CHTOT (pseudo chargedensity) to reciprocal space space
-!=======================================================================
-   spin: DO ISP=1,ISPIN
-      ! set CWORK to total real charge in reciprocal space
-      DO I=1,GRIDC%RL%NP
-         DWORK(I,ISP)=(DENCOR(I)/ISPIN+DHTOT(I,ISP))*RINPL/LATT_CUR%OMEGA
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
-!=======================================================================
-! now calculate the gradient of the chargedensity
-!=======================================================================
-      DO  I=1,GRIDC%RC%NP
-        CWGRAD(I,ISP)=CWORK(I,ISP)
-      ENDDO
-! x-component:
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
-         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GX*CITPI
-       ENDDO
-! grad_x in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK1(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
-      ENDDO
-!
-! y-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
-      ENDDO
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
-         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GY*CITPI
-      ENDDO
-! grad_y in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK2(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
-      ENDDO
+!   OUTPUT THE VXD1,VXDD1 AND AMUXD1
+      VXD1=EXDLDA*FX+EXLDA*DFX_D
+      VXDD1=EXLDA*DFX_DD
+      AMUXD1=EXLDA*DFX_DTAU
+      EX_REVTPSS=0._q
+      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+
+! spin down
+! IN EXD1(2*RD), TAUWD AND TAUD SCALES AS 2 AND TAU0 SCALES AS 2**FTHRD
+      RHO=TWO*RD
+      DRHO=TWO*DRD
+      TAUW_RHO=TWO*TAUWD_TEMP
+      TAU_RHO=TWO*TAUD
 
+!----------------------------------------------------------------------
+! construct LDA exchange energy density AND ITS DERIVATIVE WRT n
+      EXUNIF=AX*RHO**THRD
+      EXLDA=EXUNIF*RHO
+      EXDLDA=EXUNIF*THRD4
 
-! z-component:
-      DO  I=1,GRIDC%RC%NP
-        CWORK(I,ISP)=CWGRAD(I,ISP)
-      ENDDO
 
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
-         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWORK(I,ISP)=CWORK(I,ISP)*GZ*CITPI
-      ENDDO
-! grad_z in real space:
-      CALL SETUNB(CWORK(1,ISP),GRIDC)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,1)
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      DO I=1,GRIDC%RL%NP
-        DWORK3(I,ISP)= REAL( DWORK(I,ISP) ,KIND=q)
-      ENDDO
-   ENDDO spin
+! CONSTRUCT FX AND ITS DERIVATIVES WRT n AND |grad n|
+      P=(DRHO)**TWO/(FOUR*(THREE*PISQ)**THRD2*(RHO)**THRD8)
+      P2=P*P
 
-!=======================================================================
-!  grad rho    d    f_xc
-! ---------- * ------------      (Phys.Rev.B 50,7 (1994) 4954)
-! |grad rho|   d |grad rho|
-!
-!  MIND: the factor OMEGA is difficult to understand:
-!   1/N sum_r energy_density * rho *OMEGA = Energy
-!   1/N sum_r energy_density * \bar rho   = Energy (\bar rho=rho*LATT_CUR%OMEGA)
-!=======================================================================
-   EX=0; EC=0
-   DO I=1,GRIDC%RL%NP
-      IF (ISPIN==2) THEN
-! spin polarized calculation
-         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
-         RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/ISPIN)/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
-         
-         ABSNABUP=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
-              +DWORK3(I,1)*DWORK3(I,1))
-         
-         ABSNABDW=SQRT(DWORK1(I,2)*DWORK1(I,2)+DWORK2(I,2)*DWORK2(I,2) &
-              +DWORK3(I,2)*DWORK3(I,2))
-         
-         ABSNAB= SQRT((DWORK1(I,1)+DWORK1(I,2))*(DWORK1(I,1)+DWORK1(I,2))+ &
-              (DWORK2(I,1)+DWORK2(I,2))*(DWORK2(I,1)+DWORK2(I,2))+ &
-              (DWORK3(I,1)+DWORK3(I,2))*(DWORK3(I,1)+DWORK3(I,2)))
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-         ABSNAB=ABSNABUP+ABSNABDW
-#endif
-! kinetic energy density
-         TAUU=MAX(REAL(DKE(I,1),KIND=q),1.E-10_q)
-         TAUD=MAX(REAL(DKE(I,2),KIND=q),1.E-10_q)
-! Weizsaecker kinetic energy density 
-         TAUWU=MAX(REAL(DWKE(I,1),KIND=q),1.E-10_q)
-         TAUWD=MAX(REAL(DWKE(I,2),KIND=q),1.E-10_q)
-! correct kinetic energy densities
-! charge density is not the same as the one for which kinetic energy was
-! calculated (e.g. augmentation charge)
-! use difference in Weizsaecker kinetic energy density for correction
-!!$         IF (RHO1>0) THEN
-!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABUP**2/RHO1,1E-10_q)
-!!$            TAUDIFF=TAUWTOT-TAUWU
-!!$            TAUWU=TAUWU+TAUDIFF
-!!$            TAUU=TAUU+TAUDIFF
-!!$         ENDIF
-!!$         IF (RHO2>0) THEN
-!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABDW**2/RHO2,1E-10_q)
-!!$            TAUDIFF=TAUWTOT-TAUWD
-!!$            TAUWD=TAUWD+TAUDIFF
-!!$            TAUD=TAUD+TAUDIFF
-!!$         ENDIF
-      ELSE
-! non spin polarized calculation
-! up and down-spin variables get half of the total values
-         RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I))/2._q/LATT_CUR%OMEGA ,KIND=q),1.E-10_q)
-         RHO2= RHO1
-         ABSNAB=SQRT(DWORK1(I,1)*DWORK1(I,1)+DWORK2(I,1)*DWORK2(I,1) &
-              +DWORK3(I,1)*DWORK3(I,1))
-         ABSNABUP= 0.5_q*ABSNAB
-         ABSNABDW= 0.5_q*ABSNAB
-! kinetic energy density
-         TAUU= MAX(0.5_q*REAL(DKE(I,1),KIND=q),1.E-10_q)
-! Weizsaecker kinetic energy density 
-         TAUWU= MAX(0.5_q*REAL(DWKE(I,1),KIND=q),1.E-10_q)
-! correct kinetic energy densities
-! charge density is not the same as the one for which kinetic energy was
-! calculated (e.g. augmentation charge)
-! use difference in Weizsaecker kinetic energy density for correction
-!!$         IF (RHO1>0) THEN
-!!$            TAUWTOT=MAX(0.25*HSQDTM*ABSNABUP**2/RHO1,1E-10_q)
-!!$            TAUDIFF=TAUWTOT-TAUWU
-!!$            TAUWU=TAUWU+TAUDIFF
-!!$            TAUU=TAUU+TAUDIFF
-!!$         ENDIF
-         TAUD= TAUU
-         TAUWD=TAUWU        
-      ENDIF
+      TAU0=0.3_q*(THREE*PISQ)**THRD2*(RHO)**THRD5
+      ALPHA=(TAU_RHO-TAUW_RHO)/TAU0
+      DPD=-THRD8*P/RHO
+      DPDD=TWO*P/DRHO
+      DPDTAU=0._q
+      TAU_UNIF=THREE/10._q*(THREE*PI**TWO)**THRD2*RHO**THRD5
+     DALPHAD=-TAU_RHO*(THREE*PI**TWO*RHO)**THRD2/(TWO*TAU_UNIF**TWO)+   &
+    &   DRHO**TWO/RHO**(11._q/THREE)*(10._q/9._q/(THREE*PI**TWO)**THRD2)
+     DALPHADD=-DRHO/(FOUR*RHO*TAU_UNIF)
+     DALPHADTAU=ONE/TAU_UNIF
 
 
-! All parameters for subroutine Metagga must be passed in Hartree
-!      WRITE(77,'(I6,9E14.4)') I,RHO1*AUTOA3, &
-!           TAUU*EVTOH,TAUD*EVTOH,TAUWU,TAUWD,TAUWU/(TAUU*EVTOH), &
-!           TAUWD/(TAUD*EVTOH),ECL*LATT_CUR%OMEGA/AUTOA3,DENCOR(I)/(2*LATT_CUR%OMEGA)    
+! calculate the exchange enhancement factor and its derivatives wrt p
+! and alpha
+       call metaggafx(cfc1x,cfc2x,cfd1x,cfk1, &
+     & p, alpha, Fx, fx1p, fx1a, fx2p2, fx2pa, fx2a2)
+
+! Calculate fx DERIVATIVES WRT n, |grad n|, and tau
+      DFX_D=fx1p*DPD+fx1a*DALPHAD
+      DFX_DD=fx1p*DPDD+fx1a*DALPHADD
+      DFX_DTAU=fx1a*DALPHADTAU
 
-      CALL METAGGA(RHO1*AUTOA3,RHO2*AUTOA3, &
-     &               ABSNABUP*AUTOA4, ABSNABDW*AUTOA4,ABSNAB*AUTOA4, &
-     &           TAUU*EVTOH,TAUD*EVTOH, &
-     &           TAUWU*EVTOH,TAUWD*EVTOH,EXL,ECL,I)
 
-      DEXC1=0; DEXC2=0; DVXC1=0; DVXC2=0; DVC_=0
-!     RHO=RHO1+RHO2
 
-! Conversion back to eV
-      EX=EX+2*EXL*RYTOEV*LATT_CUR%OMEGA/AUTOA3
-      EC=EC+2*ECL*RYTOEV*LATT_CUR%OMEGA/AUTOA3
+!   OUTPUT THE VXD2,VXDD2 AND AMUXD2
+      VXD2=EXDLDA*FX+EXLDA*DFX_D
+      VXDD2=EXLDA*DFX_DD
+      AMUXD2=EXLDA*DFX_DTAU
 
-! ATTENTION ATTENTION ATTENTION
-! DWORKG is   N O T   properly defined in this function
-! should be |nabla rho|
+      EX_REVTPSS=EX_REVTPSS+EXLDA*FX
+      EX_REVTPSS=EX_REVTPSS/TWO
+      RETURN
+      END SUBROUTINE VrevTPSSx
 
-      DVXC1=DVXC1*RYTOEV*AUTOA
-      DVXC2=DVXC2*RYTOEV*AUTOA
-      DVC_ =DVC_ *RYTOEV*AUTOA
-#ifdef correlation_ABS_DRHOUP_ABS_DRHOD
-      DVXC1=DVXC1+DVC_ 
-      DVXC2=DVXC2+DVC_ 
-      DVC_=0
-#endif
-!
-!   store d f/ d (|d rho| ) / |d rho|  in DWORK
+
+
+
+!*****************************VrevTPSSc*********************************
 !
-!      DWORK(I,1)  = DVXC1 / MAX(DWORKG(I,1),1.E-10_q)
-!      DWORK(I,2)  = DVXC2 / MAX(DWORKG(I,2),1.E-10_q)
-!      DVC(I)      = DVC_  / MAX(ABSNAB,1.E-10_q)
 !
-!   store d f/ d rho  in DWORKG
+! RU,RD                        density up,down
+! DRU, DRD                     abs. val. gradient of density up/down
+! DRT                          abs. val. gradient of total density
+! TAUU,TAUD                    kinetic energy density up/down
+! TAUWU,TAUWD                  Weizsaecker kinetic energy density up/down
+! VCD1 VCD2                    THE DERIVATIVES OF EC WRT n 
+! VCDD1,VCDD2                  THE DERIVATIVES OF EC WRT |grad n| 
+! AMUCD1, AMUCD2                   THE DERIVATIVES OF EC WRT TAU
 !
-!      DWORKG(I,1) = DEXC1*RYTOEV
-!      DWORKG(I,2) = DEXC2*RYTOEV
-   ENDDO
-   
-   ! OUTPUT OF MEGGA EXCHANGE AND CORRELATION
-!   WRITE(*,*)
-!   WRITE(*,'(2(A,F14.6))') 'Exchange energy    eV:',EX*RINPL,'  Hartree:',EX*RINPL/(2*RYTOEV)
-!   WRITE(*,'(2(A,F14.6))') 'Correlation energy eV:',EC*RINPL,'  Hartree:',EC*RINPL/(2*RYTOEV)
-!   WRITE(*,*)
+!***********************************************************************
 
-! collect results from all nodes. Can be deleted as soon as the
-! return command is shifted further down.   
-   CALLMPI( M_sum_s(GRIDC%COMM, 2, EX, EC, 0._q , 0._q ))
+      SUBROUTINE VrevTPSSc(&
+     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD,& 
+     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
 
-   EXC=(EX+EC)*RINPL
-   RETURN
-!
-! FOR LATER USE WE HAVE INCLUDED THE RELEVANT ROUTINES FOR THE
-! EVALUATION OF THE POTENTIALS AND OF THE STRESS-TENSOR
-!
+      IMPLICIT REAL*8 (A-H,O-Z)
 
-!=======================================================================
-! gradient terms in stress tensor
-!          d    f_xc     grad rho  x grad rho
-! sum_r   ------------   --------------------- * LATT_CUR%OMEGA
-!         d |grad rho|        |grad rho|
-!=======================================================================
-!
-!    verify that this sum is correct also when ISPIN=2
-!
-   SIF11=0
-   SIF22=0
-   SIF33=0
-   SIF12=0
-   SIF23=0
-   SIF31=0
-   DO ISP=1,ISPIN
-      DO I=1,GRIDC%RL%NP
-        SIF11=SIF11+DWORK1(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
-        SIF22=SIF22+DWORK2(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-        SIF33=SIF33+DWORK3(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-        SIF12=SIF12+DWORK1(I,ISP)*DWORK2(I,ISP)*DWORK(I,ISP)
-        SIF23=SIF23+DWORK2(I,ISP)*DWORK3(I,ISP)*DWORK(I,ISP)
-        SIF31=SIF31+DWORK3(I,ISP)*DWORK1(I,ISP)*DWORK(I,ISP)
+! the coefficients for the exchange part
+      PARAMETER (CFC1C=0.640d0)
+      PARAMETER (CFC2C=1.500d0)
+      PARAMETER (CFD1C=0.700d0)
 
-        SIF11=SIF11+DWORK1(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-        SIF22=SIF22+DWORK2(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-        SIF33=SIF33+DWORK3(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-        SIF12=SIF12+DWORK1(I,ISP)*(DWORK2(I,1)+DWORK2(I,2))*DVC(I)
-        SIF23=SIF23+DWORK2(I,ISP)*(DWORK3(I,1)+DWORK3(I,2))*DVC(I)
-        SIF31=SIF31+DWORK3(I,ISP)*(DWORK1(I,1)+DWORK1(I,2))*DVC(I)
-      ENDDO
-   ENDDO
-   SIF11=SIF11*RINPL*LATT_CUR%OMEGA
-   SIF22=SIF22*RINPL*LATT_CUR%OMEGA
-   SIF33=SIF33*RINPL*LATT_CUR%OMEGA
-   SIF12=SIF12*RINPL*LATT_CUR%OMEGA
-   SIF23=SIF23*RINPL*LATT_CUR%OMEGA
-   SIF31=SIF31*RINPL*LATT_CUR%OMEGA
 
-!=======================================================================
-! calculate 
-!              d    f_xc     grad rho
-!        div  (------------  --------  ) 
-!              d |grad rho| |grad rho|
-!
-! in reciprocal space
-!=======================================================================
-   
-   DO I=1,GRIDC%RL%NP
-      ANAB1U= DWORK1(I,1)
-      ANAB2U= DWORK2(I,1)
-      ANAB3U= DWORK3(I,1)
-      ANAB1D= DWORK1(I,2)
-      ANAB2D= DWORK2(I,2)
-      ANAB3D= DWORK3(I,2)
 
-      DWORK1(I,1) = ANAB1U* DWORK(I,1) + (ANAB1U+ANAB1D) * DVC(I)
-      DWORK2(I,1) = ANAB2U* DWORK(I,1) + (ANAB2U+ANAB2D) * DVC(I)
-      DWORK3(I,1) = ANAB3U* DWORK(I,1) + (ANAB3U+ANAB3D) * DVC(I)
+! other parameter
+      PARAMETER (ONE=1.0d0)
+      PARAMETER (TWO=2.0d0)
+      PARAMETER (THREE=3.0d0)
+      PARAMETER (FOUR=4.0d0)
+      PARAMETER (PI =3.141592653589793238d0)
+      PARAMETER (PISQ=PI*PI)
+      PARAMETER (THRD=1.0d0/3.0d0)
+      PARAMETER (THRD2=2.0d0*THRD)
+      PARAMETER (THRD4=4.0d0*THRD)
+      PARAMETER (THRD5=1.0d0+THRD2)
+      PARAMETER (THRD8=1.0d0+THRD5)
+
+      call Vmetaggac(cfc1c,cfc2c,cfd1c,&
+     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD,&
+     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
+
+
+      RETURN
+      END SUBROUTINE VrevTPSSc
+
+
+      SUBROUTINE Vmetaggac(cfc1,cfc2,cfd1,&
+     &   RU,RD,DRU,DRD,DRT,TAUU,TAUD, &
+     &   Ec_revTPSS,VCD1,VCDD1,VCD2,VCDD2,AMUCD1,AMUCD2)
+
+      IMPLICIT REAL*8 (A-H,O-Z)
 
-      DWORK1(I,2) = ANAB1D* DWORK(I,2) + (ANAB1U+ANAB1D) * DVC(I)
-      DWORK2(I,2) = ANAB2D* DWORK(I,2) + (ANAB2U+ANAB2D) * DVC(I)
-      DWORK3(I,2) = ANAB3D* DWORK(I,2) + (ANAB3U+ANAB3D) * DVC(I)
-   ENDDO
 
-   spin2: DO ISP=1,ISPIN
-! x-component:
-!DIR$ IVDEP
-!$DIR FORCE_VECTOR
-!OCL NOVREC
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK1(I,ISP)
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
+      PARAMETER (TWO=2.0d0)
+      PARAMETER (THREE=3.0d0)
+      PARAMETER (FOUR=4.0d0)
+      PARAMETER (PI =3.141592653589793238d0)
+      PARAMETER (PISQ=PI*PI)
+      PARAMETER (THRD=1.0d0/3.0d0)
+      PARAMETER (THRD2=2.0d0*THRD)
+      PARAMETER (THRD4=4.0d0*THRD)
+      PARAMETER (THRD5=1.0d0+THRD2)
+      PARAMETER (THRD8=1.0d0+THRD5)
 
-         GX=(GRIDC%LPCTX(N1)*LATT_CUR%B(1,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(1,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(1,3))
-         CWGRAD(I,ISP)=CWORK(I,ISP)*GX*CITPI
-      ENDDO
 
-! y-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK2(I,ISP)
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      VCD1=0.0d0
+      VCD2=0.0d0
+      VCDD1=0.0d0
+      VCDD2=0.0d0
+      AMUCD1=0.0d0
+      AMUCD2=0.0d0
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
+      RT=RU+RD
+      YA=DRU**2.0d0
+      YB=DRD**2.0d0
+      Y=DRT**2.0d0
+      YC=(Y-YA-YB)/2.0d0
+      TAUW=1.0d0/8.0d0*(Y/RT)
+      TAU=TAUU+TAUD
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.99999999999990d0),0.99999999999990d0)
+      DS_ZETA=((1.0d0+ZETA)**THRD5+(1.0d0-ZETA)**THRD5)/TWO
+      DX_ZETA=((1.0d0+ZETA)**THRD4+(1.0d0-ZETA)**THRD4)/TWO
+      TAU0=0.30d0*(THREE*PISQ)**THRD2*RT**THRD5*DS_ZETA
+      ALPHA=(TAU-TAUW)/TAU0
 
-         GY=(GRIDC%LPCTX(N1)*LATT_CUR%B(2,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(2,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(2,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GY*CITPI
-      ENDDO
+      D_ZETA_D1=TWO*RD/RT**TWO
+      D_ZETA_D2=-TWO*RU/RT**TWO
+      D_DS_ZETA_D1=THRD5*((1.0d0+ZETA)**THRD2 &
+     &             -(1.0d0-ZETA)**THRD2)*D_ZETA_D1/TWO
+      D_DS_ZETA_D2=THRD5*((1.0d0+ZETA)**THRD2 &
+     &             -(1.0d0-ZETA)**THRD2)*D_ZETA_D2/TWO
+      DTAU0D1=THRD5*TAU0/RT+TAU0*D_DS_ZETA_D1/DS_ZETA
+      DTAU0D2=THRD5*TAU0/RT+TAU0*D_DS_ZETA_D2/DS_ZETA
+
+      DTAUWD1=-TAUW/RT
+      DTAUWD2=DTAUWD1
+
+      D_ALPHA_D1=(-DTAUWD1-ALPHA*DTAU0D1)/TAU0
+      D_ALPHA_D2=(-DTAUWD2-ALPHA*DTAU0D2)/TAU0
+
+      DYCDD1=YC/DRU
+      DYCDD2=YC/DRD
+      DTAUWDD1=1.0d0/FOUR/RT*(DRU+DYCDD1)
+      DTAUWDD2=1.0d0/FOUR/RT*(DRD+DYCDD2)
+
+      D_ALPHA_DD1=-DTAUWDD1/TAU0
+      D_ALPHA_DD2=-DTAUWDD2/TAU0
+
+      D_ALPHA_DTAU=1.0d0/TAU0
+
+      ALPHA2=ALPHA*ALPHA
+      ALPHA3=ALPHA*ALPHA2
+      ALPHA4=ALPHA*ALPHA3
+
+      FUNKC_ALPHA=0.0d0
+      IF (ALPHA .LT. 1.0d0) THEN
+          FUNKC_ALPHA=EXP(CFC1*ALPHA/(ALPHA-1.0d0))
+       ENDIF
+      IF (ALPHA .GT. 1.0d0) THEN
+          FUNKC_ALPHA=-cfd1*EXP(-CFC2/(ALPHA-1.0d0))
+       ENDIF
 
-! z-component:
-      DO I=1,GRIDC%RL%NP
-        DWORK(I,ISP) = DWORK3(I,ISP)
-      ENDDO
-      CALL OPSYNC(DWORK(1,ISP),CWORK(1,ISP),GRIDC%NPLWV)
-      CALL FFT3D(CWORK(1,ISP),GRIDC,-1)
+      D_FUNKC_ALPHA_DALPHA=0.0d0
+      IF (ALPHA .lt. 1.0d0) THEN
+          D_FUNKC_ALPHA_DALPHA=-cfc1*FUNKC_ALPHA &
+     &                         /(ALPHA-1.0d0)**TWO 
+       ENDIF
+      IF (ALPHA .gt. 1.0d0) THEN
+          D_FUNKC_ALPHA_DALPHA=cfc2*FUNKC_ALPHA &
+     &                         /(ALPHA-1.0d0)**TWO
+      endif
+
+      CALL CORGGA_0(RU,RD,DRU,DRD,DRT,&
+     &        EPPGGA0,EPPGGA0_D1,EPPGGA0_D2,EPPGGA0_DD1,EPPGGA0_DD2)
+      CALL CORGGA_1(RU,RD,DRU,DRD,DRT, &
+     &       EPPGGA1,EPPGGA1_D1,EPPGGA1_D2,EPPGGA1_DD1,EPPGGA1_DD2)
+
+
+      EPP=EPPGGA1+FUNKC_ALPHA*(EPPGGA0-EPPGGA1)
+      D_EPP_D1=EPPGGA1_D1 &
+     &          +(EPPGGA0-EPPGGA1)*D_FUNKC_ALPHA_DALPHA*D_ALPHA_D1 &
+     &          +FUNKC_ALPHA*(EPPGGA0_D1-EPPGGA1_D1) 
+      D_EPP_D2=EPPGGA1_D2 &
+     &          +(EPPGGA0-EPPGGA1)*D_FUNKC_ALPHA_DALPHA*D_ALPHA_D2 &
+     &          +FUNKC_ALPHA*(EPPGGA0_D2-EPPGGA1_D2)
+      D_EPP_DD1=EPPGGA1_DD1 &
+     &          +(EPPGGA0-EPPGGA1)*D_FUNKC_ALPHA_DALPHA*D_ALPHA_DD1 &
+     &          +FUNKC_ALPHA*(EPPGGA0_DD1-EPPGGA1_DD1)
+      D_EPP_DD2=EPPGGA1_DD2 &
+     &          +(EPPGGA0-EPPGGA1)*D_FUNKC_ALPHA_DALPHA*D_ALPHA_DD2 &
+     &          +FUNKC_ALPHA*(EPPGGA0_DD2-EPPGGA1_DD2) 
+      D_EPP_DTAU=(EPPGGA0-EPPGGA1)*D_FUNKC_ALPHA_DALPHA*D_ALPHA_DTAU
 
-      DO I=1,GRIDC%RC%NP
-         N1= MOD((I-1),GRIDC%RC%NROW) +1
-         NC= (I-1)/GRIDC%RC%NROW+1
-         N2= GRIDC%RC%I2(NC)
-         N3= GRIDC%RC%I3(NC)
 
-         GZ=(GRIDC%LPCTX(N1)*LATT_CUR%B(3,1)+GRIDC%LPCTY(N2)*LATT_CUR%B(3,2)+GRIDC%LPCTZ(N3)*LATT_CUR%B(3,3))
-         CWGRAD(I,ISP)=CWGRAD(I,ISP)+CWORK(I,ISP)*GZ*CITPI
-      ENDDO
 
-      CALL SETUNB(CWGRAD(1,ISP),GRIDC)
-      CALL FFT3D(CWGRAD(1,ISP),GRIDC,1)
-      CALL OPSYNC(CWGRAD(1,ISP),DWGRAD(1,ISP),GRIDC%NPLWV)
-!
-   ENDDO spin2
+      VCD1=EPP+RT*D_EPP_D1
+      VCD2=EPP+RT*D_EPP_D2
+      VCDD1=RT*D_EPP_DD1
+      VCDD2=RT*D_EPP_DD2
+      AMUCD1=RT*D_EPP_DTAU
+      AMUCD2=AMUCD1
 
-!
-!=======================================================================
-! Now prepare the rest:
-! (store rho in DWORK3 and quantity of above in DWORK1)
-!=======================================================================
-   XCENC=0._q
-   CVZERO=0._q
-   XCENCC=0._q
+      EC_REVTPSS=RT*EPP
 
-   DO I=1,GRIDC%RL%NP
-      RHO1= MAX(REAL((DHTOT(I,1)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), 1E-10_q)
-      RHO2= MAX(REAL((DHTOT(I,2)+DENCOR(I)/2)/LATT_CUR%OMEGA ,KIND=q), 1E-10_q)
+      RETURN
+      END 
 
-      VXC1=DWORKG(I,1)- REAL( DWGRAD(I,1) ,KIND=q) *RINPL
-      VXC2=DWORKG(I,2)- REAL( DWGRAD(I,2) ,KIND=q) *RINPL
-      DWORK(I,1)=VXC1
-      DWORK(I,2)=VXC2
-      VXC = 0.5_q*(VXC1+VXC2)
-      CVZERO=CVZERO+VXC
-      XCENCC=XCENCC-VXC1*RHO1*LATT_CUR%OMEGA-VXC2*RHO2*LATT_CUR%OMEGA
-      XCENC=XCENC  -VXC1* REAL( DHTOT(I,1) ,KIND=q) -VXC2* REAL( DHTOT(I,2) ,KIND=q)
-   ENDDO
 
-   EXC   =EXC
-   CVZERO=CVZERO*RINPL
-   XCENC =(XCENC+EXC)*RINPL
-   XCENCC=(XCENCC+EXC)*RINPL
-   EXC=EXC*RINPL
+      SUBROUTINE CORGGA_1( &
+     &   RU,RD,DRU,DRD,DRT, &
+     &   EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
 
-   SIF11=SIF11-XCENCC
-   SIF22=SIF22-XCENCC
-   SIF33=SIF33-XCENCC
-   XCSIF(1,1)=SIF11
-   XCSIF(2,2)=SIF22
-   XCSIF(3,3)=SIF33
-   XCSIF(1,2)=SIF12
-   XCSIF(2,1)=SIF12
-   XCSIF(2,3)=SIF23
-   XCSIF(3,2)=SIF23
-   XCSIF(3,1)=SIF31
-   XCSIF(1,3)=SIF31
 
-   CALLMPI( M_sum_s(GRIDC%COMM, 2, EXC, XCENC, 0._q , 0._q ))
-   CALLMPI( M_sum_d(GRIDC%COMM, XCSIF, 9))
-   CALLMPI( M_sum_z(GRIDC%COMM,CVZERO,1))
+      IMPLICIT REAL*8 (A-H,O-Z)
+      PARAMETER (TWO=2.0d0)
+      PARAMETER (THREE=3.0d0)
+      PARAMETER (FOUR=4.0d0)
+      PARAMETER (FIVE=5.0d0)
+      PARAMETER (SIX=6.0d0)
+      PARAMETER (THRD=1.0d0/3.0d0)
+      PARAMETER (THRD2=2.0d0*THRD)
+      PARAMETER (THRD4=4.0d0*THRD)
+      PARAMETER (THRD5=1.0d0+THRD2)
+      PARAMETER (THRD8=1.0d0+THRD5)
+      PARAMETER (PI =3.141592653589793238d0)
+      PARAMETER (PISQ=PI*PI)
+  
+      PARAMETER (GAMMA=0.031090690869654895034940863712730d0)
+      PARAMETER (BETA_mb=0.066724550603149220d0)
 
-! Test dumps:
-   IF (IDUMP/=0) THEN
-      WRITE(*,'(A,F24.14)') '<rho*excgc> =',EXC
-      WRITE(*,'(A,F24.14)') '<rho*vxcgc> =',EXC-XCENC
-      WRITE(*,'(A,F24.14)') '    xcencgc =',XCENC
-   ENDIF
-   RETURN
- END SUBROUTINE METAGGA_PW_
+      EPPGGA  =0.0d0
+      EPPGGA_D1=0.0d0
+      EPPGGA_D2=0.0d0
+      EPPGGA_DD1=0.0d0
+      EPPGGA_DD2=0.0d0
 
+      RT=RU+RD
+      YA=DRU**2.0d0
+      YB=DRD**2.0d0
+      Y=DRT**2.0d0
+      YC=(Y-YA-YB)/2.0d0
 
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.99999999999990d0),0.99999999999990d0)
+      DZETAD1=TWO*RD/RT**TWO
+      DZETAD2=-TWO*RU/RT**TWO
 
-!************************ SUBROUTINE GGASPINCOR ************************
-!
-!  calculate the correlation energy density according to the
-!  Perdew, Burke and Ernzerhof functional
-!
-!***********************************************************************
 
-    SUBROUTINE GGASPINCOR(D1,D2,DDA, EC)
+      DTHRD=exp(log(RT)*THRD)
+      RS=(0.750d0/PI)**THRD/DTHRD
+      DRSD1=-THRD/RT*RS
+      DRSD2=-THRD/RT*RS
 
-!     D1   density up
-!     D2   density down
-!     DDA  |gradient of the total density|
 
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-      PARAMETER (THRD=1._q/3._q)
+      PHI = (exp((TWO*THRD)*log(1.0d0+ZETA)) &
+     &       +exp((TWO*THRD)*log(1.0d0-ZETA)))/2.0d0
+      D_PHI_DZETA=THRD*((1.0d0+ZETA)**(-THRD)-(1.0d0-ZETA)**(-THRD))
+      D_PHI_D1=D_PHI_DZETA*DZETAD1
+      D_PHI_D2=D_PHI_DZETA*DZETAD2
 
-      D=D1+D2
-      DTHRD=exp(log(D)*THRD)
-      RS=(0.75_q/PI)**THRD/DTHRD
+      AFIX_T=SQRT(PI/FOUR)*(9.0d0*PI/FOUR)**(1.0d0/SIX)
+      S=DRT/(TWO*(THREE*PISQ)**THRD*RT**THRD4)
+      DSD1=-THRD4*S/RT
+      DSD2=-THRD4*S/RT
+      GNGNU=1.0d0/(TWO*DRT)*(TWO*DRU+TWO*YC/DRU)
+      GNGND=1.0d0/(TWO*DRT)*(TWO*DRD+TWO*YC/DRD)
+      DSDD1=S/DRT*GNGNU
+      DSDD2=S/DRT*GNGND
 
-      ZETA=(D1-D2)/D
-      ZETA=MIN(MAX(ZETA,-0.9999999999999_q),0.9999999999999_q)
+      T=AFIX_T*S/SQRT(RS)/PHI
+      T2 = T*T
+      T4 = T2*T2
 
-      FK=(3._q*PI*PI)**THRD*DTHRD
-      SK = SQRT(4.0_q*FK/PI)
-      G = (exp((2*THRD)*log(1._q+ZETA)) &
-                +exp((2*THRD)*log(1._q-ZETA)))/2._q
-      T = DDA/(D*2._q*SK*G)
+      DTD1=AFIX_T*(PHI*RS*DSD1-0.50d0*S*PHI*DRSD1-S*RS*D_PHI_D1) &
+     &           /(PHI**TWO*RS**(THREE/TWO))
+      DTD2=AFIX_T*(PHI*RS*DSD2-0.50d0*S*PHI*DRSD2-S*RS*D_PHI_D2) &
+     &           /(PHI**TWO*RS**(THREE/TWO))
+      DTDD1=AFIX_T*DSDD1/(SQRT(RS)*PHI)
+      DTDD2=AFIX_T*DSDD2/(SQRT(RS)*PHI)
 
-      CALL corpbe(RS,ZETA,ECLDA,ECD1LDA,ECD2LDA,G,SK, &
-           T,EC,ECD1,ECD2,ECQ,.TRUE.)
+      FK=(3.0d0*PI*PI)**THRD*DTHRD
+      SK = SQRT(4.00d0*FK/PI)
+      CALL CORPBE_revtpss(RS,ZETA,EC,VCUPLDA,VCDNLDA,PHI,SK, &
+     &           T,H,DVCUP,DVCDN,ECQ,.FALSE.)
+      D_EC_DZETA=(VCUPLDA-VCDNLDA)/TWO
+      D_EC_DRS=(EC-ZETA*D_EC_DZETA-(VCUPLDA+VCDNLDA)/TWO)*THREE/RS
 
-      EC  =(EC  +ECLDA)
+      AFACTOR=0.10d0
+      BFACTOR=0.17780d0
+      BETA_NUM=1.0d0 + AFACTOR*RS
+      BETA_DEN=1.0d0+ BFACTOR*RS
+      D_BETA_NUM=AFACTOR
+      D_BETA_DEN=BFACTOR
+      BETA = BETA_MB*BETA_NUM/BETA_DEN
+      D_BETA_DRS=BETA_MB*(BETA_DEN*D_BETA_NUM-BETA_NUM*D_BETA_DEN) &
+     &                  /BETA_DEN**TWO
+      
+ 
+      PHI3=PHI**THREE
+      PON=-EC/(PHI3*gamma)
+      W=DEXP(PON)-1.0d0
+      D_W_DRS=-(W+1.0d0)*D_EC_DRS/(GAMMA*PHI3)
+      D_W_DZETA=-(W+1.0d0)/(GAMMA*PHI3) &
+     &                  *(D_EC_DZETA-THREE*EC*D_PHI_DZETA/PHI)
+      D_W_DT=0.0d0
+
+
+      A=BETA/(GAMMA*W)
+      D_A_DRS=(W*D_BETA_DRS-BETA*D_W_DRS)/(GAMMA*W**TWO)
+      D_A_DZETA=-BETA*D_W_DZETA/(GAMMA*W**TWO)
+      D_A_DT=0.0d0
+
+      V=A*T2
+      D_V_DRS=T2*D_A_DRS
+      D_V_DZETA=T2*D_A_DZETA
+      D_V_DT=T2*D_A_DT+TWO*A*T
+        
+
+      FUNKG=1.0d0/(1.0d0+4.0d0*V)**0.250d0
+      D_FUNKG_DV=-1.0d0/(1.0d0+4.0d0*V)**1.250d0
+
+
+      
+      HCORE=1.0d0+W*(1.0d0-FUNKG)
+      AH=GAMMA*PHI3
+      H=AH*DLOG(HCORE)
+   
+      DH1=1.0d0-FUNKG
+      DH2=W*D_FUNKG_DV
+      D_H_DRS=(DH1*D_W_DRS-DH2*D_V_DRS)*AH/HCORE
+      D_H_DZETA=THREE*H*D_PHI_DZETA/PHI &
+     &          +(DH1*D_W_DZETA-DH2*D_V_DZETA)*AH/HCORE
+      D_H_DT=(DH1*D_W_DT-DH2*D_V_DT)*AH/HCORE
+
+      EPPGGA=EC+H
+      EPPGGA_D1=D_EC_DRS*DRSD1+D_EC_DZETA*DZETAD1+D_H_DRS*DRSD1 &
+     &                        +D_H_DZETA*DZETAD1+D_H_DT*DTD1
+      EPPGGA_D2=D_EC_DRS*DRSD2+D_EC_DZETA*DZETAD2+D_H_DRS*DRSD2 &
+     &                        +D_H_DZETA*DZETAD2+D_H_DT*DTD2
+      EPPGGA_DD1=D_H_DT*DTDD1
+      EPPGGA_DD2=D_H_DT*DTDD2
 
       RETURN
-    END SUBROUTINE GGASPINCOR
+      END 
 
-!************************ SUBROUTINE GGACOR *****************************
-!
-!  calculate the correlation energy density according to the
-!  Perdew, Burke and Ernzerhof functional
-!
-!***********************************************************************
 
-    SUBROUTINE GGACOR(D, DD, EC)
-      USE prec
-      USE constant
-      IMPLICIT REAL(q) (A-H,O-Z)
-      PARAMETER (THRD=1._q/3._q)
 
-      IF (D<0) THEN
-         EC   = 0._q
-         RETURN
-      ENDIF
+      SUBROUTINE CORGGA_0(RU,RD,DRU,DRD,DRT, &
+     &   EPPGGA,EPPGGA_D1,EPPGGA_D2,EPPGGA_DD1,EPPGGA_DD2)
 
-      DTHRD=exp(log(D)*THRD)
-      RS=(0.75_q/PI)**THRD/DTHRD
-      FK=(3._q*PI*PI)**THRD*DTHRD
-      SK = SQRT(4.0_q*FK/PI)
+      IMPLICIT REAL*8 (A-H,O-Z)
 
-      IF(D>1.E-10_q)THEN
-         T=DD/(D*SK*2._q)
-      ELSE
-         T=0.0_q
-      ENDIF
+      PARAMETER (CFB1=0.0285764d0)
+      PARAMETER (CFB2=0.0889d0) 
+      PARAMETER (CFB3=0.125541d0)
+      PARAMETER (cfkaiLD=0.12802585262625815d0)
+
+      PARAMETER (TWO=2.0d0)
+      PARAMETER (THREE=3.0d0)
+      PARAMETER (FOUR=4.0d0)
+      PARAMETER (FIVE=5.0d0)
+      PARAMETER (SIX=6.0d0)
+      PARAMETER (THRD=1.0d0/3.0d0)
+      PARAMETER (THRD2=2.0d0*THRD)
+      PARAMETER (THRD4=4.0d0*THRD)
+      PARAMETER (THRD5=1.0d0+THRD2)
+      PARAMETER (THRD8=1.0d0+THRD5)
+      PARAMETER (PI =3.141592653589793238d0)
+      PARAMETER (PISQ=PI*PI)
 
-      CALL CORunspPBE(RS,ECLDA,ECDLDA,SK, &
-           T,EC,ECD,ECDD,.TRUE.)
+      PARAMETER (GAMMA=0.031090690869654895034940863712730d0)
+      PARAMETER (BETA_mb=0.066724550603149220d0)
 
-      EC = (EC+ECLDA)
+      EPPGGA  =0.0d0
+      EPPGGA_D1=0.0d0
+      EPPGGA_D2=0.0d0
+      EPPGGA_DD1=0.0d0
+      EPPGGA_DD2=0.0d0
+      AX_LDA=-THREE/(FOUR*PI)*(9.00d0*PI/FOUR)**THRD
 
-      RETURN
-    END SUBROUTINE GGACOR
+      RT=RU+RD
+      YA=DRU**2.0d0
+      YB=DRD**2.0d0
+      Y=DRT**2.0d0
+      YC=(Y-YA-YB)/2.0d0
 
+      ZETA=(RU-RD)/RT
+      ZETA=MIN(MAX(ZETA,-0.99999999999990d0),0.99999999999990d0)
+      DZETAD1=TWO*RD/RT**TWO
+      DZETAD2=-TWO*RU/RT**TWO
 
-!=======================================================================
-! 
-! SUBROUTINE TAU_PW_DIRECT
-!
-! This subroutine calculates the kinetic energy of the PW part of the
-! wavefunctions (0.5*|grad psi|**2) 
-! and the Weizsaecker kinetic energy density, output on GRIDC
-! INPUT: GRIDC,  LATT_CUR, SYMM, NIOND, W, WDES
-! OUTPUT: TAU(GRIDC%MPLWC, WDES%NCDIJ)
-!         TAUW(GRIDC%MPLWC, WDES%NCDIJ)
-! evaluation should be more accurate than TAU_PW due to avoidance of 
-! wrap arounf errors
-!
-! Robin Hirschl 20001221 
-!=======================================================================
 
-SUBROUTINE TAU_PW_DIRECT(GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND, &
-        W,WDES,TAU,TAUW)
-      USE prec
-      USE lattice
-      USE mgrid
-      USE msymmetry
-      USE base
-      USE wave
-      USE mpimy
-      USE constant
-      
-      IMPLICIT NONE
+      DTHRD=exp(log(RT)*THRD)
+      RS=(0.750d0/PI)**THRD/DTHRD
+      DRSD1=-THRD/RT*RS
+      DRSD2=-THRD/RT*RS
+
 
-      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
-      TYPE (latt)        LATT_CUR
-      TYPE (transit)     SOFT_TO_C
-      TYPE (symmetry)    SYMM
-      TYPE (wavespin)    W
-      TYPE (wavedes)     WDES
-! result
-      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! kinetic energy density
-      RGRID ::  TAUW(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ) ! weiz kin edens
-! dynamic work array
-      COMPLEX(q),ALLOCATABLE :: CW(:),CW3(:)
-      RGRID,ALLOCATABLE :: CW2(:),CW4(:),CW5(:)
-      COMPLEX(q) :: CF(WDES%NRPLWV,3)
-      
-      INTEGER :: MPLWV,ISP,N,NK,NPL,IDIR,I,NIOND
-      REAL(q) :: WEIGHT,G1,G2,G3
-      COMPLEX(q) :: GC
+      PHI = (exp((TWO*THRD)*log(1.0d0+ZETA)) &
+     &           +exp((TWO*THRD)*log(1.0d0-ZETA)))/2.0d0
+      D_PHI_DZETA=THRD*((1.0d0+ZETA)**(-THRD)-(1.0d0-ZETA)**(-THRD))
+      D_PHI_D1=D_PHI_DZETA*DZETAD1
+      D_PHI_D2=D_PHI_DZETA*DZETAD2
 
-      MPLWV=MAX(GRID%MPLWV, GRID_SOFT%MPLWV)
-      ALLOCATE(CW(MPLWV),CW2(DIMREAL(MPLWV)),CW3(MPLWV),CW4(DIMREAL(MPLWV)), &
-           CW5(DIMREAL(MPLWV)))
+      AFIX_T=SQRT(PI/FOUR)*(9.0d0*PI/FOUR)**(1.0d0/SIX)
+      S=DRT/(TWO*(THREE*PISQ)**THRD*RT**THRD4)
+      DSD1=-THRD4*S/RT
+      DSD2=-THRD4*S/RT
+      GNGNU=1.0d0/(TWO*DRT)*(TWO*DRU+TWO*YC/DRU)
+      GNGND=1.0d0/(TWO*DRT)*(TWO*DRD+TWO*YC/DRD)
+      DSDD1=S/DRT*GNGNU
+      DSDD2=S/DRT*GNGND
+
+      RSHALF=SQRT(RS)
+      FACTOR1=1.0d0+CFB2*RSHALF+CFB3*RS
+      EC0LDA=-CFB1/FACTOR1
+
+      D_EC0LDA_DRS=(CFB3+CFB2/RSHALF/TWO)*EC0LDA**TWO/cfb1
       
-      TAU=0; TAUW=0
+      dx_zeta=((1.0d0+zeta)**THRD4+(1.0d0-zeta)**THRD4)/two
+      d_dx_zeta_dzeta=two*((1.0d0+zeta)**THRD-(1.0d0-zeta)**THRD)/three
+      TWO13=TWO**THRD
+!      gc_zeta=(two13-dx_zeta)/(two13-1.0d0)
+!      d_gc_zeta_dzeta=-d_dx_zeta_dzeta/(two13-1.0d0)
 
-#ifdef MPI
-      IF (WDES%COMM_KINTER%NCPU.NE.1) THEN
-         CALLMPI( M_stop('TAU_PW_DIRECT: KPAR>1 not implemented, sorry.') )
-         STOP
-      END IF
-#endif
+      gc_zeta=(1.0d0-2.363d0*(dx_zeta-1.0d0))*(1.0d0-zeta**12.0d0)
+      d_gc_zeta_dzeta=-(1.0d0-2.363d0*(dx_zeta-1.0d0))*12.d0*zeta**11.d0
+      d_gc_zeta_dzeta=d_gc_zeta_dzeta -2.363d0*d_dx_zeta_dzeta*(1.0d0-zeta**12.0d0)
+
+
+      w0=dexp(-EC0LDA/cfb1)-1.0d0
+      d_w0_drs=-(w0+1.0d0)*D_EC0LDA_DRS/cfb1
       
-      IF (WDES%NCDIJ==4) THEN
-         WRITE(*,*) 'WARNING: kinetic energy density not implemented for non collinear case.'
-         WRITE(*,*) 'exiting TAU_PW_DIRECT; sorry for the inconveniences.'
-         RETURN
-      ENDIF
+      gfunkinf=1.0d0/(1.0d0+four*cfkaiLD*s*s)**(1.0d0/four)
+      d_gfunkinf_ds=-two*cfkaiLD*s*gfunkinf**five
 
-spin: DO ISP=1,WDES%NCDIJ
+      hcore0=1.0d0+w0*(1.0d0-gfunkinf)
+      h0=cfb1*dlog(hcore0)
+      d_h0_drs=cfb1*d_w0_drs*(1.0d0-gfunkinf)/hcore0
+      d_h0_ds=-cfb1*w0*d_gfunkinf_ds/hcore0
 
-      CW2=0; CW3=0; CW4=0; CW5=0
-      band: DO N=1,WDES%NBANDS
-         kpoints: DO NK=1,WDES%NKPTS
-            WEIGHT=WDES%RSPIN*WDES%WTKPT(NK)*W%FERWE(N,NK,ISP)/LATT_CUR%OMEGA
-            NPL=WDES%NPLWKP(NK)
-            CF=0
-! loop over plane wave coefficients            
-            DO I=1,NPL
-! get k-vector of respective k-point and coefficient
-               G1=WDES%IGX(I,NK)+WDES%VKPT(1,NK)
-               G2=WDES%IGY(I,NK)+WDES%VKPT(2,NK)
-               G3=WDES%IGZ(I,NK)+WDES%VKPT(3,NK)
-! loop over cartesian directions
-               DO IDIR=1,3
-                  GC=(G1*LATT_CUR%B(IDIR,1)+G2*LATT_CUR%B(IDIR,2)+G3*LATT_CUR%B(IDIR,3))
-                  CF(I,IDIR)=GC*W%CPTWFP(I,N,NK,ISP)*CITPI
-               ENDDO
-            ENDDO
 
-! fourier trafo of wave-function (result in CW3)
-            CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CW3(1),W%CPTWFP(1,N,NK,ISP),GRID)
+      EPPGGA=(EC0LDA+h0)*gc_zeta
 
-! fourier trafo of gradient of wave-function 
-! loop over cartesian directions
-            DO IDIR=1,3
-               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CW(1),CF(1,IDIR),GRID)
-! update kinetic energy density (in CW2) and grad rho^2 (in CW4)
-               DO I=1,GRID%RL%NP
-                  CW2(I)=CW2(I)+HSQDTM*REAL(CW(I)*CONJG(CW(I)),KIND=q)*WEIGHT
-                  CW4(I)=CW4(I)+HSQDTM*REAL(CW(I)*CW3(I)*CONJG(CW(I)*CW3(I)),KIND=q)* &
-                       WEIGHT*WEIGHT/WDES%WTKPT(NK)
-               ENDDO
-            ENDDO
+      d_EPPGGA_dzeta=(EC0LDA+h0)*d_gc_zeta_dzeta
+      d_EPPGGA_drs=(D_EC0LDA_DRS+d_h0_drs)*gc_zeta
+      d_EPPGGA_ds=d_h0_ds*gc_zeta
 
-! update Weizsaecker KinEDens Denominator (charge density) (in CW5)           
-           DO I=1,GRID%RL%NP
-              CW5(I)=CW5(I)+REAL(CW3(I)*CONJG(CW3(I)),KIND=q)*WEIGHT
-           ENDDO
-        ENDDO kpoints
-      ENDDO band
+      EPPGGA_D1=d_EPPGGA_dzeta*DZETAD1+d_EPPGGA_drs*DRSD1 &
+     &          +d_EPPGGA_ds*DSD1
+      EPPGGA_D2=d_EPPGGA_dzeta*DZETAD2+d_EPPGGA_drs*DRSD2 &
+     &          +d_EPPGGA_ds*DSD2
 
 
-#ifdef realmode
-      CALLMPI( M_sum_d(WDES%COMM_INTER, CW5(1), GRID%RL%NP))
-#else
-      CALLMPI( M_sum_z(WDES%COMM_INTER, CW5(1), GRID%RL%NP))
-#endif
 
-! calculate Weizsaecker KinEdens
-      DO I=1,GRID%RL%NP
-         IF (CW5(I)==0._q) THEN
-            CW4(I)=0._q
-         ELSE
-            CW4(I)=CW4(I)/CW5(I)
-         ENDIF
-      ENDDO
+      EPPGGA_DD1=d_EPPGGA_ds*DSDD1
+      EPPGGA_DD2=d_EPPGGA_ds*DSDD2
 
-! merge results from nodes
-#ifdef realmode
-      CALLMPI( M_sum_d(WDES%COMM_INTER, CW2(1), GRID%RL%NP))
-      CALLMPI( M_sum_d(WDES%COMM_INTER, CW4(1), GRID%RL%NP))
-#else
-      CALLMPI( M_sum_z(WDES%COMM_INTER, CW2(1), GRID%RL%NP))
-      CALLMPI( M_sum_z(WDES%COMM_INTER, CW4(1), GRID%RL%NP))
-#endif
+      RETURN
+      END 
 
-! rescaling
-      DO I=1,GRID_SOFT%RL%NP
-         CW2(I)=CW2(I)/GRID_SOFT%NPLWV
-         CW4(I)=CW4(I)/GRID_SOFT%NPLWV         
-      ENDDO
-    
-! to rec space
-      CALL FFT3D(CW2(1),GRID_SOFT,-1)
-      CALL FFT3D(CW4(1),GRID_SOFT,-1)
-      
-! transition to finer grid
-      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CW2(1),TAU(1,ISP))
-      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CW4(1),TAUW(1,ISP))
 
-   ENDDO spin
 
-! symmetrization of result TAU(:,ISP)
-! needs (total,mag) instead of up,dw
-   IF (SYMM%ISYM>0) THEN
-      IF (WDES%NCDIJ==2) THEN
-         CALL RC_FLIP(TAU,GRIDC,2,.FALSE.)
-         CALL RC_FLIP(TAUW,GRIDC,2,.FALSE.)
-      ENDIF
-      ! symmetrization
-      CALL RHOSYM(TAU(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
-      CALL RHOSYM(TAUW(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
-      IF (WDES%NCDIJ==2) THEN
-         CALL RHOSYM(TAU(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,2)
-         CALL RHOSYM(TAUW(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,2)
-         CALL RC_FLIP(TAU,GRIDC,2,.TRUE.)
-         CALL RC_FLIP(TAUW,GRIDC,2,.TRUE.)
-      ENDIF
-   ENDIF
-   
-   DO ISP=1,WDES%NCDIJ
-! back to real space
-      CALL FFT3D(TAU(1,ISP),GRIDC,1)
-      CALL FFT3D(TAUW(1,ISP),GRIDC,1)
 
-! ATTENTION:
-! the transition to finer grid may cause instabilities with tauw being larger than tau
-! this has to be corrected !
-      TAUW(:,ISP)=MIN(REAL(TAUW(:,ISP),q),REAL(TAU(:,ISP),q))
-   ENDDO
-   DEALLOCATE(CW,CW2,CW3,CW4,CW5)
-   
-   RETURN
-END SUBROUTINE TAU_PW_DIRECT
 
+       SUBROUTINE metaggafx(cfc1,cfc2,cfd1,cfk1, &
+     &            p, a, fx, fx1p, fx1a, fx2p2, fx2pa, fx2a2)
 
-!=======================================================================
-! 
-! SUBROUTINE TAU_PW
-!
-! This subroutine calculates the kinetic energy of the PW part of the
-! wavefunctions (0.5*|grad psi|**2) 
-! and the Weizsaecker kinetic energy density, output on GRIDC
-!
-! INPUT: GRIDC,  LATT_CUR, SYMM, NIOND, W, WDES
-! OUTPUT: TAU(GRIDC%MPLWC, WDES%NCDIJ)
-!
-! Robin Hirschl 20001221 
-!=======================================================================
+       IMPLICIT REAL*8 (A-H,O-Z)
 
-SUBROUTINE TAU_PW(GRID,GRID_SOFT,GRIDC,SOFT_TO_C,LATT_CUR,SYMM,NIOND, &
-        W,WDES,TAU)
-      USE prec
-      USE lattice
-      USE mgrid
-      USE msymmetry
-      USE base
-      USE wave
-      USE mpimy
-      USE constant
-      
-      IMPLICIT NONE
+       INTEGER I
 
-      TYPE (grid_3d)     GRIDC,GRID,GRID_SOFT
-      TYPE (latt)        LATT_CUR
-      TYPE (transit)     SOFT_TO_C
-      TYPE (symmetry)    SYMM
-      TYPE (wavespin)    W
-      TYPE (wavedes)     WDES
-! result
-      RGRID ::  TAU(DIMREAL(GRIDC%MPLWV),WDES%NCDIJ)  ! kinetic energy density
-! dynamic work array
-      RGRID,ALLOCATABLE :: CKIN(:)
+      PARAMETER (cfk0=0.1740d0)
+      PARAMETER (CFA1=4.9479d0)
 
-      COMPLEX(q),ALLOCATABLE :: CFAR(:),CFBR(:)
-      COMPLEX(q) :: CFA(WDES%NRPLWV,3),CFB(WDES%NRPLWV,3)
-      
-      INTEGER :: ISPINOR,ISPINOR_
-      INTEGER :: MPLWV,ISP,N,NK,NPL,IDIR,I,NIOND
-      REAL(q) :: WEIGHT,G1,G2,G3
-      COMPLEX(q) :: GC
+      PARAMETER (CFMUAK=10.00d0/81.0d0)
+      PARAMETER (CFB1=0.156632d0)
+      PARAMETER (CFB2=0.12083d0)
+      PARAMETER (CFB3=0.5d0)
 
-      MPLWV=MAX(GRID%MPLWV, GRID_SOFT%MPLWV)
-      ALLOCATE(CFAR(MPLWV),CFBR(MPLWV))
-      ALLOCATE(CKIN(DIMREAL(MPLWV)))
-      
-      TAU=0
-      
-spin: DO ISP=1,WDES%ISPIN
+      PARAMETER (TWO=2.0d0)
+      PARAMETER (THREE=3.0d0)
+      PARAMETER (FOUR=4.0d0)
 
-      DO ISPINOR=0,WDES%NRSPINORS-1
-      DO ISPINOR_=0,WDES%NRSPINORS-1
-      
-      CFAR=0 ; CFBR=0; CKIN=0
-      
-      band: DO N=1,WDES%NBANDS
-         kpoints: DO NK=1,WDES%NKPTS
-#ifdef MPI
-            IF (MOD(NK-1,WDES%COMM_KINTER%NCPU).NE.WDES%COMM_KINTER%NODE_ME-1) CYCLE
-#endif
-            WEIGHT=WDES%RSPIN*WDES%WTKPT(NK)*W%FERWE(N,NK,ISP)/LATT_CUR%OMEGA
-            NPL=WDES%NGVECTOR(NK)
-            CFA=0; CFB=0
-! loop over plane wave coefficients            
-            DO I=1,NPL
-! get k-vector of respective k-point and coefficient
-               G1=WDES%IGX(I,NK)+WDES%VKPT(1,NK)
-               G2=WDES%IGY(I,NK)+WDES%VKPT(2,NK)
-               G3=WDES%IGZ(I,NK)+WDES%VKPT(3,NK)
-! loop over cartesian directions
-               DO IDIR=1,3
-                  GC=(G1*LATT_CUR%B(IDIR,1)+G2*LATT_CUR%B(IDIR,2)+G3*LATT_CUR%B(IDIR,3))
-                  CFA(I,IDIR)=GC*W%CPTWFP(I+ISPINOR *NPL,N,NK,ISP)*CITPI
-                  CFB(I,IDIR)=GC*W%CPTWFP(I+ISPINOR_*NPL,N,NK,ISP)*CITPI
-               ENDDO
-            ENDDO
+      fx=0.0d0
+      fx1p=0.0d0
+      fx1a=0.0d0
+      fx2p2=0.0d0
+      fx2pa=0.0d0
+      fx2a2=0.0d0
 
-! fourier trafo of gradient of wave-function 
-! loop over cartesian directions
-            DO IDIR=1,3
-               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CFAR(1),CFA(1,IDIR),GRID)
-               CALL FFTWAV(NPL,WDES%NINDPW(1,NK),CFBR(1),CFB(1,IDIR),GRID)
-! update kinetic energy density (in CW2) and grad rho^2 (in CW4)
-               DO I=1,GRID%RL%NP
-#ifdef realmode
-                  CKIN(I)=CKIN(I)+HSQDTM*REAL(CONJG(CFBR(I))*CFAR(I),KIND=q)*WEIGHT
-#else
-                  CKIN(I)=CKIN(I)+HSQDTM*(CONJG(CFBR(I))*CFAR(I))*WEIGHT
-#endif            
-               ENDDO
-            ENDDO
 
-        ENDDO kpoints
-      ENDDO band
+      P2=P*P
+      oma=1.0d0-a
+      oma2=oma*oma
+
+          HX0=1.0d0+CFK0
+
+          cfb4=cfmuak**two/cfk1-0.112654d0
+          if (cfb4 .gt. 0.0d0) then
+             wfac=cfb4*p2*dexp(-cfb4*p/cfmuak)
+             d_wfac_dp=cfb4*p*dexp(-cfb4*p/cfmuak)*(two-cfb4*p/cfmuak)
+          else
+             wfac=cfb4*p2*dexp(cfb4*p/cfmuak)
+             d_wfac_dp=cfb4*p*dexp(cfb4*p/cfmuak)*(two+cfb4*p/cfmuak)
+          endif
+          vfac=cfb1*p+cfb2*oma*dexp(-cfb3*oma2)
+          yfac=cfmuak*p+wfac+vfac**two
+          hx1=1.0d0+cfk1-cfk1/(1.0d0+yfac/cfk1)
+
+          FA=0.d0
+          if (a .lt. 1.0d0) then
+             FA=dExp(-cfc1*a/oma)
+          endif
+          if (a .gt. 1.0d0) then
+             FA=-cfd1*dExp(cfc2/oma)
+          endif
+
+         p14=p**(1.0d0/four)
+         gx=1.d0
+         if (p .gt. 0.d0) then
+             gx=1.0d0-dexp(-cfa1/p14)
+         endif
+
+          Fx1 = hx1+FA*(hx0-hx1)
 
-! merge results from nodes
-#ifdef realmode
-      CALLMPI( M_sum_d(WDES%COMM_INTER, CKIN(1), GRID%RL%NP))
-      CALLMPI( M_sum_d(WDES%COMM_KINTER, CKIN(1), GRID%RL%NP))
-#else
-      CALLMPI( M_sum_z(WDES%COMM_INTER, CKIN(1), GRID%RL%NP))
-      CALLMPI( M_sum_z(WDES%COMM_KINTER, CKIN(1), GRID%RL%NP))
-#endif
+          Fx = Fx1*gx
 
-! rescaling
-      CKIN=CKIN/GRID_SOFT%NPLWV
-    
-! to rec space
-      CALL FFT3D(CKIN(1),GRID_SOFT,-1)
-      
-! transition to finer grid
-      CALL CPB_GRID(GRIDC,GRID_SOFT,SOFT_TO_C,CKIN(1),TAU(1,ISP+ISPINOR_+2*ISPINOR))
-!     CALL SETUNB_COMPAT(TAU(1,ISP+ISPINOR_+2*ISPINOR),GRIDC)
-      ENDDO ! ispinor_
-      ENDDO ! ispinor
-      ENDDO spin
 
 
-      IF (WDES%LNONCOLLINEAR) THEN
-         ! needs (total,mag) instead of up,dw
-         CALL RC_FLIP(TAU,GRIDC,WDES%NCDIJ,.FALSE.)
-         IF (SYMM%ISYM>0) THEN
-            CALL RHOSYM(TAU(1,1),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,1)
-            IF (.NOT.WDES%LSPIRAL) THEN
-               CALL SYMFIELD(TAU(1,2),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,WDES%SAXIS,LATT_CUR)
-            ENDIF
-         ENDIF
-      ELSE
-         IF (SYMM%ISYM>0) THEN
-            ! symmetrization of result TAU(:,ISP)
-            ! needs (total,mag) instead of up,dw
-            CALL RC_FLIP(TAU, GRIDC,WDES%NCDIJ,.FALSE.)
-            DO ISP=1,WDES%ISPIN
-               CALL RHOSYM(TAU(1,ISP),GRIDC,SYMM%PTRANS,NIOND,SYMM%MAGROT,ISP)
-            ENDDO
-            ! in the collinear case we go back to up,dw
-            CALL RC_FLIP(TAU,GRIDC,WDES%NCDIJ,.TRUE.)
-         ENDIF      
-      ENDIF
- 
-! back to real space
-      DO ISP=1,WDES%NCDIJ
-         CALL TRUNC_HIGH_FREQU(LATT_CUR, GRIDC, TAU(1,ISP))
-         CALL FFT3D(TAU(1,ISP),GRIDC,1)
-      ENDDO
-      TAU=REAL(TAU,KIND=q)
-   
-      DEALLOCATE(CFAR,CFBR,CKIN)
-   
-      RETURN
-END SUBROUTINE TAU_PW
+            d_hx0_dp=0.d0
 
+            d_vfac_dp=cfb1
+            d_yfac_dp=cfmuak+d_wfac_dp+two*vfac*d_vfac_dp
+            d_hx1_dp=d_yfac_dp/(1.0d0+yfac/cfk1)**two
 
-!************************ SUBROUTINE METAGGA ***************************
-!
-! calculates local contribution to metagga Exc according to 
-! Perdew et. al. PRL 82, 12 (1999)
-!
-! RH 20001119
-!
-! everything in Hartree units
-!
-! ATTANTION: Every values are passed "as they are", i.e. including
-! possibly unphysical numerical errors (e.g. negative charge densities)
-! values need to be checked accordingly
-!***********************************************************************
+            d_vfac_da=-cfb2*(1.0d0-two*cfb3*oma2)*dexp(-cfb3*oma2)
+            d_yfac_da=two*vfac*d_vfac_da
+            d_hx1_da=d_yfac_da/(1.0d0+yfac/cfk1)**two
 
-SUBROUTINE METAGGA(RU,RD,DRU,DRD,DRT,TAUU,TAUD,TAUWU,TAUWD,EX,EC,I)
+          d_FA_da=0.d0
+          if (a .lt. 1.0d0) then
+            d_FA_da=-cfc1*dExp(-cfc1*a/oma)/oma**two
+          endif
+          if (a .gt. 1.0d0) then
+            d_FA_da=-cfc2*cfd1*dExp(cfc2/oma)/oma**two
+          endif
 
-! RU,RD      density up,down
-! DRU, DRD   abs. val. gradient of density up/down
-! DRT        abs. val. gradient of total density
-! TAUU,TAUD  kinetic energy density up/down
-! TAUWU,TAUWD Weizsaecker kinetic energy density up/down
-! EXC        return value
+         d_gx_dp=0.d0
+         if (p .gt. 0.d0) then
+             d_gx_dp=-cfa1/four/p/p14*dexp(-cfa1/p14)
+         endif
 
-  USE prec
-  USE constant
-  IMPLICIT REAL(q) (A-H,O-Z)
+            d_Fx1_dp=d_hx1_dp+FA*(d_hx0_dp-d_hx1_dp)
 
-  INTEGER I
-! the following parameters are given by Perdew et.al.
-  PARAMETER (RKAPPA=0.804_q)
-  PARAMETER (D=0.113_q)
-  PARAMETER (C=0.53_q)
-! other parameters
-  PARAMETER (THRD=1._q/3._q)
-  PARAMETER (TTHRD=2._q*THRD)
-  PARAMETER (FTHRD=1._q+TTHRD)
-  PARAMETER (ETHRD=1._q+FTHRD)
-  PARAMETER (PISQ=PI*PI)
+            d_Fx1_da=(1.0d0-FA)*d_hx1_da+d_FA_da*(hx0-hx1)
 
 
-  EX=0._q;EC=0._q
-! exchange energy
-! spin up
-     P=(2._q*DRU)**2._q/(4._q*(3._q*PISQ)**TTHRD*(2._q*RU)**ETHRD)
-     QQS=6._q*TAUU/(2._q*(3._q*PISQ)**TTHRD*(2._q*RU)**FTHRD)-9._q/20._q-P/12._q
-     X=10._q/81._q*P+146._q/2025._q*QQS*QQS-73._q/405._q*QQS*P
-     X=X+(D+1._q/RKAPPA*(10._q/81._q)**2._q)*P*P
-     FX=1._q+RKAPPA-RKAPPA/(1._q+(X/RKAPPA))
-     EX=EX-RU*(3._q/(4._q*PI))*(3._q*PISQ*2._q*RU)**THRD*FX
-! spin down
-     P=(2._q*DRD)**2._q/(4._q*(3._q*PISQ)**TTHRD*(2._q*RD)**ETHRD)
-     QQS=6._q*TAUD/(2._q*(3._q*PISQ)**TTHRD*(2._q*RD)**FTHRD)-9._q/20._q-P/12._q
-     X=10._q/81._q*P+146._q/2025._q*QQS*QQS-73._q/405._q*QQS*P
-     X=X+(D+1._q/RKAPPA*(10._q/81._q)**2._q)*P*P
-     FX=1._q+RKAPPA-RKAPPA/(1._q+(X/RKAPPA))
-     EX=EX-RD*(3._q/(4._q*PI))*(3._q*PISQ*2._q*RD)**THRD*FX
+            fx1p=d_Fx1_dp*gx+Fx1*d_gx_dp
+
+            fx1a=d_Fx1_da*gx
+
+      RETURN
+      END 
+
+! Modified by Adrienn Ruzsinszky
+!######################################################################
+!----------------------------------------------------------------------
+      SUBROUTINE CORPBE_revtpss(RS,ZET,EC,VCUP,VCDN,g,sk, &
+     &                  T,H,DVCUP,DVCDN,ecdd,lgga)
+!----------------------------------------------------------------------
+!  Official PBE correlation code. K. Burke, May 14, 1996.
+!  INPUT: RS=SEITZ RADIUS=(3/4pi rho)^(1/3)
+!       : ZET=RELATIVE SPIN POLARIZATION = (rhoup-rhodn)/rho
+!       : t=ABS(GRAD rho)/(rho*2.*KS*G)  -- only needed for PBE
+!       : lgga=flag to do gga (0=>LSD only)
+!       : lmetagga=flag to do metagga (revTPSS)
+!       : lpot=flag to do potential (0=>energy only)
+!  output: ec=lsd correlation energy from [a]
+!        : vcup=lsd up correlation potential
+!        : vcdn=lsd dn correlation potential
+!        : h=NONLOCAL PART OF CORRELATION ENERGY PER ELECTRON
+!        : dvcup=nonlocal correction to vcup
+!        : dvcdn=nonlocal correction to vcdn
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! References:
+! [a] J.P.~Perdew, K.~Burke, and M.~Ernzerhof, 
+!     {\sl Generalized gradient approximation made simple}, sub.
+!     to Phys. Rev.Lett. May 1996.
+! [b] J. P. Perdew, K. Burke, and Y. Wang, {\sl Real-space cutoff
+!     construction of a generalized gradient approximation:  The PW91
+!     density functional}, submitted to Phys. Rev. B, Feb. 1996.
+! [c] J. P. Perdew and Y. Wang, Phys. Rev. B {\bf 45}, 13244 (1992).
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+      USE prec
+      IMPLICIT REAL(q) (A-H,O-Z)
+      logical lgga
+! thrd*=various multiples of 1/3
+! numbers for use in LSD energy spin-interpolation formula, [c](9).
+!      GAM= 2^(4/3)-2
+!      FZZ=f''(0)= 8/(9*GAM)
+! numbers for construction of PBE
+!      gamma=(1-log(2))/pi^2
+!      bet=coefficient in gradient expansion for correlation, [a](4).
+!      eta=small number to stop d phi/ dzeta from blowing up at 
+!          |zeta|=1.      
+      parameter(thrd=1._q/3._q,thrdm=-thrd,thrd2=2._q*thrd)
+      parameter(sixthm=thrdm/2._q)
+      parameter(thrd4=4._q*thrd)
+      parameter(GAM=0.5198420997897463295344212145565_q)
+      parameter(fzz=8._q/(9._q*GAM))
+      parameter(gamma=0.03109069086965489503494086371273_q)
+      parameter(bet_mb=0.06672455060314922_q)
+      parameter(eta=1.e-12_q)
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! find LSD energy contributions, using [c](10) and Table I[c].
+! EU=unpolarized LSD correlation energy
+! EURS=dEU/drs
+! EP=fully polarized LSD correlation energy
+! EPRS=dEP/drs
+! ALFM=-spin stiffness, [c](3).
+! ALFRSM=-dalpha/drs
+! F=spin-scaling factor from [c](9).
+! construct ec, using [c](8)
+      rtrs=dsqrt(rs)
+      CALL gcor2(0.0310907_q,0.21370_q,7.5957_q,3.5876_q,1.6382_q, &
+     &    0.49294_q,rtrs,EU,EURS)
+      CALL gcor2(0.01554535_q,0.20548_q,14.1189_q,6.1977_q,3.3662_q, &
+     &    0.62517_q,rtRS,EP,EPRS)
+      CALL gcor2(0.0168869_q,0.11125_q,10.357_q,3.6231_q,0.88026_q, &
+     &    0.49671_q,rtRS,ALFM,ALFRSM)
+      ALFC = -ALFM
+      Z4 = ZET**4
+      F=((1._q+ZET)**THRD4+(1._q-ZET)**THRD4-2._q)/GAM
+      EC = EU*(1._q-F*Z4)+EP*F*Z4-ALFM*F*(1._q-Z4)/FZZ
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! LSD potential from [c](A1)
+! ECRS = dEc/drs [c](A2)
+! ECZET=dEc/dzeta [c](A3)
+! FZ = dF/dzeta [c](A4)
+      ECRS = EURS*(1._q-F*Z4)+EPRS*F*Z4-ALFRSM*F*(1._q-Z4)/FZZ
+      FZ = THRD4*((1._q+ZET)**THRD-(1._q-ZET)**THRD)/GAM
+      ECZET = 4._q*(ZET**3)*F*(EP-EU+ALFM/FZZ)+FZ*(Z4*EP-Z4*EU &
+     &        -(1._q-Z4)*ALFM/FZZ)
+      COMM = EC -RS*ECRS/3._q-ZET*ECZET
+      VCUP = COMM + ECZET
+      VCDN = COMM - ECZET
+!write(*,*)'rs,VCUP,VCDN',rs,VCUP,VCDN
+      if (.not.lgga) return
+!----------------------------------------------------------------------
+! PBE correlation energy
+! G=phi(zeta), given after [a](3)
+! DELT=bet/gamma
+! B=A of [a](8)
+      bet = bet_mb*(1._q + 0.1_q*RS)/(1._q + 0.1778_q*RS)
+
+      delt=bet/gamma
+      G3 = G**3
+      PON=-EC/(G3*gamma)
+      B = DELT/(DEXP(PON)-1._q)
+      B2 = B*B
+      T2 = T*T
+      T4 = T2*T2
+      RS2 = RS*RS
+      RS3 = RS2*RS
+      Q4 = 1._q+B*T2
+      Q5 = 1._q+B*T2+B2*T4
+      H = G3*(BET/DELT)*DLOG(1._q+DELT*Q4*T2/Q5)
+!----------------------------------------------------------------------
+!----------------------------------------------------------------------
+! ENERGY DONE. NOW THE POTENTIAL, using appendix E of [b].
+      G4 = G3*G
+      T6 = T4*T2
+      RSTHRD = RS/3._q
+      GZ=(((1._q+zet)**2+eta)**sixthm- &
+     &((1._q-zet)**2+eta)**sixthm)/3._q
+      FAC = DELT/B+1._q
+      BG = -3._q*B2*EC*FAC/(BET*G4)
+      BEC = B2*FAC/(BET*G3)
+      Q8 = Q5*Q5+DELT*Q4*Q5*T2
+      Q9 = 1._q+2._q*B*T2
+      hB = -BET*G3*B*T6*(2._q+B*T2)/Q8
+      hRS = -RSTHRD*hB*BEC*ECRS
+      hZ = 3._q*GZ*h/G + hB*(BG*GZ+BEC*ECZET)
+      hT = 2._q*BET*G3*Q9/Q8
+      COMM = H+HRS-7.0_q*T2*HT/6._q
+      PREF = HZ-GZ*T2*HT/G
+      COMM = COMM-PREF*ZET
+      DVCUP = COMM + PREF
+      DVCDN = COMM - PREF
+      ecdd=0.5_q/(sk*g)*t*ht
+      RETURN
+      END SUBROUTINE CORPBE_revtpss
 
-! correlation energy
-     CALL GGASPINCOR(RU,RD,DRT,ECT)
-     TAUK=(TAUWU+TAUWD)/(TAUU+TAUD)
-     ECM1=(RU+RD)*ECT*(1._q+C*TAUK**2._q)
 
-!     CALL GGACOR(RU,DRU,ECU)
-     CALL GGASPINCOR(RU,0.0_q,DRU,ECU)
-     TAUK=TAUWU/TAUU
-     ECM2=TAUK**2._q*RU*ECU
 
-!     CALL GGACOR(RD,DRD,ECD)
-     CALL GGASPINCOR(RD,0.0_q,DRD,ECD)
-     TAUK=TAUWD/TAUD
-     ECM3=TAUK**2._q*RD*ECD
-     EC=ECM1-(1._q+C)*(ECM2+ECM3)
 
-  RETURN
-END SUBROUTINE METAGGA
